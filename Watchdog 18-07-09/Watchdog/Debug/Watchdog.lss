
Watchdog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005948  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000087c  20000000  00005948  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000460  2000087c  000061c4  0002087c  2**2
                  ALLOC
  3 .stack        00002004  20000cdc  00006624  0002087c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002087c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000208a4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002fafc  00000000  00000000  000208fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004e74  00000000  00000000  000503f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e0df  00000000  00000000  0005526d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000df0  00000000  00000000  0006334c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000011d8  00000000  00000000  0006413c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000251ad  00000000  00000000  00065314  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019fbc  00000000  00000000  0008a4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a3c99  00000000  00000000  000a447d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002930  00000000  00000000  00148118  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 2c 00 20 75 02 00 00 71 02 00 00 71 02 00 00     .,. u...q...q...
	...
      2c:	71 02 00 00 00 00 00 00 00 00 00 00 71 02 00 00     q...........q...
      3c:	71 02 00 00 71 02 00 00 71 02 00 00 71 02 00 00     q...q...q...q...
      4c:	51 10 00 00 71 02 00 00 71 02 00 00 71 02 00 00     Q...q...q...q...
      5c:	71 02 00 00 71 02 00 00 71 02 00 00 71 02 00 00     q...q...q...q...
      6c:	71 02 00 00 71 02 00 00 71 02 00 00 71 02 00 00     q...q...q...q...
      7c:	71 02 00 00 71 02 00 00 71 02 00 00 71 02 00 00     q...q...q...q...
      8c:	71 02 00 00 b9 1b 00 00 f5 1b 00 00 cd 1b 00 00     q...............
      9c:	71 02 00 00 e1 1b 00 00 71 02 00 00 71 02 00 00     q.......q...q...
      ac:	71 02 00 00 71 02 00 00 71 02 00 00 71 02 00 00     q...q...q...q...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	2000087c 	.word	0x2000087c
      dc:	00000000 	.word	0x00000000
      e0:	00005948 	.word	0x00005948

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000880 	.word	0x20000880
     110:	00005948 	.word	0x00005948
     114:	00005948 	.word	0x00005948
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b01      	ldr	r3, [pc, #4]	; (124 <atmel_start_init+0x8>)
     120:	4798      	blx	r3
}
     122:	bd10      	pop	{r4, pc}
     124:	0000054d 	.word	0x0000054d

00000128 <QUE_GrowCapacity>:
#include "stdlib.h"
#include "string.h"

/// Functions Definitions

static void QUE_GrowCapacity(volatile struct Queue* queue){
     128:	b5f0      	push	{r4, r5, r6, r7, lr}
     12a:	46de      	mov	lr, fp
     12c:	4657      	mov	r7, sl
     12e:	464e      	mov	r6, r9
     130:	b5c0      	push	{r6, r7, lr}
     132:	b082      	sub	sp, #8
     134:	0004      	movs	r4, r0
	void* temp;
	uint start, end, byteCap;

	start = queue->front;
     136:	6945      	ldr	r5, [r0, #20]
	end = queue->back;
     138:	6983      	ldr	r3, [r0, #24]
     13a:	4699      	mov	r9, r3
	byteCap = queue->byteCapacity;
     13c:	6903      	ldr	r3, [r0, #16]
     13e:	9301      	str	r3, [sp, #4]
	temp = queue->data;
     140:	6807      	ldr	r7, [r0, #0]

	// Sets queue up to allow external modification immediately (The queue can be modified WHILE growing in capacity)
	queue->front = -queue->typeSize;
     142:	6843      	ldr	r3, [r0, #4]
     144:	425b      	negs	r3, r3
     146:	6143      	str	r3, [r0, #20]
	queue->back = (queue->size - 1) * queue->typeSize;
     148:	6882      	ldr	r2, [r0, #8]
     14a:	6843      	ldr	r3, [r0, #4]
     14c:	3a01      	subs	r2, #1
     14e:	4353      	muls	r3, r2
     150:	6183      	str	r3, [r0, #24]
	queue->capacity *= 2;
     152:	68c3      	ldr	r3, [r0, #12]
     154:	005b      	lsls	r3, r3, #1
     156:	60c3      	str	r3, [r0, #12]
	queue->byteCapacity *= 2;
     158:	6903      	ldr	r3, [r0, #16]
     15a:	005b      	lsls	r3, r3, #1
     15c:	6103      	str	r3, [r0, #16]
	queue->data = malloc(queue->byteCapacity);
     15e:	6900      	ldr	r0, [r0, #16]
     160:	4b10      	ldr	r3, [pc, #64]	; (1a4 <QUE_GrowCapacity+0x7c>)
     162:	4798      	blx	r3
     164:	6020      	str	r0, [r4, #0]

	uint i = 0;
	while (start != end){
     166:	454d      	cmp	r5, r9
     168:	d012      	beq.n	190 <QUE_GrowCapacity+0x68>
     16a:	2600      	movs	r6, #0
		start = (start + queue->typeSize) % byteCap;
     16c:	4b0e      	ldr	r3, [pc, #56]	; (1a8 <QUE_GrowCapacity+0x80>)
     16e:	469b      	mov	fp, r3
		memcpy((queue->data + i), (temp + start), queue->typeSize);
     170:	4b0e      	ldr	r3, [pc, #56]	; (1ac <QUE_GrowCapacity+0x84>)
     172:	469a      	mov	sl, r3
		start = (start + queue->typeSize) % byteCap;
     174:	6860      	ldr	r0, [r4, #4]
     176:	1940      	adds	r0, r0, r5
     178:	9901      	ldr	r1, [sp, #4]
     17a:	47d8      	blx	fp
     17c:	000d      	movs	r5, r1
		memcpy((queue->data + i), (temp + start), queue->typeSize);
     17e:	6820      	ldr	r0, [r4, #0]
     180:	6862      	ldr	r2, [r4, #4]
     182:	1980      	adds	r0, r0, r6
     184:	1879      	adds	r1, r7, r1
     186:	47d0      	blx	sl
		i += queue->typeSize;
     188:	6863      	ldr	r3, [r4, #4]
     18a:	18f6      	adds	r6, r6, r3
	while (start != end){
     18c:	45a9      	cmp	r9, r5
     18e:	d1f1      	bne.n	174 <QUE_GrowCapacity+0x4c>
	}
	free(temp);
     190:	0038      	movs	r0, r7
     192:	4b07      	ldr	r3, [pc, #28]	; (1b0 <QUE_GrowCapacity+0x88>)
     194:	4798      	blx	r3
}
     196:	b002      	add	sp, #8
     198:	bc1c      	pop	{r2, r3, r4}
     19a:	4691      	mov	r9, r2
     19c:	469a      	mov	sl, r3
     19e:	46a3      	mov	fp, r4
     1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1a2:	46c0      	nop			; (mov r8, r8)
     1a4:	00004bd9 	.word	0x00004bd9
     1a8:	00000f21 	.word	0x00000f21
     1ac:	00005169 	.word	0x00005169
     1b0:	00004bed 	.word	0x00004bed

000001b4 <QUE_InitQueue>:

void QUE_InitQueue(volatile struct Queue* const queue, uint typeSize){
     1b4:	b570      	push	{r4, r5, r6, lr}
     1b6:	0004      	movs	r4, r0
     1b8:	000d      	movs	r5, r1
	queue->data = malloc(typeSize * QUEUE_CAPACITY_DEFAULT);
     1ba:	0088      	lsls	r0, r1, #2
     1bc:	4b08      	ldr	r3, [pc, #32]	; (1e0 <QUE_InitQueue+0x2c>)
     1be:	4798      	blx	r3
     1c0:	6020      	str	r0, [r4, #0]
	queue->typeSize = typeSize;
     1c2:	6065      	str	r5, [r4, #4]
	queue->size = 0;
     1c4:	2300      	movs	r3, #0
     1c6:	60a3      	str	r3, [r4, #8]
	queue->capacity = QUEUE_CAPACITY_DEFAULT;
     1c8:	3304      	adds	r3, #4
     1ca:	60e3      	str	r3, [r4, #12]
	queue->byteCapacity = queue->typeSize * queue->capacity;
     1cc:	6862      	ldr	r2, [r4, #4]
     1ce:	68e3      	ldr	r3, [r4, #12]
     1d0:	4353      	muls	r3, r2
     1d2:	6123      	str	r3, [r4, #16]
	queue->front = queue->back = -queue->typeSize;
     1d4:	6863      	ldr	r3, [r4, #4]
     1d6:	425b      	negs	r3, r3
     1d8:	61a3      	str	r3, [r4, #24]
     1da:	6163      	str	r3, [r4, #20]
}
     1dc:	bd70      	pop	{r4, r5, r6, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	00004bd9 	.word	0x00004bd9

000001e4 <QUE_Enqueue>:
		copy->back = (copy->back + copy->typeSize) % copy->byteCapacity;
		memcpy((copy->data + copy->back), (original->data + cursor), copy->typeSize);
	}
}

void QUE_Enqueue(volatile struct Queue* queue, const void* value){
     1e4:	b570      	push	{r4, r5, r6, lr}
     1e6:	0004      	movs	r4, r0
     1e8:	000d      	movs	r5, r1
	while (queue->size >= queue->capacity){
     1ea:	6882      	ldr	r2, [r0, #8]
     1ec:	68c3      	ldr	r3, [r0, #12]
     1ee:	429a      	cmp	r2, r3
     1f0:	d306      	bcc.n	200 <QUE_Enqueue+0x1c>
		QUE_GrowCapacity(queue);
     1f2:	4e0c      	ldr	r6, [pc, #48]	; (224 <QUE_Enqueue+0x40>)
     1f4:	0020      	movs	r0, r4
     1f6:	47b0      	blx	r6
	while (queue->size >= queue->capacity){
     1f8:	68a2      	ldr	r2, [r4, #8]
     1fa:	68e3      	ldr	r3, [r4, #12]
     1fc:	429a      	cmp	r2, r3
     1fe:	d2f9      	bcs.n	1f4 <QUE_Enqueue+0x10>
	}
	queue->size++;
     200:	68a3      	ldr	r3, [r4, #8]
     202:	3301      	adds	r3, #1
     204:	60a3      	str	r3, [r4, #8]
	queue->back = (queue->back + queue->typeSize) % queue->byteCapacity;
     206:	69a0      	ldr	r0, [r4, #24]
     208:	6863      	ldr	r3, [r4, #4]
     20a:	6921      	ldr	r1, [r4, #16]
     20c:	18c0      	adds	r0, r0, r3
     20e:	4b06      	ldr	r3, [pc, #24]	; (228 <QUE_Enqueue+0x44>)
     210:	4798      	blx	r3
     212:	61a1      	str	r1, [r4, #24]
	memcpy((queue->data + queue->back), value, queue->typeSize);
     214:	6820      	ldr	r0, [r4, #0]
     216:	69a3      	ldr	r3, [r4, #24]
     218:	6862      	ldr	r2, [r4, #4]
     21a:	18c0      	adds	r0, r0, r3
     21c:	0029      	movs	r1, r5
     21e:	4b03      	ldr	r3, [pc, #12]	; (22c <QUE_Enqueue+0x48>)
     220:	4798      	blx	r3
}
     222:	bd70      	pop	{r4, r5, r6, pc}
     224:	00000129 	.word	0x00000129
     228:	00000f21 	.word	0x00000f21
     22c:	00005169 	.word	0x00005169

00000230 <QUE_Dequeue>:

bool QUE_Dequeue(volatile struct Queue* queue, void* value){
     230:	b570      	push	{r4, r5, r6, lr}
     232:	0004      	movs	r4, r0
     234:	000d      	movs	r5, r1
	if (queue->size == 0) return queue->isBusy = false;
     236:	6883      	ldr	r3, [r0, #8]
     238:	2b00      	cmp	r3, #0
     23a:	d102      	bne.n	242 <QUE_Dequeue+0x12>
     23c:	7703      	strb	r3, [r0, #28]
     23e:	2000      	movs	r0, #0
	queue->size--;
	queue->front = (queue->front + queue->typeSize) % queue->byteCapacity;
	memcpy(value, (queue->data + queue->front), queue->typeSize);

	return true;
}
     240:	bd70      	pop	{r4, r5, r6, pc}
	queue->size--;
     242:	6883      	ldr	r3, [r0, #8]
     244:	3b01      	subs	r3, #1
     246:	6083      	str	r3, [r0, #8]
	queue->front = (queue->front + queue->typeSize) % queue->byteCapacity;
     248:	6940      	ldr	r0, [r0, #20]
     24a:	6863      	ldr	r3, [r4, #4]
     24c:	6921      	ldr	r1, [r4, #16]
     24e:	18c0      	adds	r0, r0, r3
     250:	4b05      	ldr	r3, [pc, #20]	; (268 <QUE_Dequeue+0x38>)
     252:	4798      	blx	r3
     254:	6161      	str	r1, [r4, #20]
	memcpy(value, (queue->data + queue->front), queue->typeSize);
     256:	6821      	ldr	r1, [r4, #0]
     258:	6963      	ldr	r3, [r4, #20]
     25a:	6862      	ldr	r2, [r4, #4]
     25c:	18c9      	adds	r1, r1, r3
     25e:	0028      	movs	r0, r5
     260:	4b02      	ldr	r3, [pc, #8]	; (26c <QUE_Dequeue+0x3c>)
     262:	4798      	blx	r3
	return true;
     264:	2001      	movs	r0, #1
     266:	e7eb      	b.n	240 <QUE_Dequeue+0x10>
     268:	00000f21 	.word	0x00000f21
     26c:	00005169 	.word	0x00005169

00000270 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     270:	e7fe      	b.n	270 <Dummy_Handler>
	...

00000274 <Reset_Handler>:
{
     274:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     276:	4a17      	ldr	r2, [pc, #92]	; (2d4 <Reset_Handler+0x60>)
     278:	4b17      	ldr	r3, [pc, #92]	; (2d8 <Reset_Handler+0x64>)
     27a:	429a      	cmp	r2, r3
     27c:	d011      	beq.n	2a2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     27e:	001a      	movs	r2, r3
     280:	4b16      	ldr	r3, [pc, #88]	; (2dc <Reset_Handler+0x68>)
     282:	429a      	cmp	r2, r3
     284:	d20d      	bcs.n	2a2 <Reset_Handler+0x2e>
     286:	4a16      	ldr	r2, [pc, #88]	; (2e0 <Reset_Handler+0x6c>)
     288:	3303      	adds	r3, #3
     28a:	1a9b      	subs	r3, r3, r2
     28c:	089b      	lsrs	r3, r3, #2
     28e:	3301      	adds	r3, #1
     290:	009b      	lsls	r3, r3, #2
     292:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     294:	4810      	ldr	r0, [pc, #64]	; (2d8 <Reset_Handler+0x64>)
     296:	490f      	ldr	r1, [pc, #60]	; (2d4 <Reset_Handler+0x60>)
     298:	588c      	ldr	r4, [r1, r2]
     29a:	5084      	str	r4, [r0, r2]
     29c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     29e:	429a      	cmp	r2, r3
     2a0:	d1fa      	bne.n	298 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     2a2:	4a10      	ldr	r2, [pc, #64]	; (2e4 <Reset_Handler+0x70>)
     2a4:	4b10      	ldr	r3, [pc, #64]	; (2e8 <Reset_Handler+0x74>)
     2a6:	429a      	cmp	r2, r3
     2a8:	d20a      	bcs.n	2c0 <Reset_Handler+0x4c>
     2aa:	43d3      	mvns	r3, r2
     2ac:	490e      	ldr	r1, [pc, #56]	; (2e8 <Reset_Handler+0x74>)
     2ae:	185b      	adds	r3, r3, r1
     2b0:	2103      	movs	r1, #3
     2b2:	438b      	bics	r3, r1
     2b4:	3304      	adds	r3, #4
     2b6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     2b8:	2100      	movs	r1, #0
     2ba:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     2bc:	4293      	cmp	r3, r2
     2be:	d1fc      	bne.n	2ba <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     2c0:	4a0a      	ldr	r2, [pc, #40]	; (2ec <Reset_Handler+0x78>)
     2c2:	21ff      	movs	r1, #255	; 0xff
     2c4:	4b0a      	ldr	r3, [pc, #40]	; (2f0 <Reset_Handler+0x7c>)
     2c6:	438b      	bics	r3, r1
     2c8:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     2ca:	4b0a      	ldr	r3, [pc, #40]	; (2f4 <Reset_Handler+0x80>)
     2cc:	4798      	blx	r3
        main();
     2ce:	4b0a      	ldr	r3, [pc, #40]	; (2f8 <Reset_Handler+0x84>)
     2d0:	4798      	blx	r3
     2d2:	e7fe      	b.n	2d2 <Reset_Handler+0x5e>
     2d4:	00005948 	.word	0x00005948
     2d8:	20000000 	.word	0x20000000
     2dc:	2000087c 	.word	0x2000087c
     2e0:	20000004 	.word	0x20000004
     2e4:	2000087c 	.word	0x2000087c
     2e8:	20000cdc 	.word	0x20000cdc
     2ec:	e000ed00 	.word	0xe000ed00
     2f0:	00000000 	.word	0x00000000
     2f4:	00004b91 	.word	0x00004b91
     2f8:	00001d45 	.word	0x00001d45

000002fc <EXTINT_init>:
struct i2c_m_sync_desc I2C;

struct usart_sync_descriptor USART;

void EXTINT_init(void)
{
     2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     2fe:	2140      	movs	r1, #64	; 0x40
     300:	2388      	movs	r3, #136	; 0x88
     302:	4a24      	ldr	r2, [pc, #144]	; (394 <EXTINT_init+0x98>)
     304:	50d1      	str	r1, [r2, r3]
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     306:	4a24      	ldr	r2, [pc, #144]	; (398 <EXTINT_init+0x9c>)
     308:	6951      	ldr	r1, [r2, #20]
     30a:	2380      	movs	r3, #128	; 0x80
     30c:	00db      	lsls	r3, r3, #3
     30e:	430b      	orrs	r3, r1
     310:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     312:	20c0      	movs	r0, #192	; 0xc0
     314:	05c0      	lsls	r0, r0, #23
     316:	2280      	movs	r2, #128	; 0x80
     318:	0452      	lsls	r2, r2, #17
     31a:	2382      	movs	r3, #130	; 0x82
     31c:	005b      	lsls	r3, r3, #1
     31e:	50c2      	str	r2, [r0, r3]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     320:	2382      	movs	r3, #130	; 0x82
     322:	05db      	lsls	r3, r3, #23
     324:	2294      	movs	r2, #148	; 0x94
     326:	0052      	lsls	r2, r2, #1
     328:	4d1c      	ldr	r5, [pc, #112]	; (39c <EXTINT_init+0xa0>)
     32a:	509d      	str	r5, [r3, r2]
     32c:	491c      	ldr	r1, [pc, #112]	; (3a0 <EXTINT_init+0xa4>)
     32e:	5099      	str	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     330:	24ac      	movs	r4, #172	; 0xac
     332:	0064      	lsls	r4, r4, #1
     334:	5d1a      	ldrb	r2, [r3, r4]
     336:	2104      	movs	r1, #4
     338:	438a      	bics	r2, r1
     33a:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     33c:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     33e:	2701      	movs	r7, #1
     340:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     342:	2601      	movs	r6, #1
     344:	4331      	orrs	r1, r6
     346:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     348:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     34a:	219e      	movs	r1, #158	; 0x9e
     34c:	0049      	lsls	r1, r1, #1
     34e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     350:	3c4a      	subs	r4, #74	; 0x4a
     352:	3cff      	subs	r4, #255	; 0xff
     354:	43a2      	bics	r2, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     356:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     358:	2284      	movs	r2, #132	; 0x84
     35a:	2480      	movs	r4, #128	; 0x80
     35c:	0324      	lsls	r4, r4, #12
     35e:	5084      	str	r4, [r0, r2]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     360:	3994      	subs	r1, #148	; 0x94
     362:	505d      	str	r5, [r3, r1]
     364:	4d0f      	ldr	r5, [pc, #60]	; (3a4 <EXTINT_init+0xa8>)
     366:	505d      	str	r5, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     368:	5084      	str	r4, [r0, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     36a:	312b      	adds	r1, #43	; 0x2b
     36c:	5c5d      	ldrb	r5, [r3, r1]
     36e:	3a80      	subs	r2, #128	; 0x80
     370:	4315      	orrs	r5, r2
     372:	545d      	strb	r5, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = mask;
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     374:	3294      	adds	r2, #148	; 0x94
     376:	5084      	str	r4, [r0, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     378:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     37a:	43ba      	bics	r2, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     37c:	4332      	orrs	r2, r6
     37e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     380:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     382:	391a      	subs	r1, #26
     384:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     386:	200f      	movs	r0, #15
     388:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     38a:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(BUTTON, PINMUX_PB19A_EIC_EXTINT3);

	ext_irq_init();
     38c:	4b06      	ldr	r3, [pc, #24]	; (3a8 <EXTINT_init+0xac>)
     38e:	4798      	blx	r3
}
     390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     392:	46c0      	nop			; (mov r8, r8)
     394:	40001c00 	.word	0x40001c00
     398:	40000800 	.word	0x40000800
     39c:	40020000 	.word	0x40020000
     3a0:	c0020100 	.word	0xc0020100
     3a4:	c0020008 	.word	0xc0020008
     3a8:	0000080d 	.word	0x0000080d

000003ac <I2C_PORT_init>:

void I2C_PORT_init(void)
{
     3ac:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3ae:	2382      	movs	r3, #130	; 0x82
     3b0:	05db      	lsls	r3, r3, #23
     3b2:	2050      	movs	r0, #80	; 0x50
     3b4:	5c19      	ldrb	r1, [r3, r0]
     3b6:	2204      	movs	r2, #4
     3b8:	4391      	bics	r1, r2
     3ba:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3bc:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3be:	2501      	movs	r5, #1
     3c0:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3c2:	2401      	movs	r4, #1
     3c4:	4321      	orrs	r1, r4
     3c6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3c8:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ca:	3818      	subs	r0, #24
     3cc:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3ce:	260f      	movs	r6, #15
     3d0:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     3d2:	3e0d      	subs	r6, #13
     3d4:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3d6:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3d8:	2151      	movs	r1, #81	; 0x51
     3da:	5c5e      	ldrb	r6, [r3, r1]
     3dc:	4396      	bics	r6, r2
     3de:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3e0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3e2:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e4:	4322      	orrs	r2, r4
     3e6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e8:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ea:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	3942      	subs	r1, #66	; 0x42
     3ee:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	3111      	adds	r1, #17
     3f2:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(SCL, PINMUX_PA17C_SERCOM1_PAD1);
}
     3f6:	bd70      	pop	{r4, r5, r6, pc}

000003f8 <I2C_CLOCK_init>:
     3f8:	4b06      	ldr	r3, [pc, #24]	; (414 <I2C_CLOCK_init+0x1c>)
     3fa:	2140      	movs	r1, #64	; 0x40
     3fc:	22d0      	movs	r2, #208	; 0xd0
     3fe:	5099      	str	r1, [r3, r2]
     400:	3103      	adds	r1, #3
     402:	3a08      	subs	r2, #8
     404:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     406:	4a04      	ldr	r2, [pc, #16]	; (418 <I2C_CLOCK_init+0x20>)
     408:	69d3      	ldr	r3, [r2, #28]
     40a:	393f      	subs	r1, #63	; 0x3f
     40c:	430b      	orrs	r3, r1
     40e:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
}
     410:	4770      	bx	lr
     412:	46c0      	nop			; (mov r8, r8)
     414:	40001c00 	.word	0x40001c00
     418:	40000800 	.word	0x40000800

0000041c <I2C_init>:

void I2C_init(void)
{
     41c:	b510      	push	{r4, lr}
	I2C_CLOCK_init();
     41e:	4b04      	ldr	r3, [pc, #16]	; (430 <I2C_init+0x14>)
     420:	4798      	blx	r3
	i2c_m_sync_init(&I2C, SERCOM1);
     422:	4904      	ldr	r1, [pc, #16]	; (434 <I2C_init+0x18>)
     424:	4804      	ldr	r0, [pc, #16]	; (438 <I2C_init+0x1c>)
     426:	4b05      	ldr	r3, [pc, #20]	; (43c <I2C_init+0x20>)
     428:	4798      	blx	r3
	I2C_PORT_init();
     42a:	4b05      	ldr	r3, [pc, #20]	; (440 <I2C_init+0x24>)
     42c:	4798      	blx	r3
}
     42e:	bd10      	pop	{r4, pc}
     430:	000003f9 	.word	0x000003f9
     434:	42000800 	.word	0x42000800
     438:	200009f8 	.word	0x200009f8
     43c:	0000096d 	.word	0x0000096d
     440:	000003ad 	.word	0x000003ad

00000444 <USART_PORT_init>:

void USART_PORT_init(void)
{
     444:	b5f0      	push	{r4, r5, r6, r7, lr}
     446:	46d6      	mov	lr, sl
     448:	464f      	mov	r7, r9
     44a:	4646      	mov	r6, r8
     44c:	b5c0      	push	{r6, r7, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     44e:	2382      	movs	r3, #130	; 0x82
     450:	05db      	lsls	r3, r3, #23
     452:	20d0      	movs	r0, #208	; 0xd0
     454:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     456:	2601      	movs	r6, #1
     458:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45a:	2201      	movs	r2, #1
     45c:	4311      	orrs	r1, r2
     45e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     460:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     462:	21b8      	movs	r1, #184	; 0xb8
     464:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     466:	250f      	movs	r5, #15
     468:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     46a:	2402      	movs	r4, #2
     46c:	46a1      	mov	r9, r4
     46e:	464c      	mov	r4, r9
     470:	4320      	orrs	r0, r4
     472:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     474:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     476:	20c0      	movs	r0, #192	; 0xc0
     478:	05c0      	lsls	r0, r0, #23
     47a:	4682      	mov	sl, r0
     47c:	2780      	movs	r7, #128	; 0x80
     47e:	02bf      	lsls	r7, r7, #10
     480:	2488      	movs	r4, #136	; 0x88
     482:	5107      	str	r7, [r0, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     484:	3420      	adds	r4, #32
     486:	46a4      	mov	ip, r4
     488:	2480      	movs	r4, #128	; 0x80
     48a:	05e4      	lsls	r4, r4, #23
     48c:	46a0      	mov	r8, r4
     48e:	4664      	mov	r4, ip
     490:	4640      	mov	r0, r8
     492:	5118      	str	r0, [r3, r4]
     494:	4814      	ldr	r0, [pc, #80]	; (4e8 <USART_PORT_init+0xa4>)
     496:	4680      	mov	r8, r0
     498:	4660      	mov	r0, ip
     49a:	4644      	mov	r4, r8
     49c:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     49e:	3814      	subs	r0, #20
     4a0:	4654      	mov	r4, sl
     4a2:	5027      	str	r7, [r4, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4a4:	27d1      	movs	r7, #209	; 0xd1
     4a6:	5dd8      	ldrb	r0, [r3, r7]
     4a8:	2404      	movs	r4, #4
     4aa:	43a0      	bics	r0, r4
     4ac:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ae:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4b0:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4b2:	4310      	orrs	r0, r2
     4b4:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4b6:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4b8:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ba:	3fc2      	subs	r7, #194	; 0xc2
     4bc:	4038      	ands	r0, r7
	tmp |= PORT_PMUX_PMUXO(data);
     4be:	3711      	adds	r7, #17
     4c0:	4338      	orrs	r0, r7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4c2:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c4:	20d2      	movs	r0, #210	; 0xd2
     4c6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c8:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ca:	4311      	orrs	r1, r2
     4cc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ce:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d0:	21b9      	movs	r1, #185	; 0xb9
     4d2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4d4:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     4d6:	4648      	mov	r0, r9
     4d8:	4302      	orrs	r2, r0
     4da:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4dc:	545a      	strb	r2, [r3, r1]
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      // <GPIO_PIN_FUNCTION_I"> I
	                      PINMUX_PB17C_SERCOM5_PAD1);

	gpio_set_pin_function(RX, PINMUX_PB18C_SERCOM5_PAD2);
}
     4de:	bc1c      	pop	{r2, r3, r4}
     4e0:	4690      	mov	r8, r2
     4e2:	4699      	mov	r9, r3
     4e4:	46a2      	mov	sl, r4
     4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4e8:	c0000002 	.word	0xc0000002

000004ec <USART_CLOCK_init>:
     4ec:	4b05      	ldr	r3, [pc, #20]	; (504 <USART_CLOCK_init+0x18>)
     4ee:	2140      	movs	r1, #64	; 0x40
     4f0:	22e4      	movs	r2, #228	; 0xe4
     4f2:	5099      	str	r1, [r3, r2]
     4f4:	2043      	movs	r0, #67	; 0x43
     4f6:	3a04      	subs	r2, #4
     4f8:	5098      	str	r0, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM5;
     4fa:	4a03      	ldr	r2, [pc, #12]	; (508 <USART_CLOCK_init+0x1c>)
     4fc:	69d3      	ldr	r3, [r2, #28]
     4fe:	430b      	orrs	r3, r1
     500:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM5_bit(MCLK);
}
     502:	4770      	bx	lr
     504:	40001c00 	.word	0x40001c00
     508:	40000800 	.word	0x40000800

0000050c <USART_init>:

void USART_init(void)
{
     50c:	b510      	push	{r4, lr}
	USART_CLOCK_init();
     50e:	4b05      	ldr	r3, [pc, #20]	; (524 <USART_init+0x18>)
     510:	4798      	blx	r3
	usart_sync_init(&USART, SERCOM5, (void *)NULL);
     512:	2200      	movs	r2, #0
     514:	4904      	ldr	r1, [pc, #16]	; (528 <USART_init+0x1c>)
     516:	4805      	ldr	r0, [pc, #20]	; (52c <USART_init+0x20>)
     518:	4b05      	ldr	r3, [pc, #20]	; (530 <USART_init+0x24>)
     51a:	4798      	blx	r3
	USART_PORT_init();
     51c:	4b05      	ldr	r3, [pc, #20]	; (534 <USART_init+0x28>)
     51e:	4798      	blx	r3
}
     520:	bd10      	pop	{r4, pc}
     522:	46c0      	nop			; (mov r8, r8)
     524:	000004ed 	.word	0x000004ed
     528:	42001800 	.word	0x42001800
     52c:	20000a34 	.word	0x20000a34
     530:	00000d91 	.word	0x00000d91
     534:	00000445 	.word	0x00000445

00000538 <delay_driver_init>:

void delay_driver_init(void)
{
     538:	b510      	push	{r4, lr}
	delay_init(SysTick);
     53a:	4802      	ldr	r0, [pc, #8]	; (544 <delay_driver_init+0xc>)
     53c:	4b02      	ldr	r3, [pc, #8]	; (548 <delay_driver_init+0x10>)
     53e:	4798      	blx	r3
}
     540:	bd10      	pop	{r4, pc}
     542:	46c0      	nop			; (mov r8, r8)
     544:	e000e010 	.word	0xe000e010
     548:	00000785 	.word	0x00000785

0000054c <system_init>:

	timer_init(&TIMER3, TC6, _tc_get_timer());
}

void system_init(void)
{
     54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     54e:	46de      	mov	lr, fp
     550:	4657      	mov	r7, sl
     552:	464e      	mov	r6, r9
     554:	4645      	mov	r5, r8
     556:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     558:	4b6a      	ldr	r3, [pc, #424]	; (704 <system_init+0x1b8>)
     55a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     55c:	22c0      	movs	r2, #192	; 0xc0
     55e:	05d2      	lsls	r2, r2, #23
     560:	2180      	movs	r1, #128	; 0x80
     562:	00c9      	lsls	r1, r1, #3
     564:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     566:	2382      	movs	r3, #130	; 0x82
     568:	05db      	lsls	r3, r3, #23
     56a:	4867      	ldr	r0, [pc, #412]	; (708 <system_init+0x1bc>)
     56c:	6298      	str	r0, [r3, #40]	; 0x28
     56e:	20c0      	movs	r0, #192	; 0xc0
     570:	0600      	lsls	r0, r0, #24
     572:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     574:	6151      	str	r1, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     576:	254a      	movs	r5, #74	; 0x4a
     578:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     57a:	2101      	movs	r1, #1
     57c:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57e:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     580:	2580      	movs	r5, #128	; 0x80
     582:	012d      	lsls	r5, r5, #4
     584:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     586:	4c61      	ldr	r4, [pc, #388]	; (70c <system_init+0x1c0>)
     588:	629c      	str	r4, [r3, #40]	; 0x28
     58a:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     58c:	6155      	str	r5, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	264b      	movs	r6, #75	; 0x4b
     590:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     594:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     596:	2580      	movs	r5, #128	; 0x80
     598:	02ed      	lsls	r5, r5, #11
     59a:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59c:	2680      	movs	r6, #128	; 0x80
     59e:	05f6      	lsls	r6, r6, #23
     5a0:	46b2      	mov	sl, r6
     5a2:	629e      	str	r6, [r3, #40]	; 0x28
     5a4:	4f5a      	ldr	r7, [pc, #360]	; (710 <system_init+0x1c4>)
     5a6:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a8:	6155      	str	r5, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5aa:	2752      	movs	r7, #82	; 0x52
     5ac:	5ddd      	ldrb	r5, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ae:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5b0:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5b2:	2580      	movs	r5, #128	; 0x80
     5b4:	03ad      	lsls	r5, r5, #14
     5b6:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5b8:	629e      	str	r6, [r3, #40]	; 0x28
     5ba:	4f56      	ldr	r7, [pc, #344]	; (714 <system_init+0x1c8>)
     5bc:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5be:	6155      	str	r5, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c0:	2755      	movs	r7, #85	; 0x55
     5c2:	5ddd      	ldrb	r5, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5c4:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5c6:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5c8:	2588      	movs	r5, #136	; 0x88
     5ca:	46ac      	mov	ip, r5
     5cc:	5151      	str	r1, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5ce:	3520      	adds	r5, #32
     5d0:	4f51      	ldr	r7, [pc, #324]	; (718 <system_init+0x1cc>)
     5d2:	515f      	str	r7, [r3, r5]
     5d4:	5158      	str	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5d6:	2694      	movs	r6, #148	; 0x94
     5d8:	46b3      	mov	fp, r6
     5da:	5191      	str	r1, [r2, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5dc:	362c      	adds	r6, #44	; 0x2c
     5de:	46b1      	mov	r9, r6
     5e0:	5d9e      	ldrb	r6, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e2:	438e      	bics	r6, r1
     5e4:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5e6:	464e      	mov	r6, r9
     5e8:	4647      	mov	r7, r8
     5ea:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5ec:	3ebe      	subs	r6, #190	; 0xbe
     5ee:	46b0      	mov	r8, r6
     5f0:	4666      	mov	r6, ip
     5f2:	4647      	mov	r7, r8
     5f4:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5f6:	4e49      	ldr	r6, [pc, #292]	; (71c <system_init+0x1d0>)
     5f8:	515e      	str	r6, [r3, r5]
     5fa:	5158      	str	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5fc:	4646      	mov	r6, r8
     5fe:	465f      	mov	r7, fp
     600:	51d6      	str	r6, [r2, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     602:	36bf      	adds	r6, #191	; 0xbf
     604:	46b1      	mov	r9, r6
     606:	5d9e      	ldrb	r6, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     608:	438e      	bics	r6, r1
     60a:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     60c:	464e      	mov	r6, r9
     60e:	4647      	mov	r7, r8
     610:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     612:	3ebd      	subs	r6, #189	; 0xbd
     614:	46b0      	mov	r8, r6
     616:	4666      	mov	r6, ip
     618:	4647      	mov	r7, r8
     61a:	5197      	str	r7, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     61c:	4e40      	ldr	r6, [pc, #256]	; (720 <system_init+0x1d4>)
     61e:	515e      	str	r6, [r3, r5]
     620:	5158      	str	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     622:	465e      	mov	r6, fp
     624:	5197      	str	r7, [r2, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     626:	37be      	adds	r7, #190	; 0xbe
     628:	5ddd      	ldrb	r5, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     62a:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     62c:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     62e:	3746      	adds	r7, #70	; 0x46
     630:	2520      	movs	r5, #32
     632:	46ac      	mov	ip, r5
     634:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     636:	3509      	adds	r5, #9
     638:	35ff      	adds	r5, #255	; 0xff
     63a:	4e3a      	ldr	r6, [pc, #232]	; (724 <system_init+0x1d8>)
     63c:	515e      	str	r6, [r3, r5]
     63e:	5158      	str	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     640:	208c      	movs	r0, #140	; 0x8c
     642:	0040      	lsls	r0, r0, #1
     644:	4666      	mov	r6, ip
     646:	5016      	str	r6, [r2, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     648:	2046      	movs	r0, #70	; 0x46
     64a:	30ff      	adds	r0, #255	; 0xff
     64c:	4684      	mov	ip, r0
     64e:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     650:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     652:	4666      	mov	r6, ip
     654:	5598      	strb	r0, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     656:	2080      	movs	r0, #128	; 0x80
     658:	0500      	lsls	r0, r0, #20
     65a:	51d0      	str	r0, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     65c:	4656      	mov	r6, sl
     65e:	515e      	str	r6, [r3, r5]
     660:	4e31      	ldr	r6, [pc, #196]	; (728 <system_init+0x1dc>)
     662:	515e      	str	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     664:	3d14      	subs	r5, #20
     666:	5150      	str	r0, [r2, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     668:	205c      	movs	r0, #92	; 0x5c
     66a:	30ff      	adds	r0, #255	; 0xff
     66c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     66e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     670:	541a      	strb	r2, [r3, r0]
	                   // <true"> High
	                   false);

	gpio_set_pin_function(MOTOR, GPIO_PIN_FUNCTION_OFF);

	EXTINT_init();
     672:	4b2e      	ldr	r3, [pc, #184]	; (72c <system_init+0x1e0>)
     674:	4798      	blx	r3

	I2C_init();
     676:	4b2e      	ldr	r3, [pc, #184]	; (730 <system_init+0x1e4>)
     678:	4798      	blx	r3

	USART_init();
     67a:	4b2e      	ldr	r3, [pc, #184]	; (734 <system_init+0x1e8>)
     67c:	4798      	blx	r3

	delay_driver_init();
     67e:	4b2e      	ldr	r3, [pc, #184]	; (738 <system_init+0x1ec>)
     680:	4798      	blx	r3
}

static inline void hri_mclk_set_APBCMASK_TC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC0;
     682:	69e2      	ldr	r2, [r4, #28]
     684:	2380      	movs	r3, #128	; 0x80
     686:	015b      	lsls	r3, r3, #5
     688:	4313      	orrs	r3, r2
     68a:	61e3      	str	r3, [r4, #28]
     68c:	4f2b      	ldr	r7, [pc, #172]	; (73c <system_init+0x1f0>)
     68e:	2340      	movs	r3, #64	; 0x40
     690:	4698      	mov	r8, r3
     692:	33b8      	adds	r3, #184	; 0xb8
     694:	4642      	mov	r2, r8
     696:	50fa      	str	r2, [r7, r3]
	timer_init(&TIMER0, TC0, _tc_get_timer());
     698:	4e29      	ldr	r6, [pc, #164]	; (740 <system_init+0x1f4>)
     69a:	47b0      	blx	r6
     69c:	0002      	movs	r2, r0
     69e:	4929      	ldr	r1, [pc, #164]	; (744 <system_init+0x1f8>)
     6a0:	4829      	ldr	r0, [pc, #164]	; (748 <system_init+0x1fc>)
     6a2:	4d2a      	ldr	r5, [pc, #168]	; (74c <system_init+0x200>)
     6a4:	47a8      	blx	r5
}

static inline void hri_mclk_set_APBCMASK_TC2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC2;
     6a6:	69e2      	ldr	r2, [r4, #28]
     6a8:	2380      	movs	r3, #128	; 0x80
     6aa:	01db      	lsls	r3, r3, #7
     6ac:	4313      	orrs	r3, r2
     6ae:	61e3      	str	r3, [r4, #28]
     6b0:	23fc      	movs	r3, #252	; 0xfc
     6b2:	4642      	mov	r2, r8
     6b4:	50fa      	str	r2, [r7, r3]
	timer_init(&TIMER1, TC2, _tc_get_timer());
     6b6:	47b0      	blx	r6
     6b8:	0002      	movs	r2, r0
     6ba:	4925      	ldr	r1, [pc, #148]	; (750 <system_init+0x204>)
     6bc:	4825      	ldr	r0, [pc, #148]	; (754 <system_init+0x208>)
     6be:	47a8      	blx	r5
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     6c0:	69e2      	ldr	r2, [r4, #28]
     6c2:	2380      	movs	r3, #128	; 0x80
     6c4:	025b      	lsls	r3, r3, #9
     6c6:	4313      	orrs	r3, r2
     6c8:	61e3      	str	r3, [r4, #28]
     6ca:	2380      	movs	r3, #128	; 0x80
     6cc:	005b      	lsls	r3, r3, #1
     6ce:	4642      	mov	r2, r8
     6d0:	50fa      	str	r2, [r7, r3]
	timer_init(&TIMER2, TC4, _tc_get_timer());
     6d2:	47b0      	blx	r6
     6d4:	0002      	movs	r2, r0
     6d6:	4920      	ldr	r1, [pc, #128]	; (758 <system_init+0x20c>)
     6d8:	4820      	ldr	r0, [pc, #128]	; (75c <system_init+0x210>)
     6da:	47a8      	blx	r5
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     6dc:	6a23      	ldr	r3, [r4, #32]
     6de:	2208      	movs	r2, #8
     6e0:	4313      	orrs	r3, r2
     6e2:	6223      	str	r3, [r4, #32]
     6e4:	2398      	movs	r3, #152	; 0x98
     6e6:	005b      	lsls	r3, r3, #1
     6e8:	4642      	mov	r2, r8
     6ea:	50fa      	str	r2, [r7, r3]
	timer_init(&TIMER3, TC6, _tc_get_timer());
     6ec:	47b0      	blx	r6
     6ee:	0002      	movs	r2, r0
     6f0:	491b      	ldr	r1, [pc, #108]	; (760 <system_init+0x214>)
     6f2:	481c      	ldr	r0, [pc, #112]	; (764 <system_init+0x218>)
     6f4:	47a8      	blx	r5

	TIMER0_init();
	TIMER1_init();
	TIMER2_init();
	TIMER3_init();
}
     6f6:	bc3c      	pop	{r2, r3, r4, r5}
     6f8:	4690      	mov	r8, r2
     6fa:	4699      	mov	r9, r3
     6fc:	46a2      	mov	sl, r4
     6fe:	46ab      	mov	fp, r5
     700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     702:	46c0      	nop			; (mov r8, r8)
     704:	00000e9d 	.word	0x00000e9d
     708:	40000400 	.word	0x40000400
     70c:	40000800 	.word	0x40000800
     710:	c0000004 	.word	0xc0000004
     714:	c0000020 	.word	0xc0000020
     718:	40000001 	.word	0x40000001
     71c:	40000002 	.word	0x40000002
     720:	40000004 	.word	0x40000004
     724:	40000020 	.word	0x40000020
     728:	c0000800 	.word	0xc0000800
     72c:	000002fd 	.word	0x000002fd
     730:	0000041d 	.word	0x0000041d
     734:	0000050d 	.word	0x0000050d
     738:	00000539 	.word	0x00000539
     73c:	40001c00 	.word	0x40001c00
     740:	00001b75 	.word	0x00001b75
     744:	42003000 	.word	0x42003000
     748:	20000a5c 	.word	0x20000a5c
     74c:	00000b19 	.word	0x00000b19
     750:	42003800 	.word	0x42003800
     754:	20000a18 	.word	0x20000a18
     758:	42004000 	.word	0x42004000
     75c:	200009dc 	.word	0x200009dc
     760:	43000c00 	.word	0x43000c00
     764:	20000a40 	.word	0x20000a40

00000768 <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     768:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     76c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     76e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     770:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     774:	4770      	bx	lr

00000776 <atomic_leave_critical>:
     776:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     77a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     77c:	f383 8810 	msr	PRIMASK, r3
}
     780:	4770      	bx	lr
	...

00000784 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     784:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     786:	4b02      	ldr	r3, [pc, #8]	; (790 <delay_init+0xc>)
     788:	6018      	str	r0, [r3, #0]
     78a:	4b02      	ldr	r3, [pc, #8]	; (794 <delay_init+0x10>)
     78c:	4798      	blx	r3
}
     78e:	bd10      	pop	{r4, pc}
     790:	20000898 	.word	0x20000898
     794:	00001899 	.word	0x00001899

00000798 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     798:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     79a:	4b04      	ldr	r3, [pc, #16]	; (7ac <delay_ms+0x14>)
     79c:	681c      	ldr	r4, [r3, #0]
     79e:	4b04      	ldr	r3, [pc, #16]	; (7b0 <delay_ms+0x18>)
     7a0:	4798      	blx	r3
     7a2:	0001      	movs	r1, r0
     7a4:	0020      	movs	r0, r4
     7a6:	4b03      	ldr	r3, [pc, #12]	; (7b4 <delay_ms+0x1c>)
     7a8:	4798      	blx	r3
}
     7aa:	bd10      	pop	{r4, pc}
     7ac:	20000898 	.word	0x20000898
     7b0:	00000e95 	.word	0x00000e95
     7b4:	000018ad 	.word	0x000018ad

000007b8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     7ba:	4b13      	ldr	r3, [pc, #76]	; (808 <process_ext_irq+0x50>)
     7bc:	68d9      	ldr	r1, [r3, #12]
     7be:	4288      	cmp	r0, r1
     7c0:	d005      	beq.n	7ce <process_ext_irq+0x16>
     7c2:	2201      	movs	r2, #1
     7c4:	2702      	movs	r7, #2
     7c6:	2400      	movs	r4, #0
     7c8:	26ff      	movs	r6, #255	; 0xff
     7ca:	001d      	movs	r5, r3
     7cc:	e016      	b.n	7fc <process_ext_irq+0x44>
     7ce:	2301      	movs	r3, #1
			if (ext_irqs[middle].cb) {
     7d0:	00db      	lsls	r3, r3, #3
     7d2:	4a0d      	ldr	r2, [pc, #52]	; (808 <process_ext_irq+0x50>)
     7d4:	589b      	ldr	r3, [r3, r2]
     7d6:	2b00      	cmp	r3, #0
     7d8:	d000      	beq.n	7dc <process_ext_irq+0x24>
				ext_irqs[middle].cb();
     7da:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			upper = middle - 1;
     7de:	3a01      	subs	r2, #1
     7e0:	b2d7      	uxtb	r7, r2
	while (upper >= lower) {
     7e2:	42a7      	cmp	r7, r4
     7e4:	d3fa      	bcc.n	7dc <process_ext_irq+0x24>
		middle = (upper + lower) >> 1;
     7e6:	193b      	adds	r3, r7, r4
     7e8:	105b      	asrs	r3, r3, #1
     7ea:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     7ec:	2a01      	cmp	r2, #1
     7ee:	d8f5      	bhi.n	7dc <process_ext_irq+0x24>
     7f0:	4033      	ands	r3, r6
		if (ext_irqs[middle].pin == pin) {
     7f2:	00d9      	lsls	r1, r3, #3
     7f4:	1869      	adds	r1, r5, r1
     7f6:	6849      	ldr	r1, [r1, #4]
     7f8:	4281      	cmp	r1, r0
     7fa:	d0e9      	beq.n	7d0 <process_ext_irq+0x18>
		if (ext_irqs[middle].pin < pin) {
     7fc:	4288      	cmp	r0, r1
     7fe:	d9ee      	bls.n	7de <process_ext_irq+0x26>
			lower = middle + 1;
     800:	3201      	adds	r2, #1
     802:	b2d4      	uxtb	r4, r2
     804:	e7ed      	b.n	7e2 <process_ext_irq+0x2a>
     806:	46c0      	nop			; (mov r8, r8)
     808:	2000089c 	.word	0x2000089c

0000080c <ext_irq_init>:
{
     80c:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     80e:	4b06      	ldr	r3, [pc, #24]	; (828 <ext_irq_init+0x1c>)
     810:	2101      	movs	r1, #1
     812:	4249      	negs	r1, r1
     814:	6059      	str	r1, [r3, #4]
		ext_irqs[i].cb  = NULL;
     816:	2200      	movs	r2, #0
     818:	601a      	str	r2, [r3, #0]
		ext_irqs[i].pin = 0xFFFFFFFF;
     81a:	60d9      	str	r1, [r3, #12]
		ext_irqs[i].cb  = NULL;
     81c:	609a      	str	r2, [r3, #8]
	return _ext_irq_init(process_ext_irq);
     81e:	4803      	ldr	r0, [pc, #12]	; (82c <ext_irq_init+0x20>)
     820:	4b03      	ldr	r3, [pc, #12]	; (830 <ext_irq_init+0x24>)
     822:	4798      	blx	r3
}
     824:	bd10      	pop	{r4, pc}
     826:	46c0      	nop			; (mov r8, r8)
     828:	2000089c 	.word	0x2000089c
     82c:	000007b9 	.word	0x000007b9
     830:	00000f59 	.word	0x00000f59

00000834 <ext_irq_register>:
{
     834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (ext_irqs[i].pin == pin) {
     836:	4b2b      	ldr	r3, [pc, #172]	; (8e4 <ext_irq_register+0xb0>)
     838:	685b      	ldr	r3, [r3, #4]
     83a:	4298      	cmp	r0, r3
     83c:	d01a      	beq.n	874 <ext_irq_register+0x40>
     83e:	4b29      	ldr	r3, [pc, #164]	; (8e4 <ext_irq_register+0xb0>)
     840:	68db      	ldr	r3, [r3, #12]
     842:	4283      	cmp	r3, r0
     844:	d00d      	beq.n	862 <ext_irq_register+0x2e>
	if (NULL == cb) {
     846:	2900      	cmp	r1, #0
     848:	d023      	beq.n	892 <ext_irq_register+0x5e>
			if (NULL == ext_irqs[i].cb) {
     84a:	4b26      	ldr	r3, [pc, #152]	; (8e4 <ext_irq_register+0xb0>)
     84c:	681b      	ldr	r3, [r3, #0]
     84e:	2200      	movs	r2, #0
     850:	2b00      	cmp	r3, #0
     852:	d023      	beq.n	89c <ext_irq_register+0x68>
     854:	4b23      	ldr	r3, [pc, #140]	; (8e4 <ext_irq_register+0xb0>)
     856:	689b      	ldr	r3, [r3, #8]
     858:	2b00      	cmp	r3, #0
     85a:	d01d      	beq.n	898 <ext_irq_register+0x64>
		return ERR_INVALID_ARG;
     85c:	200d      	movs	r0, #13
     85e:	4240      	negs	r0, r0
     860:	e03e      	b.n	8e0 <ext_irq_register+0xac>
		if (ext_irqs[i].pin == pin) {
     862:	2301      	movs	r3, #1
			ext_irqs[i].cb = cb;
     864:	00db      	lsls	r3, r3, #3
     866:	4a1f      	ldr	r2, [pc, #124]	; (8e4 <ext_irq_register+0xb0>)
     868:	5099      	str	r1, [r3, r2]
	if (NULL == cb) {
     86a:	2900      	cmp	r1, #0
     86c:	d135      	bne.n	8da <ext_irq_register+0xa6>
		return _ext_irq_enable(pin, false);
     86e:	4b1e      	ldr	r3, [pc, #120]	; (8e8 <ext_irq_register+0xb4>)
     870:	4798      	blx	r3
     872:	e035      	b.n	8e0 <ext_irq_register+0xac>
		if (ext_irqs[i].pin == pin) {
     874:	2300      	movs	r3, #0
     876:	e7f5      	b.n	864 <ext_irq_register+0x30>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     878:	1c5c      	adds	r4, r3, #1
     87a:	d01b      	beq.n	8b4 <ext_irq_register+0x80>
				struct ext_irq tmp = ext_irqs[j];
     87c:	4d19      	ldr	r5, [pc, #100]	; (8e4 <ext_irq_register+0xb0>)
     87e:	682c      	ldr	r4, [r5, #0]
     880:	46a4      	mov	ip, r4
				ext_irqs[j] = ext_irqs[i];
     882:	00cc      	lsls	r4, r1, #3
     884:	192c      	adds	r4, r5, r4
     886:	ccc0      	ldmia	r4!, {r6, r7}
     888:	c5c0      	stmia	r5!, {r6, r7}
				ext_irqs[i] = tmp;
     88a:	4664      	mov	r4, ip
     88c:	6014      	str	r4, [r2, #0]
     88e:	6053      	str	r3, [r2, #4]
     890:	e010      	b.n	8b4 <ext_irq_register+0x80>
			return ERR_INVALID_ARG;
     892:	200d      	movs	r0, #13
     894:	4240      	negs	r0, r0
     896:	e023      	b.n	8e0 <ext_irq_register+0xac>
			if (NULL == ext_irqs[i].cb) {
     898:	2301      	movs	r3, #1
     89a:	2201      	movs	r2, #1
				ext_irqs[i].cb  = cb;
     89c:	4c11      	ldr	r4, [pc, #68]	; (8e4 <ext_irq_register+0xb0>)
     89e:	00db      	lsls	r3, r3, #3
     8a0:	5119      	str	r1, [r3, r4]
				ext_irqs[i].pin = pin;
     8a2:	18e3      	adds	r3, r4, r3
     8a4:	6058      	str	r0, [r3, #4]
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     8a6:	0011      	movs	r1, r2
				ext_irqs[i] = tmp;
     8a8:	00d2      	lsls	r2, r2, #3
     8aa:	18a2      	adds	r2, r4, r2
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     8ac:	6863      	ldr	r3, [r4, #4]
     8ae:	6854      	ldr	r4, [r2, #4]
     8b0:	42a3      	cmp	r3, r4
     8b2:	d8e1      	bhi.n	878 <ext_irq_register+0x44>
     8b4:	4b0b      	ldr	r3, [pc, #44]	; (8e4 <ext_irq_register+0xb0>)
     8b6:	68dc      	ldr	r4, [r3, #12]
     8b8:	00cd      	lsls	r5, r1, #3
     8ba:	195b      	adds	r3, r3, r5
     8bc:	685b      	ldr	r3, [r3, #4]
     8be:	42a3      	cmp	r3, r4
     8c0:	d20b      	bcs.n	8da <ext_irq_register+0xa6>
     8c2:	1c63      	adds	r3, r4, #1
     8c4:	d009      	beq.n	8da <ext_irq_register+0xa6>
				struct ext_irq tmp = ext_irqs[j];
     8c6:	4b07      	ldr	r3, [pc, #28]	; (8e4 <ext_irq_register+0xb0>)
     8c8:	689e      	ldr	r6, [r3, #8]
				ext_irqs[j] = ext_irqs[i];
     8ca:	0029      	movs	r1, r5
     8cc:	001d      	movs	r5, r3
     8ce:	3508      	adds	r5, #8
     8d0:	1859      	adds	r1, r3, r1
     8d2:	c988      	ldmia	r1!, {r3, r7}
     8d4:	c588      	stmia	r5!, {r3, r7}
				ext_irqs[i] = tmp;
     8d6:	6016      	str	r6, [r2, #0]
     8d8:	6054      	str	r4, [r2, #4]
	return _ext_irq_enable(pin, true);
     8da:	2101      	movs	r1, #1
     8dc:	4b02      	ldr	r3, [pc, #8]	; (8e8 <ext_irq_register+0xb4>)
     8de:	4798      	blx	r3
}
     8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	2000089c 	.word	0x2000089c
     8e8:	00001009 	.word	0x00001009

000008ec <ext_irq_enable>:
{
     8ec:	b510      	push	{r4, lr}
	return _ext_irq_enable(pin, true);
     8ee:	2101      	movs	r1, #1
     8f0:	4b01      	ldr	r3, [pc, #4]	; (8f8 <ext_irq_enable+0xc>)
     8f2:	4798      	blx	r3
}
     8f4:	bd10      	pop	{r4, pc}
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	00001009 	.word	0x00001009

000008fc <ext_irq_disable>:
{
     8fc:	b510      	push	{r4, lr}
	return _ext_irq_enable(pin, false);
     8fe:	2100      	movs	r1, #0
     900:	4b01      	ldr	r3, [pc, #4]	; (908 <ext_irq_disable+0xc>)
     902:	4798      	blx	r3
}
     904:	bd10      	pop	{r4, pc}
     906:	46c0      	nop			; (mov r8, r8)
     908:	00001009 	.word	0x00001009

0000090c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     90c:	b510      	push	{r4, lr}
     90e:	b084      	sub	sp, #16
     910:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     912:	ab01      	add	r3, sp, #4
     914:	3814      	subs	r0, #20
     916:	8b82      	ldrh	r2, [r0, #28]
     918:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     91a:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
     91c:	4a05      	ldr	r2, [pc, #20]	; (934 <i2c_m_sync_write+0x28>)
     91e:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     920:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     922:	0019      	movs	r1, r3
     924:	4b04      	ldr	r3, [pc, #16]	; (938 <i2c_m_sync_write+0x2c>)
     926:	4798      	blx	r3

	if (ret) {
     928:	2800      	cmp	r0, #0
     92a:	d100      	bne.n	92e <i2c_m_sync_write+0x22>
		return ret;
	}

	return n;
     92c:	0020      	movs	r0, r4
}
     92e:	b004      	add	sp, #16
     930:	bd10      	pop	{r4, pc}
     932:	46c0      	nop			; (mov r8, r8)
     934:	ffff8000 	.word	0xffff8000
     938:	0000141d 	.word	0x0000141d

0000093c <i2c_m_sync_read>:
{
     93c:	b510      	push	{r4, lr}
     93e:	b084      	sub	sp, #16
     940:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
     942:	ab01      	add	r3, sp, #4
     944:	3814      	subs	r0, #20
     946:	8b82      	ldrh	r2, [r0, #28]
     948:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     94a:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     94c:	4a05      	ldr	r2, [pc, #20]	; (964 <i2c_m_sync_read+0x28>)
     94e:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     950:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     952:	0019      	movs	r1, r3
     954:	4b04      	ldr	r3, [pc, #16]	; (968 <i2c_m_sync_read+0x2c>)
     956:	4798      	blx	r3
	if (ret) {
     958:	2800      	cmp	r0, #0
     95a:	d100      	bne.n	95e <i2c_m_sync_read+0x22>
	return n;
     95c:	0020      	movs	r0, r4
}
     95e:	b004      	add	sp, #16
     960:	bd10      	pop	{r4, pc}
     962:	46c0      	nop			; (mov r8, r8)
     964:	ffff8001 	.word	0xffff8001
     968:	0000141d 	.word	0x0000141d

0000096c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     96c:	b570      	push	{r4, r5, r6, lr}
     96e:	0004      	movs	r4, r0
     970:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     972:	1e43      	subs	r3, r0, #1
     974:	4198      	sbcs	r0, r3
     976:	b2c0      	uxtb	r0, r0
     978:	225e      	movs	r2, #94	; 0x5e
     97a:	4907      	ldr	r1, [pc, #28]	; (998 <i2c_m_sync_init+0x2c>)
     97c:	4b07      	ldr	r3, [pc, #28]	; (99c <i2c_m_sync_init+0x30>)
     97e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     980:	0029      	movs	r1, r5
     982:	0020      	movs	r0, r4
     984:	4b06      	ldr	r3, [pc, #24]	; (9a0 <i2c_m_sync_init+0x34>)
     986:	4798      	blx	r3
	if (init_status) {
     988:	2800      	cmp	r0, #0
     98a:	d103      	bne.n	994 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     98c:	4b05      	ldr	r3, [pc, #20]	; (9a4 <i2c_m_sync_init+0x38>)
     98e:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     990:	4b05      	ldr	r3, [pc, #20]	; (9a8 <i2c_m_sync_init+0x3c>)
     992:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     994:	bd70      	pop	{r4, r5, r6, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	000055e4 	.word	0x000055e4
     99c:	00000ddd 	.word	0x00000ddd
     9a0:	00001379 	.word	0x00001379
     9a4:	0000093d 	.word	0x0000093d
     9a8:	0000090d 	.word	0x0000090d

000009ac <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     9ac:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     9ae:	4b01      	ldr	r3, [pc, #4]	; (9b4 <i2c_m_sync_enable+0x8>)
     9b0:	4798      	blx	r3
}
     9b2:	bd10      	pop	{r4, pc}
     9b4:	000013a9 	.word	0x000013a9

000009b8 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     9b8:	0589      	lsls	r1, r1, #22
     9ba:	0d89      	lsrs	r1, r1, #22
     9bc:	2380      	movs	r3, #128	; 0x80
     9be:	00db      	lsls	r3, r3, #3
     9c0:	401a      	ands	r2, r3
     9c2:	430a      	orrs	r2, r1
     9c4:	8382      	strh	r2, [r0, #28]
}
     9c6:	0010      	movs	r0, r2
     9c8:	4770      	bx	lr
	...

000009cc <i2c_m_sync_cmd_write>:

/**
 * \brief Sync version of i2c write command
 */
int32_t i2c_m_sync_cmd_write(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
     9cc:	b570      	push	{r4, r5, r6, lr}
     9ce:	b086      	sub	sp, #24
     9d0:	0004      	movs	r4, r0
     9d2:	0016      	movs	r6, r2
     9d4:	001d      	movs	r5, r3
     9d6:	466b      	mov	r3, sp
     9d8:	71d9      	strb	r1, [r3, #7]
     9da:	3307      	adds	r3, #7
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
     9dc:	a903      	add	r1, sp, #12
     9de:	8b82      	ldrh	r2, [r0, #28]
     9e0:	800a      	strh	r2, [r1, #0]
	msg.len    = 1;
     9e2:	2201      	movs	r2, #1
     9e4:	604a      	str	r2, [r1, #4]
	msg.flags  = 0;
     9e6:	2200      	movs	r2, #0
     9e8:	804a      	strh	r2, [r1, #2]
	msg.buffer = &reg;
     9ea:	608b      	str	r3, [r1, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     9ec:	4b07      	ldr	r3, [pc, #28]	; (a0c <i2c_m_sync_cmd_write+0x40>)
     9ee:	4798      	blx	r3

	if (ret != 0) {
     9f0:	2800      	cmp	r0, #0
     9f2:	d001      	beq.n	9f8 <i2c_m_sync_cmd_write+0x2c>
		/* error occurred */
		return ret;
	}

	return ERR_NONE;
}
     9f4:	b006      	add	sp, #24
     9f6:	bd70      	pop	{r4, r5, r6, pc}
	msg.flags  = I2C_M_STOP;
     9f8:	a903      	add	r1, sp, #12
     9fa:	4b05      	ldr	r3, [pc, #20]	; (a10 <i2c_m_sync_cmd_write+0x44>)
     9fc:	804b      	strh	r3, [r1, #2]
	msg.buffer = buffer;
     9fe:	608e      	str	r6, [r1, #8]
	msg.len    = length;
     a00:	604d      	str	r5, [r1, #4]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a02:	0020      	movs	r0, r4
     a04:	4b01      	ldr	r3, [pc, #4]	; (a0c <i2c_m_sync_cmd_write+0x40>)
     a06:	4798      	blx	r3
     a08:	e7f4      	b.n	9f4 <i2c_m_sync_cmd_write+0x28>
     a0a:	46c0      	nop			; (mov r8, r8)
     a0c:	0000141d 	.word	0x0000141d
     a10:	ffff8000 	.word	0xffff8000

00000a14 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     a14:	3014      	adds	r0, #20
     a16:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     a18:	2000      	movs	r0, #0
     a1a:	4770      	bx	lr

00000a1c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a1e:	46ce      	mov	lr, r9
     a20:	4647      	mov	r7, r8
     a22:	b580      	push	{r7, lr}
     a24:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     a26:	6803      	ldr	r3, [r0, #0]
     a28:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     a2a:	2b00      	cmp	r3, #0
     a2c:	d005      	beq.n	a3a <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     a2e:	688e      	ldr	r6, [r1, #8]
     a30:	001c      	movs	r4, r3
     a32:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     a34:	2701      	movs	r7, #1
     a36:	1abf      	subs	r7, r7, r2
     a38:	e00d      	b.n	a56 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     a3a:	4b12      	ldr	r3, [pc, #72]	; (a84 <timer_add_timer_task+0x68>)
     a3c:	4798      	blx	r3
		return;
     a3e:	e018      	b.n	a72 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     a40:	18fb      	adds	r3, r7, r3
     a42:	68a0      	ldr	r0, [r4, #8]
     a44:	4680      	mov	r8, r0
     a46:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     a48:	42b3      	cmp	r3, r6
     a4a:	d20c      	bcs.n	a66 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     a4c:	6823      	ldr	r3, [r4, #0]
     a4e:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     a50:	2b00      	cmp	r3, #0
     a52:	d00b      	beq.n	a6c <timer_add_timer_task+0x50>
     a54:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     a56:	6863      	ldr	r3, [r4, #4]
     a58:	4293      	cmp	r3, r2
     a5a:	d8f1      	bhi.n	a40 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     a5c:	68a0      	ldr	r0, [r4, #8]
     a5e:	4680      	mov	r8, r0
     a60:	4443      	add	r3, r8
     a62:	1a9b      	subs	r3, r3, r2
     a64:	e7f0      	b.n	a48 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     a66:	45a4      	cmp	ip, r4
     a68:	d007      	beq.n	a7a <timer_add_timer_task+0x5e>
     a6a:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     a6c:	0020      	movs	r0, r4
     a6e:	4b06      	ldr	r3, [pc, #24]	; (a88 <timer_add_timer_task+0x6c>)
     a70:	4798      	blx	r3
	}
}
     a72:	bc0c      	pop	{r2, r3}
     a74:	4690      	mov	r8, r2
     a76:	4699      	mov	r9, r3
     a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     a7a:	4648      	mov	r0, r9
     a7c:	4b01      	ldr	r3, [pc, #4]	; (a84 <timer_add_timer_task+0x68>)
     a7e:	4798      	blx	r3
     a80:	e7f7      	b.n	a72 <timer_add_timer_task+0x56>
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	00000e09 	.word	0x00000e09
     a88:	00000e35 	.word	0x00000e35

00000a8c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a8e:	46c6      	mov	lr, r8
     a90:	b500      	push	{lr}
     a92:	b082      	sub	sp, #8
     a94:	0007      	movs	r7, r0
	return (void *)list->head;
     a96:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     a98:	6903      	ldr	r3, [r0, #16]
     a9a:	3301      	adds	r3, #1
     a9c:	4698      	mov	r8, r3
     a9e:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     aa0:	7e03      	ldrb	r3, [r0, #24]
     aa2:	07db      	lsls	r3, r3, #31
     aa4:	d411      	bmi.n	aca <timer_process_counted+0x3e>
     aa6:	7e03      	ldrb	r3, [r0, #24]
     aa8:	079b      	lsls	r3, r3, #30
     aaa:	d40e      	bmi.n	aca <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     aac:	2c00      	cmp	r4, #0
     aae:	d010      	beq.n	ad2 <timer_process_counted+0x46>
     ab0:	4643      	mov	r3, r8
     ab2:	6862      	ldr	r2, [r4, #4]
     ab4:	1a9b      	subs	r3, r3, r2
     ab6:	68a2      	ldr	r2, [r4, #8]
     ab8:	4293      	cmp	r3, r2
     aba:	d30a      	bcc.n	ad2 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     abc:	2314      	movs	r3, #20
     abe:	469c      	mov	ip, r3
     ac0:	4484      	add	ip, r0
     ac2:	4663      	mov	r3, ip
     ac4:	9301      	str	r3, [sp, #4]
     ac6:	4e12      	ldr	r6, [pc, #72]	; (b10 <timer_process_counted+0x84>)
     ac8:	e014      	b.n	af4 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     aca:	7e3b      	ldrb	r3, [r7, #24]
     acc:	2202      	movs	r2, #2
     ace:	4313      	orrs	r3, r2
     ad0:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     ad2:	b002      	add	sp, #8
     ad4:	bc04      	pop	{r2}
     ad6:	4690      	mov	r8, r2
     ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ada:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     adc:	68e3      	ldr	r3, [r4, #12]
     ade:	0020      	movs	r0, r4
     ae0:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     ae2:	2d00      	cmp	r5, #0
     ae4:	d0f5      	beq.n	ad2 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     ae6:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     ae8:	4643      	mov	r3, r8
     aea:	686a      	ldr	r2, [r5, #4]
     aec:	1a9b      	subs	r3, r3, r2
     aee:	68aa      	ldr	r2, [r5, #8]
     af0:	4293      	cmp	r3, r2
     af2:	d3ee      	bcc.n	ad2 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     af4:	9801      	ldr	r0, [sp, #4]
     af6:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     af8:	7c23      	ldrb	r3, [r4, #16]
     afa:	2b01      	cmp	r3, #1
     afc:	d1ed      	bne.n	ada <timer_process_counted+0x4e>
			tmp->time_label = time;
     afe:	4643      	mov	r3, r8
     b00:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     b02:	4642      	mov	r2, r8
     b04:	0021      	movs	r1, r4
     b06:	9801      	ldr	r0, [sp, #4]
     b08:	4b02      	ldr	r3, [pc, #8]	; (b14 <timer_process_counted+0x88>)
     b0a:	4798      	blx	r3
     b0c:	e7e5      	b.n	ada <timer_process_counted+0x4e>
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	00000e3d 	.word	0x00000e3d
     b14:	00000a1d 	.word	0x00000a1d

00000b18 <timer_init>:
{
     b18:	b570      	push	{r4, r5, r6, lr}
     b1a:	0005      	movs	r5, r0
     b1c:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     b1e:	2800      	cmp	r0, #0
     b20:	d011      	beq.n	b46 <timer_init+0x2e>
     b22:	0008      	movs	r0, r1
     b24:	1e43      	subs	r3, r0, #1
     b26:	4198      	sbcs	r0, r3
     b28:	b2c0      	uxtb	r0, r0
     b2a:	223b      	movs	r2, #59	; 0x3b
     b2c:	4907      	ldr	r1, [pc, #28]	; (b4c <timer_init+0x34>)
     b2e:	4b08      	ldr	r3, [pc, #32]	; (b50 <timer_init+0x38>)
     b30:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     b32:	0021      	movs	r1, r4
     b34:	0028      	movs	r0, r5
     b36:	4b07      	ldr	r3, [pc, #28]	; (b54 <timer_init+0x3c>)
     b38:	4798      	blx	r3
	descr->time                           = 0;
     b3a:	2300      	movs	r3, #0
     b3c:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     b3e:	4b06      	ldr	r3, [pc, #24]	; (b58 <timer_init+0x40>)
     b40:	602b      	str	r3, [r5, #0]
}
     b42:	2000      	movs	r0, #0
     b44:	bd70      	pop	{r4, r5, r6, pc}
     b46:	2000      	movs	r0, #0
     b48:	e7ef      	b.n	b2a <timer_init+0x12>
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	00005600 	.word	0x00005600
     b50:	00000ddd 	.word	0x00000ddd
     b54:	0000199d 	.word	0x0000199d
     b58:	00000a8d 	.word	0x00000a8d

00000b5c <timer_start>:
{
     b5c:	b510      	push	{r4, lr}
     b5e:	0004      	movs	r4, r0
	ASSERT(descr);
     b60:	1e43      	subs	r3, r0, #1
     b62:	4198      	sbcs	r0, r3
     b64:	b2c0      	uxtb	r0, r0
     b66:	2253      	movs	r2, #83	; 0x53
     b68:	4907      	ldr	r1, [pc, #28]	; (b88 <timer_start+0x2c>)
     b6a:	4b08      	ldr	r3, [pc, #32]	; (b8c <timer_start+0x30>)
     b6c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     b6e:	0020      	movs	r0, r4
     b70:	4b07      	ldr	r3, [pc, #28]	; (b90 <timer_start+0x34>)
     b72:	4798      	blx	r3
     b74:	2800      	cmp	r0, #0
     b76:	d104      	bne.n	b82 <timer_start+0x26>
	_timer_start(&descr->device);
     b78:	0020      	movs	r0, r4
     b7a:	4b06      	ldr	r3, [pc, #24]	; (b94 <timer_start+0x38>)
     b7c:	4798      	blx	r3
	return ERR_NONE;
     b7e:	2000      	movs	r0, #0
}
     b80:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     b82:	2011      	movs	r0, #17
     b84:	4240      	negs	r0, r0
     b86:	e7fb      	b.n	b80 <timer_start+0x24>
     b88:	00005600 	.word	0x00005600
     b8c:	00000ddd 	.word	0x00000ddd
     b90:	00001b63 	.word	0x00001b63
     b94:	00001b0d 	.word	0x00001b0d

00000b98 <timer_stop>:
{
     b98:	b510      	push	{r4, lr}
     b9a:	0004      	movs	r4, r0
	ASSERT(descr);
     b9c:	1e43      	subs	r3, r0, #1
     b9e:	4198      	sbcs	r0, r3
     ba0:	b2c0      	uxtb	r0, r0
     ba2:	2261      	movs	r2, #97	; 0x61
     ba4:	4907      	ldr	r1, [pc, #28]	; (bc4 <timer_stop+0x2c>)
     ba6:	4b08      	ldr	r3, [pc, #32]	; (bc8 <timer_stop+0x30>)
     ba8:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
     baa:	0020      	movs	r0, r4
     bac:	4b07      	ldr	r3, [pc, #28]	; (bcc <timer_stop+0x34>)
     bae:	4798      	blx	r3
     bb0:	2800      	cmp	r0, #0
     bb2:	d004      	beq.n	bbe <timer_stop+0x26>
	_timer_stop(&descr->device);
     bb4:	0020      	movs	r0, r4
     bb6:	4b06      	ldr	r3, [pc, #24]	; (bd0 <timer_stop+0x38>)
     bb8:	4798      	blx	r3
	return ERR_NONE;
     bba:	2000      	movs	r0, #0
}
     bbc:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     bbe:	2011      	movs	r0, #17
     bc0:	4240      	negs	r0, r0
     bc2:	e7fb      	b.n	bbc <timer_stop+0x24>
     bc4:	00005600 	.word	0x00005600
     bc8:	00000ddd 	.word	0x00000ddd
     bcc:	00001b63 	.word	0x00001b63
     bd0:	00001b21 	.word	0x00001b21

00000bd4 <timer_set_clock_cycles_per_tick>:
{
     bd4:	b570      	push	{r4, r5, r6, lr}
     bd6:	0004      	movs	r4, r0
     bd8:	000d      	movs	r5, r1
	ASSERT(descr);
     bda:	1e43      	subs	r3, r0, #1
     bdc:	4198      	sbcs	r0, r3
     bde:	b2c0      	uxtb	r0, r0
     be0:	226f      	movs	r2, #111	; 0x6f
     be2:	4904      	ldr	r1, [pc, #16]	; (bf4 <timer_set_clock_cycles_per_tick+0x20>)
     be4:	4b04      	ldr	r3, [pc, #16]	; (bf8 <timer_set_clock_cycles_per_tick+0x24>)
     be6:	4798      	blx	r3
	_timer_set_period(&descr->device, clock_cycles);
     be8:	0029      	movs	r1, r5
     bea:	0020      	movs	r0, r4
     bec:	4b03      	ldr	r3, [pc, #12]	; (bfc <timer_set_clock_cycles_per_tick+0x28>)
     bee:	4798      	blx	r3
}
     bf0:	2000      	movs	r0, #0
     bf2:	bd70      	pop	{r4, r5, r6, pc}
     bf4:	00005600 	.word	0x00005600
     bf8:	00000ddd 	.word	0x00000ddd
     bfc:	00001b35 	.word	0x00001b35

00000c00 <timer_add_task>:
{
     c00:	b570      	push	{r4, r5, r6, lr}
     c02:	b082      	sub	sp, #8
     c04:	0004      	movs	r4, r0
     c06:	000d      	movs	r5, r1
	ASSERT(descr && task);
     c08:	2800      	cmp	r0, #0
     c0a:	d024      	beq.n	c56 <timer_add_task+0x56>
     c0c:	0008      	movs	r0, r1
     c0e:	1e43      	subs	r3, r0, #1
     c10:	4198      	sbcs	r0, r3
     c12:	b2c0      	uxtb	r0, r0
     c14:	227a      	movs	r2, #122	; 0x7a
     c16:	491e      	ldr	r1, [pc, #120]	; (c90 <timer_add_task+0x90>)
     c18:	4b1e      	ldr	r3, [pc, #120]	; (c94 <timer_add_task+0x94>)
     c1a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     c1c:	7e23      	ldrb	r3, [r4, #24]
     c1e:	2201      	movs	r2, #1
     c20:	4313      	orrs	r3, r2
     c22:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     c24:	0026      	movs	r6, r4
     c26:	3614      	adds	r6, #20
     c28:	0029      	movs	r1, r5
     c2a:	0030      	movs	r0, r6
     c2c:	4b1a      	ldr	r3, [pc, #104]	; (c98 <timer_add_task+0x98>)
     c2e:	4798      	blx	r3
     c30:	2800      	cmp	r0, #0
     c32:	d112      	bne.n	c5a <timer_add_task+0x5a>
	task->time_label = descr->time;
     c34:	6923      	ldr	r3, [r4, #16]
     c36:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     c38:	6922      	ldr	r2, [r4, #16]
     c3a:	0029      	movs	r1, r5
     c3c:	0030      	movs	r0, r6
     c3e:	4b17      	ldr	r3, [pc, #92]	; (c9c <timer_add_task+0x9c>)
     c40:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     c42:	7e23      	ldrb	r3, [r4, #24]
     c44:	2201      	movs	r2, #1
     c46:	4393      	bics	r3, r2
     c48:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     c4a:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
     c4c:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     c4e:	079b      	lsls	r3, r3, #30
     c50:	d40f      	bmi.n	c72 <timer_add_task+0x72>
}
     c52:	b002      	add	sp, #8
     c54:	bd70      	pop	{r4, r5, r6, pc}
     c56:	2000      	movs	r0, #0
     c58:	e7dc      	b.n	c14 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     c5a:	7e23      	ldrb	r3, [r4, #24]
     c5c:	2201      	movs	r2, #1
     c5e:	4393      	bics	r3, r2
     c60:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     c62:	327e      	adds	r2, #126	; 0x7e
     c64:	490a      	ldr	r1, [pc, #40]	; (c90 <timer_add_task+0x90>)
     c66:	2000      	movs	r0, #0
     c68:	4b0a      	ldr	r3, [pc, #40]	; (c94 <timer_add_task+0x94>)
     c6a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     c6c:	2012      	movs	r0, #18
     c6e:	4240      	negs	r0, r0
     c70:	e7ef      	b.n	c52 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     c72:	a801      	add	r0, sp, #4
     c74:	4b0a      	ldr	r3, [pc, #40]	; (ca0 <timer_add_task+0xa0>)
     c76:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     c78:	7e23      	ldrb	r3, [r4, #24]
     c7a:	2202      	movs	r2, #2
     c7c:	4393      	bics	r3, r2
     c7e:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     c80:	0020      	movs	r0, r4
     c82:	4b08      	ldr	r3, [pc, #32]	; (ca4 <timer_add_task+0xa4>)
     c84:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     c86:	a801      	add	r0, sp, #4
     c88:	4b07      	ldr	r3, [pc, #28]	; (ca8 <timer_add_task+0xa8>)
     c8a:	4798      	blx	r3
	return ERR_NONE;
     c8c:	2000      	movs	r0, #0
     c8e:	e7e0      	b.n	c52 <timer_add_task+0x52>
     c90:	00005600 	.word	0x00005600
     c94:	00000ddd 	.word	0x00000ddd
     c98:	00000de5 	.word	0x00000de5
     c9c:	00000a1d 	.word	0x00000a1d
     ca0:	00000769 	.word	0x00000769
     ca4:	00001b79 	.word	0x00001b79
     ca8:	00000777 	.word	0x00000777

00000cac <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cae:	46ce      	mov	lr, r9
     cb0:	4647      	mov	r7, r8
     cb2:	b580      	push	{r7, lr}
     cb4:	0004      	movs	r4, r0
     cb6:	000f      	movs	r7, r1
     cb8:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     cba:	2800      	cmp	r0, #0
     cbc:	d026      	beq.n	d0c <usart_sync_write+0x60>
     cbe:	2900      	cmp	r1, #0
     cc0:	d026      	beq.n	d10 <usart_sync_write+0x64>
     cc2:	0010      	movs	r0, r2
     cc4:	1e43      	subs	r3, r0, #1
     cc6:	4198      	sbcs	r0, r3
     cc8:	22f1      	movs	r2, #241	; 0xf1
     cca:	4912      	ldr	r1, [pc, #72]	; (d14 <usart_sync_write+0x68>)
     ccc:	4b12      	ldr	r3, [pc, #72]	; (d18 <usart_sync_write+0x6c>)
     cce:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     cd0:	3408      	adds	r4, #8
     cd2:	4d12      	ldr	r5, [pc, #72]	; (d1c <usart_sync_write+0x70>)
     cd4:	0020      	movs	r0, r4
     cd6:	47a8      	blx	r5
     cd8:	2800      	cmp	r0, #0
     cda:	d0fb      	beq.n	cd4 <usart_sync_write+0x28>
     cdc:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     cde:	4b10      	ldr	r3, [pc, #64]	; (d20 <usart_sync_write+0x74>)
     ce0:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     ce2:	4d0e      	ldr	r5, [pc, #56]	; (d1c <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     ce4:	5db9      	ldrb	r1, [r7, r6]
     ce6:	0020      	movs	r0, r4
     ce8:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     cea:	0020      	movs	r0, r4
     cec:	47a8      	blx	r5
     cee:	2800      	cmp	r0, #0
     cf0:	d0fb      	beq.n	cea <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     cf2:	3601      	adds	r6, #1
     cf4:	4546      	cmp	r6, r8
     cf6:	d3f5      	bcc.n	ce4 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     cf8:	4d0a      	ldr	r5, [pc, #40]	; (d24 <usart_sync_write+0x78>)
     cfa:	0020      	movs	r0, r4
     cfc:	47a8      	blx	r5
     cfe:	2800      	cmp	r0, #0
     d00:	d0fb      	beq.n	cfa <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     d02:	0030      	movs	r0, r6
     d04:	bc0c      	pop	{r2, r3}
     d06:	4690      	mov	r8, r2
     d08:	4699      	mov	r9, r3
     d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     d0c:	2000      	movs	r0, #0
     d0e:	e7db      	b.n	cc8 <usart_sync_write+0x1c>
     d10:	2000      	movs	r0, #0
     d12:	e7d9      	b.n	cc8 <usart_sync_write+0x1c>
     d14:	00005618 	.word	0x00005618
     d18:	00000ddd 	.word	0x00000ddd
     d1c:	00001359 	.word	0x00001359
     d20:	00001349 	.word	0x00001349
     d24:	00001363 	.word	0x00001363

00000d28 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d2a:	46ce      	mov	lr, r9
     d2c:	4647      	mov	r7, r8
     d2e:	b580      	push	{r7, lr}
     d30:	0004      	movs	r4, r0
     d32:	000f      	movs	r7, r1
     d34:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     d36:	2800      	cmp	r0, #0
     d38:	d01d      	beq.n	d76 <usart_sync_read+0x4e>
     d3a:	2900      	cmp	r1, #0
     d3c:	d01d      	beq.n	d7a <usart_sync_read+0x52>
     d3e:	0010      	movs	r0, r2
     d40:	1e43      	subs	r3, r0, #1
     d42:	4198      	sbcs	r0, r3
     d44:	2286      	movs	r2, #134	; 0x86
     d46:	0052      	lsls	r2, r2, #1
     d48:	490d      	ldr	r1, [pc, #52]	; (d80 <usart_sync_read+0x58>)
     d4a:	4b0e      	ldr	r3, [pc, #56]	; (d84 <usart_sync_read+0x5c>)
     d4c:	4798      	blx	r3
	uint32_t                      offset = 0;
     d4e:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     d50:	3408      	adds	r4, #8
     d52:	4d0d      	ldr	r5, [pc, #52]	; (d88 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     d54:	4b0d      	ldr	r3, [pc, #52]	; (d8c <usart_sync_read+0x64>)
     d56:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     d58:	0020      	movs	r0, r4
     d5a:	47a8      	blx	r5
     d5c:	2800      	cmp	r0, #0
     d5e:	d0fb      	beq.n	d58 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     d60:	0020      	movs	r0, r4
     d62:	47c8      	blx	r9
     d64:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     d66:	3601      	adds	r6, #1
     d68:	4546      	cmp	r6, r8
     d6a:	d3f5      	bcc.n	d58 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     d6c:	0030      	movs	r0, r6
     d6e:	bc0c      	pop	{r2, r3}
     d70:	4690      	mov	r8, r2
     d72:	4699      	mov	r9, r3
     d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     d76:	2000      	movs	r0, #0
     d78:	e7e4      	b.n	d44 <usart_sync_read+0x1c>
     d7a:	2000      	movs	r0, #0
     d7c:	e7e2      	b.n	d44 <usart_sync_read+0x1c>
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	00005618 	.word	0x00005618
     d84:	00000ddd 	.word	0x00000ddd
     d88:	0000136d 	.word	0x0000136d
     d8c:	00001351 	.word	0x00001351

00000d90 <usart_sync_init>:
{
     d90:	b570      	push	{r4, r5, r6, lr}
     d92:	0005      	movs	r5, r0
     d94:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     d96:	2800      	cmp	r0, #0
     d98:	d013      	beq.n	dc2 <usart_sync_init+0x32>
     d9a:	0008      	movs	r0, r1
     d9c:	1e43      	subs	r3, r0, #1
     d9e:	4198      	sbcs	r0, r3
     da0:	b2c0      	uxtb	r0, r0
     da2:	2234      	movs	r2, #52	; 0x34
     da4:	4908      	ldr	r1, [pc, #32]	; (dc8 <usart_sync_init+0x38>)
     da6:	4b09      	ldr	r3, [pc, #36]	; (dcc <usart_sync_init+0x3c>)
     da8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     daa:	0028      	movs	r0, r5
     dac:	3008      	adds	r0, #8
     dae:	0021      	movs	r1, r4
     db0:	4b07      	ldr	r3, [pc, #28]	; (dd0 <usart_sync_init+0x40>)
     db2:	4798      	blx	r3
	if (init_status) {
     db4:	2800      	cmp	r0, #0
     db6:	d103      	bne.n	dc0 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     db8:	4b06      	ldr	r3, [pc, #24]	; (dd4 <usart_sync_init+0x44>)
     dba:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     dbc:	4b06      	ldr	r3, [pc, #24]	; (dd8 <usart_sync_init+0x48>)
     dbe:	602b      	str	r3, [r5, #0]
}
     dc0:	bd70      	pop	{r4, r5, r6, pc}
     dc2:	2000      	movs	r0, #0
     dc4:	e7ed      	b.n	da2 <usart_sync_init+0x12>
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	00005618 	.word	0x00005618
     dcc:	00000ddd 	.word	0x00000ddd
     dd0:	0000131d 	.word	0x0000131d
     dd4:	00000d29 	.word	0x00000d29
     dd8:	00000cad 	.word	0x00000cad

00000ddc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ddc:	2800      	cmp	r0, #0
     dde:	d100      	bne.n	de2 <assert+0x6>
		__asm("BKPT #0");
     de0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     de2:	4770      	bx	lr

00000de4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     de4:	6803      	ldr	r3, [r0, #0]
     de6:	2b00      	cmp	r3, #0
     de8:	d00a      	beq.n	e00 <is_list_element+0x1c>
		if (it == element) {
     dea:	428b      	cmp	r3, r1
     dec:	d00a      	beq.n	e04 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     dee:	681b      	ldr	r3, [r3, #0]
     df0:	2b00      	cmp	r3, #0
     df2:	d003      	beq.n	dfc <is_list_element+0x18>
		if (it == element) {
     df4:	4299      	cmp	r1, r3
     df6:	d1fa      	bne.n	dee <is_list_element+0xa>
			return true;
     df8:	2001      	movs	r0, #1
     dfa:	e000      	b.n	dfe <is_list_element+0x1a>
		}
	}

	return false;
     dfc:	2000      	movs	r0, #0
}
     dfe:	4770      	bx	lr
	return false;
     e00:	2000      	movs	r0, #0
     e02:	e7fc      	b.n	dfe <is_list_element+0x1a>
			return true;
     e04:	2001      	movs	r0, #1
     e06:	e7fa      	b.n	dfe <is_list_element+0x1a>

00000e08 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     e08:	b570      	push	{r4, r5, r6, lr}
     e0a:	0004      	movs	r4, r0
     e0c:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     e0e:	4b06      	ldr	r3, [pc, #24]	; (e28 <list_insert_as_head+0x20>)
     e10:	4798      	blx	r3
     e12:	2301      	movs	r3, #1
     e14:	4058      	eors	r0, r3
     e16:	b2c0      	uxtb	r0, r0
     e18:	2239      	movs	r2, #57	; 0x39
     e1a:	4904      	ldr	r1, [pc, #16]	; (e2c <list_insert_as_head+0x24>)
     e1c:	4b04      	ldr	r3, [pc, #16]	; (e30 <list_insert_as_head+0x28>)
     e1e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     e20:	6823      	ldr	r3, [r4, #0]
     e22:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     e24:	6025      	str	r5, [r4, #0]
}
     e26:	bd70      	pop	{r4, r5, r6, pc}
     e28:	00000de5 	.word	0x00000de5
     e2c:	00005634 	.word	0x00005634
     e30:	00000ddd 	.word	0x00000ddd

00000e34 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     e34:	6803      	ldr	r3, [r0, #0]
     e36:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     e38:	6001      	str	r1, [r0, #0]
}
     e3a:	4770      	bx	lr

00000e3c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     e3c:	6803      	ldr	r3, [r0, #0]
     e3e:	2b00      	cmp	r3, #0
     e40:	d001      	beq.n	e46 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     e42:	681a      	ldr	r2, [r3, #0]
     e44:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     e46:	0018      	movs	r0, r3
     e48:	4770      	bx	lr
	...

00000e4c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     e4c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     e4e:	4a06      	ldr	r2, [pc, #24]	; (e68 <_sbrk+0x1c>)
     e50:	6812      	ldr	r2, [r2, #0]
     e52:	2a00      	cmp	r2, #0
     e54:	d004      	beq.n	e60 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     e56:	4a04      	ldr	r2, [pc, #16]	; (e68 <_sbrk+0x1c>)
     e58:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     e5a:	18c3      	adds	r3, r0, r3
     e5c:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     e5e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     e60:	4902      	ldr	r1, [pc, #8]	; (e6c <_sbrk+0x20>)
     e62:	4a01      	ldr	r2, [pc, #4]	; (e68 <_sbrk+0x1c>)
     e64:	6011      	str	r1, [r2, #0]
     e66:	e7f6      	b.n	e56 <_sbrk+0xa>
     e68:	200008ac 	.word	0x200008ac
     e6c:	20002ce0 	.word	0x20002ce0

00000e70 <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
     e70:	f3bf 8f4f 	dsb	sy
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
	__DSB();
	__WFI();
     e74:	bf30      	wfi
}
     e76:	4770      	bx	lr

00000e78 <_irq_set>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     e78:	b243      	sxtb	r3, r0
     e7a:	2b00      	cmp	r3, #0
     e7c:	db07      	blt.n	e8e <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     e7e:	231f      	movs	r3, #31
     e80:	4018      	ands	r0, r3
     e82:	3b1e      	subs	r3, #30
     e84:	4083      	lsls	r3, r0
     e86:	2280      	movs	r2, #128	; 0x80
     e88:	0052      	lsls	r2, r2, #1
     e8a:	4901      	ldr	r1, [pc, #4]	; (e90 <_irq_set+0x18>)
     e8c:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
     e8e:	4770      	bx	lr
     e90:	e000e100 	.word	0xe000e100

00000e94 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
     e94:	23fa      	movs	r3, #250	; 0xfa
     e96:	011b      	lsls	r3, r3, #4
     e98:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     e9a:	4770      	bx	lr

00000e9c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     e9c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     e9e:	4b08      	ldr	r3, [pc, #32]	; (ec0 <_init_chip+0x24>)
     ea0:	685a      	ldr	r2, [r3, #4]
     ea2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     ea4:	4b07      	ldr	r3, [pc, #28]	; (ec4 <_init_chip+0x28>)
     ea6:	4798      	blx	r3
	_oscctrl_init_sources();
     ea8:	4b07      	ldr	r3, [pc, #28]	; (ec8 <_init_chip+0x2c>)
     eaa:	4798      	blx	r3
	_mclk_init();
     eac:	4b07      	ldr	r3, [pc, #28]	; (ecc <_init_chip+0x30>)
     eae:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     eb0:	4b07      	ldr	r3, [pc, #28]	; (ed0 <_init_chip+0x34>)
     eb2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     eb4:	20ff      	movs	r0, #255	; 0xff
     eb6:	4b07      	ldr	r3, [pc, #28]	; (ed4 <_init_chip+0x38>)
     eb8:	4798      	blx	r3

	_div_init();
     eba:	4b07      	ldr	r3, [pc, #28]	; (ed8 <_init_chip+0x3c>)
     ebc:	4798      	blx	r3

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif
}
     ebe:	bd10      	pop	{r4, pc}
     ec0:	41004000 	.word	0x41004000
     ec4:	00001151 	.word	0x00001151
     ec8:	00001169 	.word	0x00001169
     ecc:	00001145 	.word	0x00001145
     ed0:	00001195 	.word	0x00001195
     ed4:	00001131 	.word	0x00001131
     ed8:	00000edd 	.word	0x00000edd

00000edc <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
     edc:	2290      	movs	r2, #144	; 0x90
     ede:	05d2      	lsls	r2, r2, #23
     ee0:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
     ee2:	2102      	movs	r1, #2
     ee4:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
     ee6:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
     ee8:	4770      	bx	lr

00000eea <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
     eea:	b510      	push	{r4, lr}
     eec:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     eee:	f3ef 8310 	mrs	r3, PRIMASK
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
     ef2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     ef4:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     ef6:	2390      	movs	r3, #144	; 0x90
     ef8:	05db      	lsls	r3, r3, #23
     efa:	781a      	ldrb	r2, [r3, #0]
     efc:	2401      	movs	r4, #1
     efe:	43a2      	bics	r2, r4
     f00:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     f02:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     f04:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     f06:	001a      	movs	r2, r3
     f08:	7913      	ldrb	r3, [r2, #4]
     f0a:	07db      	lsls	r3, r3, #31
     f0c:	d4fc      	bmi.n	f08 <__aeabi_uidiv+0x1e>
	_divas_div(0, numerator, denominator);
	res = _divas_result32();
     f0e:	2390      	movs	r3, #144	; 0x90
     f10:	05db      	lsls	r3, r3, #23
     f12:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
     f14:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     f16:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     f1a:	b002      	add	sp, #8
     f1c:	bd10      	pop	{r4, pc}
	...

00000f20 <__aeabi_uidivmod>:

/**
 * \brief Do unsigned division, return result and remainder
 */
uint64_t __aeabi_uidivmod(unsigned numerator, unsigned denominator)
{
     f20:	b510      	push	{r4, lr}
     f22:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f24:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
     f28:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     f2a:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     f2c:	2390      	movs	r3, #144	; 0x90
     f2e:	05db      	lsls	r3, r3, #23
     f30:	781a      	ldrb	r2, [r3, #0]
     f32:	2401      	movs	r4, #1
     f34:	43a2      	bics	r2, r4
     f36:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     f38:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     f3a:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     f3c:	001a      	movs	r2, r3
     f3e:	7913      	ldrb	r3, [r2, #4]
     f40:	07db      	lsls	r3, r3, #31
     f42:	d4fc      	bmi.n	f3e <__aeabi_uidivmod+0x1e>
	_divas_div(0, numerator, denominator);
	res = _divas_result64();
     f44:	4b03      	ldr	r3, [pc, #12]	; (f54 <__aeabi_uidivmod+0x34>)
     f46:	6818      	ldr	r0, [r3, #0]
     f48:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
     f4a:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     f4c:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     f50:	b002      	add	sp, #8
     f52:	bd10      	pop	{r4, pc}
     f54:	48000010 	.word	0x48000010

00000f58 <_ext_irq_init>:
	};
}

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
     f58:	4b27      	ldr	r3, [pc, #156]	; (ff8 <_ext_irq_init+0xa0>)
     f5a:	685b      	ldr	r3, [r3, #4]
/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
     f5c:	07db      	lsls	r3, r3, #31
     f5e:	d415      	bmi.n	f8c <_ext_irq_init+0x34>
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Eic *)hw)->CTRLA.reg;
     f60:	4b25      	ldr	r3, [pc, #148]	; (ff8 <_ext_irq_init+0xa0>)
     f62:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
     f64:	079b      	lsls	r3, r3, #30
     f66:	d50e      	bpl.n	f86 <_ext_irq_init+0x2e>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     f68:	4923      	ldr	r1, [pc, #140]	; (ff8 <_ext_irq_init+0xa0>)
     f6a:	2203      	movs	r2, #3
     f6c:	684b      	ldr	r3, [r1, #4]
     f6e:	421a      	tst	r2, r3
     f70:	d1fc      	bne.n	f6c <_ext_irq_init+0x14>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     f72:	4a21      	ldr	r2, [pc, #132]	; (ff8 <_ext_irq_init+0xa0>)
     f74:	7813      	ldrb	r3, [r2, #0]
     f76:	2102      	movs	r1, #2
     f78:	438b      	bics	r3, r1
     f7a:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     f7c:	0011      	movs	r1, r2
     f7e:	2202      	movs	r2, #2
     f80:	684b      	ldr	r3, [r1, #4]
     f82:	421a      	tst	r2, r3
     f84:	d1fc      	bne.n	f80 <_ext_irq_init+0x28>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
     f86:	2201      	movs	r2, #1
     f88:	4b1b      	ldr	r3, [pc, #108]	; (ff8 <_ext_irq_init+0xa0>)
     f8a:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     f8c:	491a      	ldr	r1, [pc, #104]	; (ff8 <_ext_irq_init+0xa0>)
     f8e:	2201      	movs	r2, #1
     f90:	684b      	ldr	r3, [r1, #4]
     f92:	421a      	tst	r2, r3
     f94:	d1fc      	bne.n	f90 <_ext_irq_init+0x38>
     f96:	4918      	ldr	r1, [pc, #96]	; (ff8 <_ext_irq_init+0xa0>)
     f98:	2203      	movs	r2, #3
     f9a:	684b      	ldr	r3, [r1, #4]
     f9c:	421a      	tst	r2, r3
     f9e:	d1fc      	bne.n	f9a <_ext_irq_init+0x42>
	tmp = ((Eic *)hw)->CTRLA.reg;
     fa0:	4b15      	ldr	r3, [pc, #84]	; (ff8 <_ext_irq_init+0xa0>)
     fa2:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
     fa4:	2110      	movs	r1, #16
     fa6:	438a      	bics	r2, r1
	((Eic *)hw)->CTRLA.reg = tmp;
     fa8:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     faa:	2200      	movs	r2, #0
     fac:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     fae:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
     fb0:	3907      	subs	r1, #7
     fb2:	6199      	str	r1, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
     fb4:	3901      	subs	r1, #1
     fb6:	6319      	str	r1, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
     fb8:	3180      	adds	r1, #128	; 0x80
     fba:	6359      	str	r1, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
     fbc:	490f      	ldr	r1, [pc, #60]	; (ffc <_ext_irq_init+0xa4>)
     fbe:	61d9      	str	r1, [r3, #28]
     fc0:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     fc2:	0019      	movs	r1, r3
     fc4:	3203      	adds	r2, #3
     fc6:	684b      	ldr	r3, [r1, #4]
     fc8:	421a      	tst	r2, r3
     fca:	d1fc      	bne.n	fc6 <_ext_irq_init+0x6e>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
     fcc:	4a0a      	ldr	r2, [pc, #40]	; (ff8 <_ext_irq_init+0xa0>)
     fce:	7813      	ldrb	r3, [r2, #0]
     fd0:	2102      	movs	r1, #2
     fd2:	430b      	orrs	r3, r1
     fd4:	7013      	strb	r3, [r2, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     fd6:	4b0a      	ldr	r3, [pc, #40]	; (1000 <_ext_irq_init+0xa8>)
     fd8:	2208      	movs	r2, #8
     fda:	317e      	adds	r1, #126	; 0x7e
     fdc:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     fde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     fe2:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     fe6:	3101      	adds	r1, #1
     fe8:	31ff      	adds	r1, #255	; 0xff
     fea:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     fec:	601a      	str	r2, [r3, #0]
	hri_eic_set_CTRLA_ENABLE_bit(EIC);
	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     fee:	4b05      	ldr	r3, [pc, #20]	; (1004 <_ext_irq_init+0xac>)
     ff0:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     ff2:	2000      	movs	r0, #0
     ff4:	4770      	bx	lr
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	40002800 	.word	0x40002800
     ffc:	00003004 	.word	0x00003004
    1000:	e000e100 	.word	0xe000e100
    1004:	200008b0 	.word	0x200008b0

00001008 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
    1008:	2858      	cmp	r0, #88	; 0x58
    100a:	d005      	beq.n	1018 <_ext_irq_enable+0x10>
    100c:	2301      	movs	r3, #1
    100e:	2833      	cmp	r0, #51	; 0x33
    1010:	d003      	beq.n	101a <_ext_irq_enable+0x12>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return -1;
    1012:	2001      	movs	r0, #1
    1014:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
    1016:	4770      	bx	lr
		if (_map[i].pin == pin) {
    1018:	2300      	movs	r3, #0
			extint = _map[i].extint;
    101a:	00db      	lsls	r3, r3, #3
    101c:	4a0a      	ldr	r2, [pc, #40]	; (1048 <_ext_irq_enable+0x40>)
    101e:	5c9a      	ldrb	r2, [r3, r2]
	if (INVALID_EXTINT_NUMBER == extint) {
    1020:	2aff      	cmp	r2, #255	; 0xff
    1022:	d00e      	beq.n	1042 <_ext_irq_enable+0x3a>
	if (enable) {
    1024:	2900      	cmp	r1, #0
    1026:	d106      	bne.n	1036 <_ext_irq_enable+0x2e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1028:	2301      	movs	r3, #1
    102a:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
	((Eic *)hw)->INTENCLR.reg = mask;
    102c:	4a07      	ldr	r2, [pc, #28]	; (104c <_ext_irq_enable+0x44>)
    102e:	60d3      	str	r3, [r2, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    1030:	6153      	str	r3, [r2, #20]
	return ERR_NONE;
    1032:	2000      	movs	r0, #0
    1034:	e7ef      	b.n	1016 <_ext_irq_enable+0xe>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1036:	2301      	movs	r3, #1
    1038:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    103a:	4a04      	ldr	r2, [pc, #16]	; (104c <_ext_irq_enable+0x44>)
    103c:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    103e:	2000      	movs	r0, #0
    1040:	e7e9      	b.n	1016 <_ext_irq_enable+0xe>
		return -1;
    1042:	2001      	movs	r0, #1
    1044:	4240      	negs	r0, r0
    1046:	e7e6      	b.n	1016 <_ext_irq_enable+0xe>
    1048:	00005654 	.word	0x00005654
    104c:	40002800 	.word	0x40002800

00001050 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    1050:	b5f0      	push	{r4, r5, r6, r7, lr}
    1052:	46ce      	mov	lr, r9
    1054:	4647      	mov	r7, r8
    1056:	b580      	push	{r7, lr}
    1058:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    105a:	4b2f      	ldr	r3, [pc, #188]	; (1118 <EIC_Handler+0xc8>)
    105c:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    105e:	9201      	str	r2, [sp, #4]
	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1060:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1062:	615a      	str	r2, [r3, #20]
	ASSERT(callback);
    1064:	4b2d      	ldr	r3, [pc, #180]	; (111c <EIC_Handler+0xcc>)
    1066:	6818      	ldr	r0, [r3, #0]
    1068:	1e43      	subs	r3, r0, #1
    106a:	4198      	sbcs	r0, r3
    106c:	b2c0      	uxtb	r0, r0
    106e:	22e8      	movs	r2, #232	; 0xe8
    1070:	492b      	ldr	r1, [pc, #172]	; (1120 <EIC_Handler+0xd0>)
    1072:	4b2c      	ldr	r3, [pc, #176]	; (1124 <EIC_Handler+0xd4>)
    1074:	4798      	blx	r3
	while (flags) {
    1076:	9b01      	ldr	r3, [sp, #4]
    1078:	2b00      	cmp	r3, #0
    107a:	d048      	beq.n	110e <EIC_Handler+0xbe>
    107c:	2301      	movs	r3, #1
    107e:	425b      	negs	r3, r3
    1080:	4699      	mov	r9, r3
				if (_map[middle].extint == pos) {
    1082:	4d29      	ldr	r5, [pc, #164]	; (1128 <EIC_Handler+0xd8>)
    1084:	e039      	b.n	10fa <EIC_Handler+0xaa>
    1086:	4643      	mov	r3, r8
					pin = _map[middle].pin;
    1088:	00db      	lsls	r3, r3, #3
    108a:	4a27      	ldr	r2, [pc, #156]	; (1128 <EIC_Handler+0xd8>)
    108c:	18d3      	adds	r3, r2, r3
    108e:	685b      	ldr	r3, [r3, #4]
    1090:	4699      	mov	r9, r3
			if (INVALID_PIN_NUMBER != pin) {
    1092:	464b      	mov	r3, r9
    1094:	3301      	adds	r3, #1
    1096:	d003      	beq.n	10a0 <EIC_Handler+0x50>
				callback(pin);
    1098:	4b20      	ldr	r3, [pc, #128]	; (111c <EIC_Handler+0xcc>)
    109a:	681b      	ldr	r3, [r3, #0]
    109c:	4648      	mov	r0, r9
    109e:	4798      	blx	r3
			flags &= ~(1ul << pos);
    10a0:	9b01      	ldr	r3, [sp, #4]
    10a2:	4642      	mov	r2, r8
    10a4:	40a2      	lsls	r2, r4
    10a6:	4393      	bics	r3, r2
    10a8:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    10aa:	9801      	ldr	r0, [sp, #4]
    10ac:	4b1f      	ldr	r3, [pc, #124]	; (112c <EIC_Handler+0xdc>)
    10ae:	4798      	blx	r3
    10b0:	3801      	subs	r0, #1
    10b2:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    10b4:	1c63      	adds	r3, r4, #1
    10b6:	d018      	beq.n	10ea <EIC_Handler+0x9a>
				if (_map[middle].extint == pos) {
    10b8:	2c03      	cmp	r4, #3
    10ba:	d0e4      	beq.n	1086 <EIC_Handler+0x36>
    10bc:	2103      	movs	r1, #3
    10be:	4642      	mov	r2, r8
    10c0:	2700      	movs	r7, #0
    10c2:	2002      	movs	r0, #2
    10c4:	26ff      	movs	r6, #255	; 0xff
    10c6:	e00b      	b.n	10e0 <EIC_Handler+0x90>
					upper = middle - 1;
    10c8:	3a01      	subs	r2, #1
    10ca:	b2d0      	uxtb	r0, r2
			while (upper >= lower) {
    10cc:	4287      	cmp	r7, r0
    10ce:	d8e0      	bhi.n	1092 <EIC_Handler+0x42>
				middle = (upper + lower) >> 1;
    10d0:	19c3      	adds	r3, r0, r7
    10d2:	105b      	asrs	r3, r3, #1
    10d4:	b2da      	uxtb	r2, r3
    10d6:	4033      	ands	r3, r6
				if (_map[middle].extint == pos) {
    10d8:	00d9      	lsls	r1, r3, #3
    10da:	5d49      	ldrb	r1, [r1, r5]
    10dc:	42a1      	cmp	r1, r4
    10de:	d0d3      	beq.n	1088 <EIC_Handler+0x38>
				if (_map[middle].extint < pos) {
    10e0:	428c      	cmp	r4, r1
    10e2:	ddf1      	ble.n	10c8 <EIC_Handler+0x78>
					lower = middle + 1;
    10e4:	3201      	adds	r2, #1
    10e6:	b2d7      	uxtb	r7, r2
    10e8:	e7f0      	b.n	10cc <EIC_Handler+0x7c>
	return ((Eic *)hw)->INTFLAG.reg;
    10ea:	4b0b      	ldr	r3, [pc, #44]	; (1118 <EIC_Handler+0xc8>)
    10ec:	695a      	ldr	r2, [r3, #20]
		flags = hri_eic_read_INTFLAG_reg(EIC);
    10ee:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    10f0:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    10f2:	615a      	str	r2, [r3, #20]
	while (flags) {
    10f4:	9b01      	ldr	r3, [sp, #4]
    10f6:	2b00      	cmp	r3, #0
    10f8:	d009      	beq.n	110e <EIC_Handler+0xbe>
		pos = ffs(flags) - 1;
    10fa:	9801      	ldr	r0, [sp, #4]
    10fc:	4b0b      	ldr	r3, [pc, #44]	; (112c <EIC_Handler+0xdc>)
    10fe:	4798      	blx	r3
    1100:	3801      	subs	r0, #1
    1102:	b244      	sxtb	r4, r0
				if (_map[middle].extint == pos) {
    1104:	2301      	movs	r3, #1
    1106:	4698      	mov	r8, r3
		while (-1 != pos) {
    1108:	1c63      	adds	r3, r4, #1
    110a:	d1d5      	bne.n	10b8 <EIC_Handler+0x68>
    110c:	e7ed      	b.n	10ea <EIC_Handler+0x9a>
	_ext_irq_handler();
}
    110e:	b003      	add	sp, #12
    1110:	bc0c      	pop	{r2, r3}
    1112:	4690      	mov	r8, r2
    1114:	4699      	mov	r9, r3
    1116:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1118:	40002800 	.word	0x40002800
    111c:	200008b0 	.word	0x200008b0
    1120:	00005664 	.word	0x00005664
    1124:	00000ddd 	.word	0x00000ddd
    1128:	00005654 	.word	0x00005654
    112c:	00003041 	.word	0x00003041

00001130 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    1130:	07c3      	lsls	r3, r0, #31
    1132:	d502      	bpl.n	113a <_gclk_init_generators_by_fref+0xa>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1134:	4a01      	ldr	r2, [pc, #4]	; (113c <_gclk_init_generators_by_fref+0xc>)
    1136:	4b02      	ldr	r3, [pc, #8]	; (1140 <_gclk_init_generators_by_fref+0x10>)
    1138:	621a      	str	r2, [r3, #32]
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    113a:	4770      	bx	lr
    113c:	00010106 	.word	0x00010106
    1140:	40001c00 	.word	0x40001c00

00001144 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1144:	2201      	movs	r2, #1
    1146:	4b01      	ldr	r3, [pc, #4]	; (114c <_mclk_init+0x8>)
    1148:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    114a:	4770      	bx	lr
    114c:	40000800 	.word	0x40000800

00001150 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1150:	4b04      	ldr	r3, [pc, #16]	; (1164 <_osc32kctrl_init_sources+0x14>)
    1152:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1154:	21f8      	movs	r1, #248	; 0xf8
    1156:	0149      	lsls	r1, r1, #5
    1158:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    115a:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    115c:	2201      	movs	r2, #1
    115e:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    1160:	4770      	bx	lr
    1162:	46c0      	nop			; (mov r8, r8)
    1164:	40001400 	.word	0x40001400

00001168 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
    1168:	4b09      	ldr	r3, [pc, #36]	; (1190 <_oscctrl_init_sources+0x28>)
    116a:	2202      	movs	r2, #2
    116c:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
    116e:	3209      	adds	r2, #9
    1170:	755a      	strb	r2, [r3, #21]
	return ((Oscctrl *)hw)->STATUS.reg;
}

static inline bool hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(const void *const hw)
{
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
    1172:	0019      	movs	r1, r3
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
    1174:	3a07      	subs	r2, #7
    1176:	698b      	ldr	r3, [r1, #24]
    1178:	421a      	tst	r2, r3
    117a:	d1fc      	bne.n	1176 <_oscctrl_init_sources+0xe>
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
    117c:	2207      	movs	r2, #7
    117e:	4b04      	ldr	r3, [pc, #16]	; (1190 <_oscctrl_init_sources+0x28>)
    1180:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
    1182:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
    1184:	3209      	adds	r2, #9
    1186:	68cb      	ldr	r3, [r1, #12]
    1188:	421a      	tst	r2, r3
    118a:	d0fc      	beq.n	1186 <_oscctrl_init_sources+0x1e>
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    118c:	4770      	bx	lr
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	40001000 	.word	0x40001000

00001194 <_oscctrl_init_referenced_generators>:
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1194:	4770      	bx	lr
	...

00001198 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1198:	b530      	push	{r4, r5, lr}
    119a:	b089      	sub	sp, #36	; 0x24
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    119c:	4b0c      	ldr	r3, [pc, #48]	; (11d0 <_sercom_get_hardware_index+0x38>)
    119e:	466a      	mov	r2, sp
    11a0:	cb32      	ldmia	r3!, {r1, r4, r5}
    11a2:	c232      	stmia	r2!, {r1, r4, r5}
    11a4:	cb32      	ldmia	r3!, {r1, r4, r5}
    11a6:	c232      	stmia	r2!, {r1, r4, r5}
    11a8:	cb12      	ldmia	r3!, {r1, r4}
    11aa:	c212      	stmia	r2!, {r1, r4}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    11ac:	9b00      	ldr	r3, [sp, #0]
    11ae:	4283      	cmp	r3, r0
    11b0:	d00b      	beq.n	11ca <_sercom_get_hardware_index+0x32>
    11b2:	2301      	movs	r3, #1
    11b4:	009a      	lsls	r2, r3, #2
    11b6:	4669      	mov	r1, sp
    11b8:	5852      	ldr	r2, [r2, r1]
    11ba:	4282      	cmp	r2, r0
    11bc:	d006      	beq.n	11cc <_sercom_get_hardware_index+0x34>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11be:	3301      	adds	r3, #1
    11c0:	2b08      	cmp	r3, #8
    11c2:	d1f7      	bne.n	11b4 <_sercom_get_hardware_index+0x1c>
			return i;
		}
	}
	return 0;
    11c4:	2000      	movs	r0, #0
}
    11c6:	b009      	add	sp, #36	; 0x24
    11c8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11ca:	2300      	movs	r3, #0
			return i;
    11cc:	b2d8      	uxtb	r0, r3
    11ce:	e7fa      	b.n	11c6 <_sercom_get_hardware_index+0x2e>
    11d0:	0000567c 	.word	0x0000567c

000011d4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    11d4:	b510      	push	{r4, lr}
    11d6:	0004      	movs	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    11d8:	4b16      	ldr	r3, [pc, #88]	; (1234 <_usart_init+0x60>)
    11da:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    11dc:	2805      	cmp	r0, #5
    11de:	d004      	beq.n	11ea <_usart_init+0x16>
	ASSERT(false);
    11e0:	4a15      	ldr	r2, [pc, #84]	; (1238 <_usart_init+0x64>)
    11e2:	4916      	ldr	r1, [pc, #88]	; (123c <_usart_init+0x68>)
    11e4:	2000      	movs	r0, #0
    11e6:	4b16      	ldr	r3, [pc, #88]	; (1240 <_usart_init+0x6c>)
    11e8:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    11ea:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    11ec:	07db      	lsls	r3, r3, #31
    11ee:	d40f      	bmi.n	1210 <_usart_init+0x3c>

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    11f0:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    11f2:	079b      	lsls	r3, r3, #30
    11f4:	d50a      	bpl.n	120c <_usart_init+0x38>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11f6:	2203      	movs	r2, #3
    11f8:	69e3      	ldr	r3, [r4, #28]
    11fa:	421a      	tst	r2, r3
    11fc:	d1fc      	bne.n	11f8 <_usart_init+0x24>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    11fe:	6823      	ldr	r3, [r4, #0]
    1200:	2202      	movs	r2, #2
    1202:	4393      	bics	r3, r2
    1204:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1206:	69e3      	ldr	r3, [r4, #28]
    1208:	421a      	tst	r2, r3
    120a:	d1fc      	bne.n	1206 <_usart_init+0x32>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    120c:	2301      	movs	r3, #1
    120e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1210:	2201      	movs	r2, #1
    1212:	69e3      	ldr	r3, [r4, #28]
    1214:	421a      	tst	r2, r3
    1216:	d1fc      	bne.n	1212 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1218:	4b0a      	ldr	r3, [pc, #40]	; (1244 <_usart_init+0x70>)
    121a:	6023      	str	r3, [r4, #0]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    121c:	23c0      	movs	r3, #192	; 0xc0
    121e:	029b      	lsls	r3, r3, #10
    1220:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->USART.BAUD.reg = data;
    1222:	23cf      	movs	r3, #207	; 0xcf
    1224:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1226:	2300      	movs	r3, #0
    1228:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    122a:	2230      	movs	r2, #48	; 0x30
    122c:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    122e:	2000      	movs	r0, #0
    1230:	bd10      	pop	{r4, pc}
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	00001199 	.word	0x00001199
    1238:	0000023d 	.word	0x0000023d
    123c:	000056b4 	.word	0x000056b4
    1240:	00000ddd 	.word	0x00000ddd
    1244:	50200000 	.word	0x50200000

00001248 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    1248:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    124a:	4b07      	ldr	r3, [pc, #28]	; (1268 <_get_i2cm_index+0x20>)
    124c:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
    124e:	2801      	cmp	r0, #1
    1250:	d007      	beq.n	1262 <_get_i2cm_index+0x1a>
			return i;
		}
	}

	ASSERT(false);
    1252:	4a06      	ldr	r2, [pc, #24]	; (126c <_get_i2cm_index+0x24>)
    1254:	4906      	ldr	r1, [pc, #24]	; (1270 <_get_i2cm_index+0x28>)
    1256:	2000      	movs	r0, #0
    1258:	4b06      	ldr	r3, [pc, #24]	; (1274 <_get_i2cm_index+0x2c>)
    125a:	4798      	blx	r3
	return -1;
    125c:	2001      	movs	r0, #1
    125e:	4240      	negs	r0, r0
}
    1260:	bd10      	pop	{r4, pc}
			return i;
    1262:	2000      	movs	r0, #0
    1264:	e7fc      	b.n	1260 <_get_i2cm_index+0x18>
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	00001199 	.word	0x00001199
    126c:	0000039b 	.word	0x0000039b
    1270:	000056b4 	.word	0x000056b4
    1274:	00000ddd 	.word	0x00000ddd

00001278 <_i2c_m_sync_init_impl>:
		}
	}
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1278:	b570      	push	{r4, r5, r6, lr}
    127a:	0005      	movs	r5, r0
    127c:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    127e:	0008      	movs	r0, r1
    1280:	4b23      	ldr	r3, [pc, #140]	; (1310 <_i2c_m_sync_init_impl+0x98>)
    1282:	4798      	blx	r3
    1284:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1286:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1288:	07db      	lsls	r3, r3, #31
    128a:	d418      	bmi.n	12be <_i2c_m_sync_init_impl+0x46>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    128c:	0043      	lsls	r3, r0, #1
    128e:	181b      	adds	r3, r3, r0
    1290:	00db      	lsls	r3, r3, #3
    1292:	4a20      	ldr	r2, [pc, #128]	; (1314 <_i2c_m_sync_init_impl+0x9c>)
    1294:	18d3      	adds	r3, r2, r3
    1296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1298:	211c      	movs	r1, #28
    129a:	4019      	ands	r1, r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    129c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    129e:	079b      	lsls	r3, r3, #30
    12a0:	d50a      	bpl.n	12b8 <_i2c_m_sync_init_impl+0x40>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12a2:	2203      	movs	r2, #3
    12a4:	69e3      	ldr	r3, [r4, #28]
    12a6:	421a      	tst	r2, r3
    12a8:	d1fc      	bne.n	12a4 <_i2c_m_sync_init_impl+0x2c>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    12aa:	6823      	ldr	r3, [r4, #0]
    12ac:	2202      	movs	r2, #2
    12ae:	4393      	bics	r3, r2
    12b0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12b2:	69e3      	ldr	r3, [r4, #28]
    12b4:	421a      	tst	r2, r3
    12b6:	d1fc      	bne.n	12b2 <_i2c_m_sync_init_impl+0x3a>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    12b8:	2301      	movs	r3, #1
    12ba:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    12bc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12be:	2201      	movs	r2, #1
    12c0:	69e3      	ldr	r3, [r4, #28]
    12c2:	421a      	tst	r2, r3
    12c4:	d1fc      	bne.n	12c0 <_i2c_m_sync_init_impl+0x48>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    12c6:	0043      	lsls	r3, r0, #1
    12c8:	181b      	adds	r3, r3, r0
    12ca:	00da      	lsls	r2, r3, #3
    12cc:	4b11      	ldr	r3, [pc, #68]	; (1314 <_i2c_m_sync_init_impl+0x9c>)
    12ce:	189b      	adds	r3, r3, r2
    12d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    12d2:	6021      	str	r1, [r4, #0]
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    12d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12d6:	6062      	str	r2, [r4, #4]
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    12d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    12da:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    12dc:	0189      	lsls	r1, r1, #6
    12de:	0f89      	lsrs	r1, r1, #30
    12e0:	81a9      	strh	r1, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    12e2:	2301      	movs	r3, #1
    12e4:	428b      	cmp	r3, r1
    12e6:	4189      	sbcs	r1, r1
    12e8:	4249      	negs	r1, r1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12ea:	2204      	movs	r2, #4
    12ec:	69e3      	ldr	r3, [r4, #28]
    12ee:	421a      	tst	r2, r3
    12f0:	d1fc      	bne.n	12ec <_i2c_m_sync_init_impl+0x74>
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    12f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    12f4:	4a08      	ldr	r2, [pc, #32]	; (1318 <_i2c_m_sync_init_impl+0xa0>)
    12f6:	401a      	ands	r2, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    12f8:	038b      	lsls	r3, r1, #14
    12fa:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    12fc:	6263      	str	r3, [r4, #36]	; 0x24

	service->trise = _i2cms[i].trise;
    12fe:	0043      	lsls	r3, r0, #1
    1300:	1818      	adds	r0, r3, r0
    1302:	00c0      	lsls	r0, r0, #3
    1304:	4b03      	ldr	r3, [pc, #12]	; (1314 <_i2c_m_sync_init_impl+0x9c>)
    1306:	1818      	adds	r0, r3, r0
    1308:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    130a:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    130c:	2000      	movs	r0, #0
    130e:	bd70      	pop	{r4, r5, r6, pc}
    1310:	00001249 	.word	0x00001249
    1314:	0000567c 	.word	0x0000567c
    1318:	ffffbfff 	.word	0xffffbfff

0000131c <_usart_sync_init>:
{
    131c:	b570      	push	{r4, r5, r6, lr}
    131e:	0005      	movs	r5, r0
    1320:	000c      	movs	r4, r1
	ASSERT(device);
    1322:	1e43      	subs	r3, r0, #1
    1324:	4198      	sbcs	r0, r3
    1326:	b2c0      	uxtb	r0, r0
    1328:	22b4      	movs	r2, #180	; 0xb4
    132a:	4904      	ldr	r1, [pc, #16]	; (133c <_usart_sync_init+0x20>)
    132c:	4b04      	ldr	r3, [pc, #16]	; (1340 <_usart_sync_init+0x24>)
    132e:	4798      	blx	r3
	device->hw = hw;
    1330:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1332:	0020      	movs	r0, r4
    1334:	4b03      	ldr	r3, [pc, #12]	; (1344 <_usart_sync_init+0x28>)
    1336:	4798      	blx	r3
}
    1338:	bd70      	pop	{r4, r5, r6, pc}
    133a:	46c0      	nop			; (mov r8, r8)
    133c:	000056b4 	.word	0x000056b4
    1340:	00000ddd 	.word	0x00000ddd
    1344:	000011d5 	.word	0x000011d5

00001348 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1348:	6803      	ldr	r3, [r0, #0]
    134a:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    134c:	8519      	strh	r1, [r3, #40]	; 0x28
}
    134e:	4770      	bx	lr

00001350 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1350:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1352:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1354:	b2c0      	uxtb	r0, r0
}
    1356:	4770      	bx	lr

00001358 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1358:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    135a:	7e18      	ldrb	r0, [r3, #24]
    135c:	2301      	movs	r3, #1
    135e:	4018      	ands	r0, r3
}
    1360:	4770      	bx	lr

00001362 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1362:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1364:	7e18      	ldrb	r0, [r3, #24]
    1366:	0780      	lsls	r0, r0, #30
    1368:	0fc0      	lsrs	r0, r0, #31
}
    136a:	4770      	bx	lr

0000136c <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    136c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    136e:	7e18      	ldrb	r0, [r3, #24]
    1370:	0740      	lsls	r0, r0, #29
    1372:	0fc0      	lsrs	r0, r0, #31
}
    1374:	4770      	bx	lr
	...

00001378 <_i2c_m_sync_init>:
{
    1378:	b570      	push	{r4, r5, r6, lr}
    137a:	0004      	movs	r4, r0
    137c:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
    137e:	1e43      	subs	r3, r0, #1
    1380:	4198      	sbcs	r0, r3
    1382:	b2c0      	uxtb	r0, r0
    1384:	4a04      	ldr	r2, [pc, #16]	; (1398 <_i2c_m_sync_init+0x20>)
    1386:	4905      	ldr	r1, [pc, #20]	; (139c <_i2c_m_sync_init+0x24>)
    1388:	4b05      	ldr	r3, [pc, #20]	; (13a0 <_i2c_m_sync_init+0x28>)
    138a:	4798      	blx	r3
	i2c_dev->hw = hw;
    138c:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    138e:	0029      	movs	r1, r5
    1390:	0020      	movs	r0, r4
    1392:	4b04      	ldr	r3, [pc, #16]	; (13a4 <_i2c_m_sync_init+0x2c>)
    1394:	4798      	blx	r3
}
    1396:	bd70      	pop	{r4, r5, r6, pc}
    1398:	0000050e 	.word	0x0000050e
    139c:	000056b4 	.word	0x000056b4
    13a0:	00000ddd 	.word	0x00000ddd
    13a4:	00001279 	.word	0x00001279

000013a8 <_i2c_m_sync_enable>:
{
    13a8:	b570      	push	{r4, r5, r6, lr}
    13aa:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
    13ac:	4d16      	ldr	r5, [pc, #88]	; (1408 <_i2c_m_sync_enable+0x60>)
    13ae:	1e43      	subs	r3, r0, #1
    13b0:	4198      	sbcs	r0, r3
    13b2:	b2c0      	uxtb	r0, r0
    13b4:	4a15      	ldr	r2, [pc, #84]	; (140c <_i2c_m_sync_enable+0x64>)
    13b6:	0029      	movs	r1, r5
    13b8:	4e15      	ldr	r6, [pc, #84]	; (1410 <_i2c_m_sync_enable+0x68>)
    13ba:	47b0      	blx	r6
	_i2c_m_enable_implementation(i2c_dev->hw);
    13bc:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    13be:	0020      	movs	r0, r4
    13c0:	1e43      	subs	r3, r0, #1
    13c2:	4198      	sbcs	r0, r3
    13c4:	b2c0      	uxtb	r0, r0
    13c6:	4a13      	ldr	r2, [pc, #76]	; (1414 <_i2c_m_sync_enable+0x6c>)
    13c8:	0029      	movs	r1, r5
    13ca:	47b0      	blx	r6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13cc:	2203      	movs	r2, #3
    13ce:	69e3      	ldr	r3, [r4, #28]
    13d0:	421a      	tst	r2, r3
    13d2:	d1fc      	bne.n	13ce <_i2c_m_sync_enable+0x26>
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    13d4:	6823      	ldr	r3, [r4, #0]
    13d6:	2202      	movs	r2, #2
    13d8:	4313      	orrs	r3, r2
    13da:	6023      	str	r3, [r4, #0]
	int timeout = 65535;
    13dc:	490e      	ldr	r1, [pc, #56]	; (1418 <_i2c_m_sync_enable+0x70>)
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13de:	3202      	adds	r2, #2
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    13e0:	2003      	movs	r0, #3
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    13e2:	2510      	movs	r5, #16
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13e4:	69e3      	ldr	r3, [r4, #28]
    13e6:	421a      	tst	r2, r3
    13e8:	d1fc      	bne.n	13e4 <_i2c_m_sync_enable+0x3c>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    13ea:	8b63      	ldrh	r3, [r4, #26]
    13ec:	091b      	lsrs	r3, r3, #4
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    13ee:	4003      	ands	r3, r0
    13f0:	2b01      	cmp	r3, #1
    13f2:	d007      	beq.n	1404 <_i2c_m_sync_enable+0x5c>
		timeout--;
    13f4:	3901      	subs	r1, #1
		if (timeout <= 0) {
    13f6:	2900      	cmp	r1, #0
    13f8:	dcf4      	bgt.n	13e4 <_i2c_m_sync_enable+0x3c>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13fa:	69e3      	ldr	r3, [r4, #28]
    13fc:	421a      	tst	r2, r3
    13fe:	d1fc      	bne.n	13fa <_i2c_m_sync_enable+0x52>
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    1400:	8365      	strh	r5, [r4, #26]
    1402:	e7ef      	b.n	13e4 <_i2c_m_sync_enable+0x3c>
}
    1404:	2000      	movs	r0, #0
    1406:	bd70      	pop	{r4, r5, r6, pc}
    1408:	000056b4 	.word	0x000056b4
    140c:	0000052b 	.word	0x0000052b
    1410:	00000ddd 	.word	0x00000ddd
    1414:	000005fb 	.word	0x000005fb
    1418:	0000ffff 	.word	0x0000ffff

0000141c <_i2c_m_sync_transfer>:
{
    141c:	b5f0      	push	{r4, r5, r6, r7, lr}
    141e:	46de      	mov	lr, fp
    1420:	464f      	mov	r7, r9
    1422:	4646      	mov	r6, r8
    1424:	b5c0      	push	{r6, r7, lr}
    1426:	b082      	sub	sp, #8
    1428:	0005      	movs	r5, r0
    142a:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
    142c:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    142e:	0006      	movs	r6, r0
    1430:	1e73      	subs	r3, r6, #1
    1432:	419e      	sbcs	r6, r3
    1434:	b2f3      	uxtb	r3, r6
    1436:	4fb6      	ldr	r7, [pc, #728]	; (1710 <_i2c_m_sync_transfer+0x2f4>)
    1438:	22b9      	movs	r2, #185	; 0xb9
    143a:	00d2      	lsls	r2, r2, #3
    143c:	0039      	movs	r1, r7
    143e:	9301      	str	r3, [sp, #4]
    1440:	0018      	movs	r0, r3
    1442:	4eb4      	ldr	r6, [pc, #720]	; (1714 <_i2c_m_sync_transfer+0x2f8>)
    1444:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    1446:	6928      	ldr	r0, [r5, #16]
    1448:	1e43      	subs	r3, r0, #1
    144a:	4198      	sbcs	r0, r3
    144c:	b2c0      	uxtb	r0, r0
    144e:	4ab2      	ldr	r2, [pc, #712]	; (1718 <_i2c_m_sync_transfer+0x2fc>)
    1450:	0039      	movs	r1, r7
    1452:	47b0      	blx	r6
	ASSERT(msg);
    1454:	4640      	mov	r0, r8
    1456:	1e43      	subs	r3, r0, #1
    1458:	4198      	sbcs	r0, r3
    145a:	b2c0      	uxtb	r0, r0
    145c:	4aaf      	ldr	r2, [pc, #700]	; (171c <_i2c_m_sync_transfer+0x300>)
    145e:	0039      	movs	r1, r7
    1460:	47b0      	blx	r6
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1462:	886b      	ldrh	r3, [r5, #2]
    1464:	05da      	lsls	r2, r3, #23
    1466:	d500      	bpl.n	146a <_i2c_m_sync_transfer+0x4e>
    1468:	e1e4      	b.n	1834 <_i2c_m_sync_transfer+0x418>
	msg->flags |= I2C_M_BUSY;
    146a:	4642      	mov	r2, r8
    146c:	8853      	ldrh	r3, [r2, #2]
    146e:	2280      	movs	r2, #128	; 0x80
    1470:	0052      	lsls	r2, r2, #1
    1472:	4313      	orrs	r3, r2
    1474:	4642      	mov	r2, r8
    1476:	8053      	strh	r3, [r2, #2]
	i2c_dev->service.msg = *msg;
    1478:	002a      	movs	r2, r5
    147a:	4641      	mov	r1, r8
    147c:	c9c1      	ldmia	r1!, {r0, r6, r7}
    147e:	c2c1      	stmia	r2!, {r0, r6, r7}
	void *             hw    = i2c_dev->hw;
    1480:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1482:	683a      	ldr	r2, [r7, #0]
    1484:	4691      	mov	r9, r2
	ASSERT(i2c_dev);
    1486:	4aa6      	ldr	r2, [pc, #664]	; (1720 <_i2c_m_sync_transfer+0x304>)
    1488:	49a1      	ldr	r1, [pc, #644]	; (1710 <_i2c_m_sync_transfer+0x2f4>)
    148a:	9801      	ldr	r0, [sp, #4]
    148c:	4ba1      	ldr	r3, [pc, #644]	; (1714 <_i2c_m_sync_transfer+0x2f8>)
    148e:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1490:	686b      	ldr	r3, [r5, #4]
    1492:	2b01      	cmp	r3, #1
    1494:	d051      	beq.n	153a <_i2c_m_sync_transfer+0x11e>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1496:	2204      	movs	r2, #4
    1498:	69fb      	ldr	r3, [r7, #28]
    149a:	421a      	tst	r2, r3
    149c:	d1fc      	bne.n	1498 <_i2c_m_sync_transfer+0x7c>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    149e:	687b      	ldr	r3, [r7, #4]
    14a0:	4aa0      	ldr	r2, [pc, #640]	; (1724 <_i2c_m_sync_transfer+0x308>)
    14a2:	4013      	ands	r3, r2
    14a4:	607b      	str	r3, [r7, #4]
	if (msg->addr & I2C_M_TEN) {
    14a6:	882b      	ldrh	r3, [r5, #0]
    14a8:	055a      	lsls	r2, r3, #21
    14aa:	d553      	bpl.n	1554 <_i2c_m_sync_transfer+0x138>
		if (msg->flags & I2C_M_RD) {
    14ac:	886a      	ldrh	r2, [r5, #2]
    14ae:	07d2      	lsls	r2, r2, #31
    14b0:	d504      	bpl.n	14bc <_i2c_m_sync_transfer+0xa0>
			msg->flags |= I2C_M_TEN;
    14b2:	886a      	ldrh	r2, [r5, #2]
    14b4:	2180      	movs	r1, #128	; 0x80
    14b6:	00c9      	lsls	r1, r1, #3
    14b8:	430a      	orrs	r2, r1
    14ba:	806a      	strh	r2, [r5, #2]
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    14bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    14be:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    14c0:	4999      	ldr	r1, [pc, #612]	; (1728 <_i2c_m_sync_transfer+0x30c>)
    14c2:	400b      	ands	r3, r1
    14c4:	2180      	movs	r1, #128	; 0x80
    14c6:	01c9      	lsls	r1, r1, #7
    14c8:	4011      	ands	r1, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    14ca:	2280      	movs	r2, #128	; 0x80
    14cc:	0212      	lsls	r2, r2, #8
    14ce:	430a      	orrs	r2, r1
    14d0:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    14d2:	627b      	str	r3, [r7, #36]	; 0x24
	void *   hw      = i2c_dev->hw;
    14d4:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    14d6:	7e0b      	ldrb	r3, [r1, #24]
    14d8:	b2db      	uxtb	r3, r3
    14da:	4a94      	ldr	r2, [pc, #592]	; (172c <_i2c_m_sync_transfer+0x310>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    14dc:	2003      	movs	r0, #3
    14de:	4218      	tst	r0, r3
    14e0:	d104      	bne.n	14ec <_i2c_m_sync_transfer+0xd0>
    14e2:	7e0b      	ldrb	r3, [r1, #24]
    14e4:	b2db      	uxtb	r3, r3
    14e6:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
    14e8:	2a00      	cmp	r2, #0
    14ea:	d1f8      	bne.n	14de <_i2c_m_sync_transfer+0xc2>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    14ec:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14ee:	2104      	movs	r1, #4
    14f0:	69fa      	ldr	r2, [r7, #28]
    14f2:	4211      	tst	r1, r2
    14f4:	d1fc      	bne.n	14f0 <_i2c_m_sync_transfer+0xd4>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    14f6:	8b7a      	ldrh	r2, [r7, #26]
    14f8:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    14fa:	07d9      	lsls	r1, r3, #31
    14fc:	d400      	bmi.n	1500 <_i2c_m_sync_transfer+0xe4>
    14fe:	e08b      	b.n	1618 <_i2c_m_sync_transfer+0x1fc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1500:	0793      	lsls	r3, r2, #30
    1502:	d535      	bpl.n	1570 <_i2c_m_sync_transfer+0x154>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1504:	2301      	movs	r3, #1
    1506:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    1508:	886b      	ldrh	r3, [r5, #2]
    150a:	2180      	movs	r1, #128	; 0x80
    150c:	0149      	lsls	r1, r1, #5
    150e:	430b      	orrs	r3, r1
    1510:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1512:	886b      	ldrh	r3, [r5, #2]
    1514:	4986      	ldr	r1, [pc, #536]	; (1730 <_i2c_m_sync_transfer+0x314>)
    1516:	400b      	ands	r3, r1
    1518:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    151a:	2001      	movs	r0, #1
    151c:	0003      	movs	r3, r0
    151e:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
    1520:	4258      	negs	r0, r3
    1522:	4158      	adcs	r0, r3
    1524:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1526:	886b      	ldrh	r3, [r5, #2]
    1528:	4a81      	ldr	r2, [pc, #516]	; (1730 <_i2c_m_sync_transfer+0x314>)
    152a:	4013      	ands	r3, r2
    152c:	806b      	strh	r3, [r5, #2]
}
    152e:	b002      	add	sp, #8
    1530:	bc1c      	pop	{r2, r3, r4}
    1532:	4690      	mov	r8, r2
    1534:	4699      	mov	r9, r3
    1536:	46a3      	mov	fp, r4
    1538:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
    153a:	464b      	mov	r3, r9
    153c:	011b      	lsls	r3, r3, #4
    153e:	d5aa      	bpl.n	1496 <_i2c_m_sync_transfer+0x7a>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1540:	2204      	movs	r2, #4
    1542:	69fb      	ldr	r3, [r7, #28]
    1544:	421a      	tst	r2, r3
    1546:	d1fc      	bne.n	1542 <_i2c_m_sync_transfer+0x126>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1548:	687a      	ldr	r2, [r7, #4]
    154a:	2380      	movs	r3, #128	; 0x80
    154c:	02db      	lsls	r3, r3, #11
    154e:	4313      	orrs	r3, r2
    1550:	607b      	str	r3, [r7, #4]
    1552:	e7a8      	b.n	14a6 <_i2c_m_sync_transfer+0x8a>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    1554:	8868      	ldrh	r0, [r5, #2]
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1556:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1558:	005b      	lsls	r3, r3, #1
    155a:	22ff      	movs	r2, #255	; 0xff
    155c:	4013      	ands	r3, r2
    155e:	3afe      	subs	r2, #254	; 0xfe
    1560:	4002      	ands	r2, r0
    1562:	4313      	orrs	r3, r2
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1564:	2280      	movs	r2, #128	; 0x80
    1566:	01d2      	lsls	r2, r2, #7
    1568:	400a      	ands	r2, r1
		hri_sercomi2cm_write_ADDR_reg(hw,
    156a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    156c:	627b      	str	r3, [r7, #36]	; 0x24
    156e:	e7b1      	b.n	14d4 <_i2c_m_sync_transfer+0xb8>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1570:	0753      	lsls	r3, r2, #29
    1572:	d40e      	bmi.n	1592 <_i2c_m_sync_transfer+0x176>
			if (msg->flags & I2C_M_TEN) {
    1574:	886b      	ldrh	r3, [r5, #2]
    1576:	055b      	lsls	r3, r3, #21
    1578:	d428      	bmi.n	15cc <_i2c_m_sync_transfer+0x1b0>
			if (msg->len == 0) {
    157a:	686b      	ldr	r3, [r5, #4]
    157c:	2b00      	cmp	r3, #0
    157e:	d140      	bne.n	1602 <_i2c_m_sync_transfer+0x1e6>
				if (msg->flags & I2C_M_STOP) {
    1580:	886b      	ldrh	r3, [r5, #2]
    1582:	b21b      	sxth	r3, r3
    1584:	2b00      	cmp	r3, #0
    1586:	db32      	blt.n	15ee <_i2c_m_sync_transfer+0x1d2>
				msg->flags &= ~I2C_M_BUSY;
    1588:	886b      	ldrh	r3, [r5, #2]
    158a:	4a69      	ldr	r2, [pc, #420]	; (1730 <_i2c_m_sync_transfer+0x314>)
    158c:	4013      	ands	r3, r2
    158e:	806b      	strh	r3, [r5, #2]
    1590:	e06e      	b.n	1670 <_i2c_m_sync_transfer+0x254>
				if (msg->len > 0) {
    1592:	686b      	ldr	r3, [r5, #4]
    1594:	2b00      	cmp	r3, #0
    1596:	dd04      	ble.n	15a2 <_i2c_m_sync_transfer+0x186>
					msg->flags |= I2C_M_FAIL;
    1598:	886b      	ldrh	r3, [r5, #2]
    159a:	2280      	movs	r2, #128	; 0x80
    159c:	0152      	lsls	r2, r2, #5
    159e:	4313      	orrs	r3, r2
    15a0:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    15a2:	886b      	ldrh	r3, [r5, #2]
    15a4:	b21b      	sxth	r3, r3
    15a6:	2b00      	cmp	r3, #0
    15a8:	db06      	blt.n	15b8 <_i2c_m_sync_transfer+0x19c>
				msg->flags &= ~I2C_M_BUSY;
    15aa:	886b      	ldrh	r3, [r5, #2]
    15ac:	4a60      	ldr	r2, [pc, #384]	; (1730 <_i2c_m_sync_transfer+0x314>)
    15ae:	4013      	ands	r3, r2
    15b0:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    15b2:	2002      	movs	r0, #2
    15b4:	4240      	negs	r0, r0
    15b6:	e7b6      	b.n	1526 <_i2c_m_sync_transfer+0x10a>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15b8:	2304      	movs	r3, #4
    15ba:	69fa      	ldr	r2, [r7, #28]
    15bc:	4213      	tst	r3, r2
    15be:	d1fc      	bne.n	15ba <_i2c_m_sync_transfer+0x19e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15c0:	687a      	ldr	r2, [r7, #4]
    15c2:	23c0      	movs	r3, #192	; 0xc0
    15c4:	029b      	lsls	r3, r3, #10
    15c6:	4313      	orrs	r3, r2
    15c8:	607b      	str	r3, [r7, #4]
    15ca:	e7ee      	b.n	15aa <_i2c_m_sync_transfer+0x18e>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    15cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    15ce:	882b      	ldrh	r3, [r5, #0]
    15d0:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    15d2:	2106      	movs	r1, #6
    15d4:	400b      	ands	r3, r1
    15d6:	2180      	movs	r1, #128	; 0x80
    15d8:	01c9      	lsls	r1, r1, #7
    15da:	400a      	ands	r2, r1
				hri_sercomi2cm_write_ADDR_reg(hw,
    15dc:	21f1      	movs	r1, #241	; 0xf1
    15de:	430a      	orrs	r2, r1
    15e0:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    15e2:	627b      	str	r3, [r7, #36]	; 0x24
				msg->flags &= ~I2C_M_TEN;
    15e4:	886b      	ldrh	r3, [r5, #2]
    15e6:	4a53      	ldr	r2, [pc, #332]	; (1734 <_i2c_m_sync_transfer+0x318>)
    15e8:	4013      	ands	r3, r2
    15ea:	806b      	strh	r3, [r5, #2]
    15ec:	e040      	b.n	1670 <_i2c_m_sync_transfer+0x254>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15ee:	2204      	movs	r2, #4
    15f0:	69fb      	ldr	r3, [r7, #28]
    15f2:	421a      	tst	r2, r3
    15f4:	d1fc      	bne.n	15f0 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15f6:	687a      	ldr	r2, [r7, #4]
    15f8:	23c0      	movs	r3, #192	; 0xc0
    15fa:	029b      	lsls	r3, r3, #10
    15fc:	4313      	orrs	r3, r2
    15fe:	607b      	str	r3, [r7, #4]
    1600:	e7c2      	b.n	1588 <_i2c_m_sync_transfer+0x16c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1602:	68ab      	ldr	r3, [r5, #8]
    1604:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1606:	2328      	movs	r3, #40	; 0x28
    1608:	54fa      	strb	r2, [r7, r3]
				msg->buffer++;
    160a:	68ab      	ldr	r3, [r5, #8]
    160c:	3301      	adds	r3, #1
    160e:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1610:	686b      	ldr	r3, [r5, #4]
    1612:	3b01      	subs	r3, #1
    1614:	606b      	str	r3, [r5, #4]
    1616:	e02b      	b.n	1670 <_i2c_m_sync_transfer+0x254>
	} else if (flags & SB_FLAG) {
    1618:	079b      	lsls	r3, r3, #30
    161a:	d529      	bpl.n	1670 <_i2c_m_sync_transfer+0x254>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    161c:	686b      	ldr	r3, [r5, #4]
    161e:	2b00      	cmp	r3, #0
    1620:	d03a      	beq.n	1698 <_i2c_m_sync_transfer+0x27c>
    1622:	0752      	lsls	r2, r2, #29
    1624:	d438      	bmi.n	1698 <_i2c_m_sync_transfer+0x27c>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1626:	0136      	lsls	r6, r6, #4
    1628:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
    162a:	3b01      	subs	r3, #1
    162c:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    162e:	2b00      	cmp	r3, #0
    1630:	d000      	beq.n	1634 <_i2c_m_sync_transfer+0x218>
    1632:	e102      	b.n	183a <_i2c_m_sync_transfer+0x41e>
    1634:	2e00      	cmp	r6, #0
    1636:	d10b      	bne.n	1650 <_i2c_m_sync_transfer+0x234>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1638:	2204      	movs	r2, #4
    163a:	69fb      	ldr	r3, [r7, #28]
    163c:	421a      	tst	r2, r3
    163e:	d1fc      	bne.n	163a <_i2c_m_sync_transfer+0x21e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1640:	687a      	ldr	r2, [r7, #4]
    1642:	2380      	movs	r3, #128	; 0x80
    1644:	02db      	lsls	r3, r3, #11
    1646:	4313      	orrs	r3, r2
    1648:	607b      	str	r3, [r7, #4]
			if (msg->len == 0) {
    164a:	686b      	ldr	r3, [r5, #4]
    164c:	2b00      	cmp	r3, #0
    164e:	d107      	bne.n	1660 <_i2c_m_sync_transfer+0x244>
				if (msg->flags & I2C_M_STOP) {
    1650:	886b      	ldrh	r3, [r5, #2]
    1652:	b21b      	sxth	r3, r3
    1654:	2b00      	cmp	r3, #0
    1656:	db15      	blt.n	1684 <_i2c_m_sync_transfer+0x268>
				msg->flags &= ~I2C_M_BUSY;
    1658:	886b      	ldrh	r3, [r5, #2]
    165a:	4a35      	ldr	r2, [pc, #212]	; (1730 <_i2c_m_sync_transfer+0x314>)
    165c:	4013      	ands	r3, r2
    165e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1660:	68ab      	ldr	r3, [r5, #8]
    1662:	1c5a      	adds	r2, r3, #1
    1664:	60aa      	str	r2, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1666:	2228      	movs	r2, #40	; 0x28
    1668:	5cba      	ldrb	r2, [r7, r2]
    166a:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    166c:	2302      	movs	r3, #2
    166e:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    1670:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1672:	2380      	movs	r3, #128	; 0x80
    1674:	005b      	lsls	r3, r3, #1
    1676:	469b      	mov	fp, r3
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1678:	2203      	movs	r2, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    167a:	2104      	movs	r1, #4
	if (flags & MB_FLAG) {
    167c:	3bff      	subs	r3, #255	; 0xff
    167e:	4699      	mov	r9, r3
	} else if (flags & SB_FLAG) {
    1680:	2602      	movs	r6, #2
    1682:	e0ad      	b.n	17e0 <_i2c_m_sync_transfer+0x3c4>
    1684:	2204      	movs	r2, #4
    1686:	69fb      	ldr	r3, [r7, #28]
    1688:	421a      	tst	r2, r3
    168a:	d1fc      	bne.n	1686 <_i2c_m_sync_transfer+0x26a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    168c:	687a      	ldr	r2, [r7, #4]
    168e:	23c0      	movs	r3, #192	; 0xc0
    1690:	029b      	lsls	r3, r3, #10
    1692:	4313      	orrs	r3, r2
    1694:	607b      	str	r3, [r7, #4]
    1696:	e7df      	b.n	1658 <_i2c_m_sync_transfer+0x23c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1698:	2302      	movs	r3, #2
    169a:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    169c:	2002      	movs	r0, #2
    169e:	4240      	negs	r0, r0
    16a0:	e741      	b.n	1526 <_i2c_m_sync_transfer+0x10a>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16a2:	2204      	movs	r2, #4
    16a4:	69e3      	ldr	r3, [r4, #28]
    16a6:	421a      	tst	r2, r3
    16a8:	d1fc      	bne.n	16a4 <_i2c_m_sync_transfer+0x288>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    16aa:	6862      	ldr	r2, [r4, #4]
    16ac:	23c0      	movs	r3, #192	; 0xc0
    16ae:	029b      	lsls	r3, r3, #10
    16b0:	4313      	orrs	r3, r2
    16b2:	6063      	str	r3, [r4, #4]
    16b4:	e0aa      	b.n	180c <_i2c_m_sync_transfer+0x3f0>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    16b6:	4239      	tst	r1, r7
    16b8:	d10f      	bne.n	16da <_i2c_m_sync_transfer+0x2be>
			if (msg->flags & I2C_M_TEN) {
    16ba:	886b      	ldrh	r3, [r5, #2]
    16bc:	055b      	lsls	r3, r3, #21
    16be:	d43b      	bmi.n	1738 <_i2c_m_sync_transfer+0x31c>
			if (msg->len == 0) {
    16c0:	686b      	ldr	r3, [r5, #4]
    16c2:	2b00      	cmp	r3, #0
    16c4:	d153      	bne.n	176e <_i2c_m_sync_transfer+0x352>
				if (msg->flags & I2C_M_STOP) {
    16c6:	886b      	ldrh	r3, [r5, #2]
    16c8:	b21b      	sxth	r3, r3
    16ca:	2b00      	cmp	r3, #0
    16cc:	db46      	blt.n	175c <_i2c_m_sync_transfer+0x340>
				msg->flags &= ~I2C_M_BUSY;
    16ce:	886b      	ldrh	r3, [r5, #2]
    16d0:	4817      	ldr	r0, [pc, #92]	; (1730 <_i2c_m_sync_transfer+0x314>)
    16d2:	4003      	ands	r3, r0
    16d4:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    16d6:	2000      	movs	r0, #0
    16d8:	e082      	b.n	17e0 <_i2c_m_sync_transfer+0x3c4>
				if (msg->len > 0) {
    16da:	686b      	ldr	r3, [r5, #4]
    16dc:	2b00      	cmp	r3, #0
    16de:	dd04      	ble.n	16ea <_i2c_m_sync_transfer+0x2ce>
					msg->flags |= I2C_M_FAIL;
    16e0:	886b      	ldrh	r3, [r5, #2]
    16e2:	2080      	movs	r0, #128	; 0x80
    16e4:	0140      	lsls	r0, r0, #5
    16e6:	4303      	orrs	r3, r0
    16e8:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    16ea:	886b      	ldrh	r3, [r5, #2]
    16ec:	b21b      	sxth	r3, r3
    16ee:	2b00      	cmp	r3, #0
    16f0:	db05      	blt.n	16fe <_i2c_m_sync_transfer+0x2e2>
				msg->flags &= ~I2C_M_BUSY;
    16f2:	886b      	ldrh	r3, [r5, #2]
    16f4:	480e      	ldr	r0, [pc, #56]	; (1730 <_i2c_m_sync_transfer+0x314>)
    16f6:	4003      	ands	r3, r0
    16f8:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    16fa:	30ff      	adds	r0, #255	; 0xff
    16fc:	e070      	b.n	17e0 <_i2c_m_sync_transfer+0x3c4>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16fe:	69e3      	ldr	r3, [r4, #28]
    1700:	4219      	tst	r1, r3
    1702:	d1fc      	bne.n	16fe <_i2c_m_sync_transfer+0x2e2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1704:	6860      	ldr	r0, [r4, #4]
    1706:	23c0      	movs	r3, #192	; 0xc0
    1708:	029b      	lsls	r3, r3, #10
    170a:	4303      	orrs	r3, r0
    170c:	6063      	str	r3, [r4, #4]
    170e:	e7f0      	b.n	16f2 <_i2c_m_sync_transfer+0x2d6>
    1710:	000056b4 	.word	0x000056b4
    1714:	00000ddd 	.word	0x00000ddd
    1718:	000005c9 	.word	0x000005c9
    171c:	000005ca 	.word	0x000005ca
    1720:	0000059d 	.word	0x0000059d
    1724:	fffbffff 	.word	0xfffbffff
    1728:	000007fe 	.word	0x000007fe
    172c:	0000ffff 	.word	0x0000ffff
    1730:	fffffeff 	.word	0xfffffeff
    1734:	fffffbff 	.word	0xfffffbff
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1738:	6a63      	ldr	r3, [r4, #36]	; 0x24
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    173a:	8828      	ldrh	r0, [r5, #0]
    173c:	09c0      	lsrs	r0, r0, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    173e:	2706      	movs	r7, #6
    1740:	4038      	ands	r0, r7
    1742:	2780      	movs	r7, #128	; 0x80
    1744:	01ff      	lsls	r7, r7, #7
    1746:	403b      	ands	r3, r7
				hri_sercomi2cm_write_ADDR_reg(hw,
    1748:	27f1      	movs	r7, #241	; 0xf1
    174a:	433b      	orrs	r3, r7
    174c:	4303      	orrs	r3, r0
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    174e:	6263      	str	r3, [r4, #36]	; 0x24
				msg->flags &= ~I2C_M_TEN;
    1750:	886b      	ldrh	r3, [r5, #2]
    1752:	484e      	ldr	r0, [pc, #312]	; (188c <_i2c_m_sync_transfer+0x470>)
    1754:	4003      	ands	r3, r0
    1756:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1758:	2000      	movs	r0, #0
    175a:	e041      	b.n	17e0 <_i2c_m_sync_transfer+0x3c4>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    175c:	69e3      	ldr	r3, [r4, #28]
    175e:	4219      	tst	r1, r3
    1760:	d1fc      	bne.n	175c <_i2c_m_sync_transfer+0x340>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1762:	6860      	ldr	r0, [r4, #4]
    1764:	23c0      	movs	r3, #192	; 0xc0
    1766:	029b      	lsls	r3, r3, #10
    1768:	4303      	orrs	r3, r0
    176a:	6063      	str	r3, [r4, #4]
    176c:	e7af      	b.n	16ce <_i2c_m_sync_transfer+0x2b2>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    176e:	68ab      	ldr	r3, [r5, #8]
    1770:	7818      	ldrb	r0, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1772:	2328      	movs	r3, #40	; 0x28
    1774:	54e0      	strb	r0, [r4, r3]
				msg->buffer++;
    1776:	68ab      	ldr	r3, [r5, #8]
    1778:	3301      	adds	r3, #1
    177a:	60ab      	str	r3, [r5, #8]
				msg->len--;
    177c:	686b      	ldr	r3, [r5, #4]
    177e:	3b01      	subs	r3, #1
    1780:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1782:	2000      	movs	r0, #0
    1784:	e02c      	b.n	17e0 <_i2c_m_sync_transfer+0x3c4>
	return I2C_OK;
    1786:	2000      	movs	r0, #0
	} else if (flags & SB_FLAG) {
    1788:	421e      	tst	r6, r3
    178a:	d029      	beq.n	17e0 <_i2c_m_sync_transfer+0x3c4>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    178c:	686b      	ldr	r3, [r5, #4]
    178e:	2b00      	cmp	r3, #0
    1790:	d04c      	beq.n	182c <_i2c_m_sync_transfer+0x410>
    1792:	4239      	tst	r1, r7
    1794:	d14a      	bne.n	182c <_i2c_m_sync_transfer+0x410>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1796:	4660      	mov	r0, ip
    1798:	0ec0      	lsrs	r0, r0, #27
    179a:	464f      	mov	r7, r9
    179c:	4038      	ands	r0, r7
			msg->len--;
    179e:	3b01      	subs	r3, #1
    17a0:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    17a2:	2b00      	cmp	r3, #0
    17a4:	d16d      	bne.n	1882 <_i2c_m_sync_transfer+0x466>
    17a6:	2800      	cmp	r0, #0
    17a8:	d10a      	bne.n	17c0 <_i2c_m_sync_transfer+0x3a4>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    17aa:	69e3      	ldr	r3, [r4, #28]
    17ac:	4219      	tst	r1, r3
    17ae:	d1fc      	bne.n	17aa <_i2c_m_sync_transfer+0x38e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    17b0:	6863      	ldr	r3, [r4, #4]
    17b2:	2080      	movs	r0, #128	; 0x80
    17b4:	02c0      	lsls	r0, r0, #11
    17b6:	4303      	orrs	r3, r0
    17b8:	6063      	str	r3, [r4, #4]
			if (msg->len == 0) {
    17ba:	686b      	ldr	r3, [r5, #4]
    17bc:	2b00      	cmp	r3, #0
    17be:	d107      	bne.n	17d0 <_i2c_m_sync_transfer+0x3b4>
				if (msg->flags & I2C_M_STOP) {
    17c0:	886b      	ldrh	r3, [r5, #2]
    17c2:	b21b      	sxth	r3, r3
    17c4:	2b00      	cmp	r3, #0
    17c6:	db28      	blt.n	181a <_i2c_m_sync_transfer+0x3fe>
				msg->flags &= ~I2C_M_BUSY;
    17c8:	886b      	ldrh	r3, [r5, #2]
    17ca:	4831      	ldr	r0, [pc, #196]	; (1890 <_i2c_m_sync_transfer+0x474>)
    17cc:	4003      	ands	r3, r0
    17ce:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    17d0:	68ab      	ldr	r3, [r5, #8]
    17d2:	1c58      	adds	r0, r3, #1
    17d4:	60a8      	str	r0, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    17d6:	2028      	movs	r0, #40	; 0x28
    17d8:	5c20      	ldrb	r0, [r4, r0]
    17da:	7018      	strb	r0, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    17dc:	7626      	strb	r6, [r4, #24]
	return I2C_OK;
    17de:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    17e0:	886b      	ldrh	r3, [r5, #2]
    17e2:	465f      	mov	r7, fp
    17e4:	423b      	tst	r3, r7
    17e6:	d100      	bne.n	17ea <_i2c_m_sync_transfer+0x3ce>
    17e8:	e6a1      	b.n	152e <_i2c_m_sync_transfer+0x112>
	void *   hw      = i2c_dev->hw;
    17ea:	692f      	ldr	r7, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    17ec:	7e3b      	ldrb	r3, [r7, #24]
    17ee:	b2db      	uxtb	r3, r3
    17f0:	4828      	ldr	r0, [pc, #160]	; (1894 <_i2c_m_sync_transfer+0x478>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    17f2:	421a      	tst	r2, r3
    17f4:	d128      	bne.n	1848 <_i2c_m_sync_transfer+0x42c>
    17f6:	7e3b      	ldrb	r3, [r7, #24]
    17f8:	b2db      	uxtb	r3, r3
    17fa:	3801      	subs	r0, #1
		if (timeout-- == 0) {
    17fc:	2800      	cmp	r0, #0
    17fe:	d1f8      	bne.n	17f2 <_i2c_m_sync_transfer+0x3d6>
			if (msg->flags & I2C_M_STOP) {
    1800:	4643      	mov	r3, r8
    1802:	885b      	ldrh	r3, [r3, #2]
    1804:	b21b      	sxth	r3, r3
    1806:	2b00      	cmp	r3, #0
    1808:	da00      	bge.n	180c <_i2c_m_sync_transfer+0x3f0>
    180a:	e74a      	b.n	16a2 <_i2c_m_sync_transfer+0x286>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    180c:	886b      	ldrh	r3, [r5, #2]
    180e:	4a20      	ldr	r2, [pc, #128]	; (1890 <_i2c_m_sync_transfer+0x474>)
    1810:	4013      	ands	r3, r2
    1812:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    1814:	2005      	movs	r0, #5
    1816:	4240      	negs	r0, r0
			return ret;
    1818:	e689      	b.n	152e <_i2c_m_sync_transfer+0x112>
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    181a:	69e3      	ldr	r3, [r4, #28]
    181c:	4219      	tst	r1, r3
    181e:	d1fc      	bne.n	181a <_i2c_m_sync_transfer+0x3fe>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1820:	6860      	ldr	r0, [r4, #4]
    1822:	23c0      	movs	r3, #192	; 0xc0
    1824:	029b      	lsls	r3, r3, #10
    1826:	4303      	orrs	r3, r0
    1828:	6063      	str	r3, [r4, #4]
    182a:	e7cd      	b.n	17c8 <_i2c_m_sync_transfer+0x3ac>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    182c:	7626      	strb	r6, [r4, #24]
			return I2C_NACK;
    182e:	2002      	movs	r0, #2
    1830:	4240      	negs	r0, r0
    1832:	e7d5      	b.n	17e0 <_i2c_m_sync_transfer+0x3c4>
		return I2C_ERR_BUSY;
    1834:	2006      	movs	r0, #6
    1836:	4240      	negs	r0, r0
    1838:	e679      	b.n	152e <_i2c_m_sync_transfer+0x112>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    183a:	2b01      	cmp	r3, #1
    183c:	d000      	beq.n	1840 <_i2c_m_sync_transfer+0x424>
    183e:	e70f      	b.n	1660 <_i2c_m_sync_transfer+0x244>
    1840:	2e00      	cmp	r6, #0
    1842:	d100      	bne.n	1846 <_i2c_m_sync_transfer+0x42a>
    1844:	e70c      	b.n	1660 <_i2c_m_sync_transfer+0x244>
    1846:	e6f7      	b.n	1638 <_i2c_m_sync_transfer+0x21c>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1848:	6820      	ldr	r0, [r4, #0]
    184a:	4684      	mov	ip, r0
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    184c:	69e0      	ldr	r0, [r4, #28]
    184e:	4201      	tst	r1, r0
    1850:	d1fc      	bne.n	184c <_i2c_m_sync_transfer+0x430>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1852:	8b67      	ldrh	r7, [r4, #26]
    1854:	b2bf      	uxth	r7, r7
	if (flags & MB_FLAG) {
    1856:	4648      	mov	r0, r9
    1858:	4218      	tst	r0, r3
    185a:	d094      	beq.n	1786 <_i2c_m_sync_transfer+0x36a>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    185c:	423e      	tst	r6, r7
    185e:	d100      	bne.n	1862 <_i2c_m_sync_transfer+0x446>
    1860:	e729      	b.n	16b6 <_i2c_m_sync_transfer+0x29a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1862:	7620      	strb	r0, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1864:	886b      	ldrh	r3, [r5, #2]
    1866:	2080      	movs	r0, #128	; 0x80
    1868:	0140      	lsls	r0, r0, #5
    186a:	4303      	orrs	r3, r0
    186c:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    186e:	886b      	ldrh	r3, [r5, #2]
    1870:	4807      	ldr	r0, [pc, #28]	; (1890 <_i2c_m_sync_transfer+0x474>)
    1872:	4003      	ands	r3, r0
    1874:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1876:	464b      	mov	r3, r9
    1878:	401f      	ands	r7, r3
			return I2C_ERR_BAD_ADDRESS;
    187a:	4278      	negs	r0, r7
    187c:	4178      	adcs	r0, r7
    187e:	3805      	subs	r0, #5
    1880:	e7ae      	b.n	17e0 <_i2c_m_sync_transfer+0x3c4>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1882:	2b01      	cmp	r3, #1
    1884:	d1a4      	bne.n	17d0 <_i2c_m_sync_transfer+0x3b4>
    1886:	2800      	cmp	r0, #0
    1888:	d0a2      	beq.n	17d0 <_i2c_m_sync_transfer+0x3b4>
    188a:	e78e      	b.n	17aa <_i2c_m_sync_transfer+0x38e>
    188c:	fffffbff 	.word	0xfffffbff
    1890:	fffffeff 	.word	0xfffffeff
    1894:	0000ffff 	.word	0x0000ffff

00001898 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1898:	4b02      	ldr	r3, [pc, #8]	; (18a4 <_delay_init+0xc>)
    189a:	4a03      	ldr	r2, [pc, #12]	; (18a8 <_delay_init+0x10>)
    189c:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    189e:	2205      	movs	r2, #5
    18a0:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    18a2:	4770      	bx	lr
    18a4:	e000e010 	.word	0xe000e010
    18a8:	00ffffff 	.word	0x00ffffff

000018ac <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    18ac:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    18ae:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    18b0:	1e5e      	subs	r6, r3, #1
    18b2:	b2f6      	uxtb	r6, r6
    18b4:	2b00      	cmp	r3, #0
    18b6:	d013      	beq.n	18e0 <_delay_cycles+0x34>
    18b8:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    18ba:	4a0e      	ldr	r2, [pc, #56]	; (18f4 <_delay_cycles+0x48>)
    18bc:	4d0e      	ldr	r5, [pc, #56]	; (18f8 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    18be:	2080      	movs	r0, #128	; 0x80
    18c0:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    18c2:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    18c4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    18c6:	6813      	ldr	r3, [r2, #0]
    18c8:	4203      	tst	r3, r0
    18ca:	d0fc      	beq.n	18c6 <_delay_cycles+0x1a>
	while (n--) {
    18cc:	3c01      	subs	r4, #1
    18ce:	b2e4      	uxtb	r4, r4
    18d0:	2cff      	cmp	r4, #255	; 0xff
    18d2:	d1f6      	bne.n	18c2 <_delay_cycles+0x16>
    18d4:	0633      	lsls	r3, r6, #24
    18d6:	1af6      	subs	r6, r6, r3
    18d8:	4b08      	ldr	r3, [pc, #32]	; (18fc <_delay_cycles+0x50>)
    18da:	469c      	mov	ip, r3
    18dc:	4461      	add	r1, ip
    18de:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    18e0:	4b04      	ldr	r3, [pc, #16]	; (18f4 <_delay_cycles+0x48>)
    18e2:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    18e4:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    18e6:	0019      	movs	r1, r3
    18e8:	2280      	movs	r2, #128	; 0x80
    18ea:	0252      	lsls	r2, r2, #9
    18ec:	680b      	ldr	r3, [r1, #0]
    18ee:	4213      	tst	r3, r2
    18f0:	d0fc      	beq.n	18ec <_delay_cycles+0x40>
		;
}
    18f2:	bd70      	pop	{r4, r5, r6, pc}
    18f4:	e000e010 	.word	0xe000e010
    18f8:	00ffffff 	.word	0x00ffffff
    18fc:	ff000001 	.word	0xff000001

00001900 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    1900:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1902:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1904:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1906:	07d2      	lsls	r2, r2, #31
    1908:	d400      	bmi.n	190c <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    190a:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    190c:	2201      	movs	r2, #1
    190e:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    1910:	6803      	ldr	r3, [r0, #0]
    1912:	4798      	blx	r3
}
    1914:	e7f9      	b.n	190a <tc_interrupt_handler+0xa>
	...

00001918 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    1918:	b530      	push	{r4, r5, lr}
    191a:	b089      	sub	sp, #36	; 0x24
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    191c:	4a1b      	ldr	r2, [pc, #108]	; (198c <get_tc_index+0x74>)
    191e:	466b      	mov	r3, sp
    1920:	ca32      	ldmia	r2!, {r1, r4, r5}
    1922:	c332      	stmia	r3!, {r1, r4, r5}
    1924:	ca32      	ldmia	r2!, {r1, r4, r5}
    1926:	c332      	stmia	r3!, {r1, r4, r5}
    1928:	ca12      	ldmia	r2!, {r1, r4}
    192a:	c312      	stmia	r3!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    192c:	0001      	movs	r1, r0
    192e:	9b00      	ldr	r3, [sp, #0]
    1930:	4283      	cmp	r3, r0
    1932:	d01f      	beq.n	1974 <get_tc_index+0x5c>
    1934:	2301      	movs	r3, #1
    1936:	009a      	lsls	r2, r3, #2
    1938:	466c      	mov	r4, sp
    193a:	5912      	ldr	r2, [r2, r4]
    193c:	428a      	cmp	r2, r1
    193e:	d01a      	beq.n	1976 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1940:	3301      	adds	r3, #1
    1942:	2b08      	cmp	r3, #8
    1944:	d1f7      	bne.n	1936 <get_tc_index+0x1e>
			return i;
		}
	}
	return (((uint32_t)hw - (uint32_t)TC0) >> 10);
    1946:	4b12      	ldr	r3, [pc, #72]	; (1990 <get_tc_index+0x78>)
    1948:	469c      	mov	ip, r3
    194a:	4460      	add	r0, ip
    194c:	0a80      	lsrs	r0, r0, #10
    194e:	b2c0      	uxtb	r0, r0
		if (_tcs[i].number == index) {
    1950:	2800      	cmp	r0, #0
    1952:	d018      	beq.n	1986 <get_tc_index+0x6e>
    1954:	2802      	cmp	r0, #2
    1956:	d012      	beq.n	197e <get_tc_index+0x66>
    1958:	2804      	cmp	r0, #4
    195a:	d012      	beq.n	1982 <get_tc_index+0x6a>
    195c:	2806      	cmp	r0, #6
    195e:	d00c      	beq.n	197a <get_tc_index+0x62>
	ASSERT(false);
    1960:	22a9      	movs	r2, #169	; 0xa9
    1962:	0052      	lsls	r2, r2, #1
    1964:	490b      	ldr	r1, [pc, #44]	; (1994 <get_tc_index+0x7c>)
    1966:	2000      	movs	r0, #0
    1968:	4b0b      	ldr	r3, [pc, #44]	; (1998 <get_tc_index+0x80>)
    196a:	4798      	blx	r3
	return -1;
    196c:	2001      	movs	r0, #1
    196e:	4240      	negs	r0, r0
}
    1970:	b009      	add	sp, #36	; 0x24
    1972:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1974:	2300      	movs	r3, #0
			return i;
    1976:	b2d8      	uxtb	r0, r3
    1978:	e7ea      	b.n	1950 <get_tc_index+0x38>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    197a:	3803      	subs	r0, #3
    197c:	e004      	b.n	1988 <get_tc_index+0x70>
    197e:	2001      	movs	r0, #1
    1980:	e002      	b.n	1988 <get_tc_index+0x70>
    1982:	2002      	movs	r0, #2
    1984:	e000      	b.n	1988 <get_tc_index+0x70>
    1986:	2000      	movs	r0, #0
			return i;
    1988:	b240      	sxtb	r0, r0
    198a:	e7f1      	b.n	1970 <get_tc_index+0x58>
    198c:	000056d0 	.word	0x000056d0
    1990:	bdffd000 	.word	0xbdffd000
    1994:	00005740 	.word	0x00005740
    1998:	00000ddd 	.word	0x00000ddd

0000199c <_timer_init>:
{
    199c:	b570      	push	{r4, r5, r6, lr}
    199e:	0006      	movs	r6, r0
    19a0:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    19a2:	0008      	movs	r0, r1
    19a4:	4b4f      	ldr	r3, [pc, #316]	; (1ae4 <_timer_init+0x148>)
    19a6:	4798      	blx	r3
    19a8:	0005      	movs	r5, r0
	device->hw = hw;
    19aa:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    19ac:	2294      	movs	r2, #148	; 0x94
    19ae:	494e      	ldr	r1, [pc, #312]	; (1ae8 <_timer_init+0x14c>)
    19b0:	2001      	movs	r0, #1
    19b2:	4b4e      	ldr	r3, [pc, #312]	; (1aec <_timer_init+0x150>)
    19b4:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    19b6:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    19b8:	07db      	lsls	r3, r3, #31
    19ba:	d40f      	bmi.n	19dc <_timer_init+0x40>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    19bc:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    19be:	079b      	lsls	r3, r3, #30
    19c0:	d50a      	bpl.n	19d8 <_timer_init+0x3c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    19c2:	2203      	movs	r2, #3
    19c4:	6923      	ldr	r3, [r4, #16]
    19c6:	421a      	tst	r2, r3
    19c8:	d1fc      	bne.n	19c4 <_timer_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    19ca:	6823      	ldr	r3, [r4, #0]
    19cc:	2202      	movs	r2, #2
    19ce:	4393      	bics	r3, r2
    19d0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    19d2:	6923      	ldr	r3, [r4, #16]
    19d4:	421a      	tst	r2, r3
    19d6:	d1fc      	bne.n	19d2 <_timer_init+0x36>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    19d8:	2301      	movs	r3, #1
    19da:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    19dc:	2201      	movs	r2, #1
    19de:	6923      	ldr	r3, [r4, #16]
    19e0:	421a      	tst	r2, r3
    19e2:	d1fc      	bne.n	19de <_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    19e4:	4a42      	ldr	r2, [pc, #264]	; (1af0 <_timer_init+0x154>)
    19e6:	00a9      	lsls	r1, r5, #2
    19e8:	194b      	adds	r3, r1, r5
    19ea:	009b      	lsls	r3, r3, #2
    19ec:	18d3      	adds	r3, r2, r3
    19ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    19f0:	6020      	str	r0, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    19f2:	3220      	adds	r2, #32
    19f4:	1949      	adds	r1, r1, r5
    19f6:	0089      	lsls	r1, r1, #2
    19f8:	1852      	adds	r2, r2, r1
    19fa:	7a92      	ldrb	r2, [r2, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    19fc:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    19fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    1a00:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    1a02:	2301      	movs	r3, #1
    1a04:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1a06:	330b      	adds	r3, #11
    1a08:	4003      	ands	r3, r0
    1a0a:	2b08      	cmp	r3, #8
    1a0c:	d042      	beq.n	1a94 <_timer_init+0xf8>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1a0e:	2b00      	cmp	r3, #0
    1a10:	d147      	bne.n	1aa2 <_timer_init+0x106>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1a12:	00ab      	lsls	r3, r5, #2
    1a14:	195b      	adds	r3, r3, r5
    1a16:	009b      	lsls	r3, r3, #2
    1a18:	4a35      	ldr	r2, [pc, #212]	; (1af0 <_timer_init+0x154>)
    1a1a:	18d3      	adds	r3, r2, r3
    1a1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1a1e:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    1a20:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    1a22:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1a24:	2301      	movs	r3, #1
    1a26:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    1a28:	4b32      	ldr	r3, [pc, #200]	; (1af4 <_timer_init+0x158>)
    1a2a:	429c      	cmp	r4, r3
    1a2c:	d04e      	beq.n	1acc <_timer_init+0x130>
	if (hw == TC2) {
    1a2e:	4b32      	ldr	r3, [pc, #200]	; (1af8 <_timer_init+0x15c>)
    1a30:	429c      	cmp	r4, r3
    1a32:	d04e      	beq.n	1ad2 <_timer_init+0x136>
	if (hw == TC4) {
    1a34:	4b31      	ldr	r3, [pc, #196]	; (1afc <_timer_init+0x160>)
    1a36:	429c      	cmp	r4, r3
    1a38:	d04e      	beq.n	1ad8 <_timer_init+0x13c>
	if (hw == TC6) {
    1a3a:	4b31      	ldr	r3, [pc, #196]	; (1b00 <_timer_init+0x164>)
    1a3c:	429c      	cmp	r4, r3
    1a3e:	d04e      	beq.n	1ade <_timer_init+0x142>
	NVIC_DisableIRQ(_tcs[i].irq);
    1a40:	00ab      	lsls	r3, r5, #2
    1a42:	195b      	adds	r3, r3, r5
    1a44:	0099      	lsls	r1, r3, #2
    1a46:	4b2a      	ldr	r3, [pc, #168]	; (1af0 <_timer_init+0x154>)
    1a48:	3320      	adds	r3, #32
    1a4a:	185b      	adds	r3, r3, r1
    1a4c:	785b      	ldrb	r3, [r3, #1]
    1a4e:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    1a50:	2b00      	cmp	r3, #0
    1a52:	db1d      	blt.n	1a90 <_timer_init+0xf4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1a54:	221f      	movs	r2, #31
    1a56:	401a      	ands	r2, r3
    1a58:	2301      	movs	r3, #1
    1a5a:	4093      	lsls	r3, r2
    1a5c:	2280      	movs	r2, #128	; 0x80
    1a5e:	4929      	ldr	r1, [pc, #164]	; (1b04 <_timer_init+0x168>)
    1a60:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    1a62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a66:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    1a6a:	00aa      	lsls	r2, r5, #2
    1a6c:	1952      	adds	r2, r2, r5
    1a6e:	0092      	lsls	r2, r2, #2
    1a70:	4d1f      	ldr	r5, [pc, #124]	; (1af0 <_timer_init+0x154>)
    1a72:	3520      	adds	r5, #32
    1a74:	18ad      	adds	r5, r5, r2
    1a76:	2301      	movs	r3, #1
    1a78:	56eb      	ldrsb	r3, [r5, r3]
  if ((int32_t)(IRQn) >= 0)
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	db08      	blt.n	1a90 <_timer_init+0xf4>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1a7e:	221f      	movs	r2, #31
    1a80:	401a      	ands	r2, r3
    1a82:	2301      	movs	r3, #1
    1a84:	4093      	lsls	r3, r2
    1a86:	000a      	movs	r2, r1
    1a88:	21c0      	movs	r1, #192	; 0xc0
    1a8a:	0049      	lsls	r1, r1, #1
    1a8c:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1a8e:	6013      	str	r3, [r2, #0]
}
    1a90:	2000      	movs	r0, #0
    1a92:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1a94:	4a16      	ldr	r2, [pc, #88]	; (1af0 <_timer_init+0x154>)
    1a96:	1853      	adds	r3, r2, r1
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1a9a:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1a9e:	6223      	str	r3, [r4, #32]
    1aa0:	e7c0      	b.n	1a24 <_timer_init+0x88>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    1aa2:	2b04      	cmp	r3, #4
    1aa4:	d1be      	bne.n	1a24 <_timer_init+0x88>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    1aa6:	4b12      	ldr	r3, [pc, #72]	; (1af0 <_timer_init+0x154>)
    1aa8:	00aa      	lsls	r2, r5, #2
    1aaa:	1951      	adds	r1, r2, r5
    1aac:	0089      	lsls	r1, r1, #2
    1aae:	1859      	adds	r1, r3, r1
    1ab0:	202c      	movs	r0, #44	; 0x2c
    1ab2:	1808      	adds	r0, r1, r0
    1ab4:	7800      	ldrb	r0, [r0, #0]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1ab6:	7720      	strb	r0, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    1ab8:	6b09      	ldr	r1, [r1, #48]	; 0x30
    1aba:	b2c9      	uxtb	r1, r1
    1abc:	7761      	strb	r1, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    1abe:	3320      	adds	r3, #32
    1ac0:	1952      	adds	r2, r2, r5
    1ac2:	0092      	lsls	r2, r2, #2
    1ac4:	189b      	adds	r3, r3, r2
    1ac6:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    1ac8:	76e3      	strb	r3, [r4, #27]
    1aca:	e7ab      	b.n	1a24 <_timer_init+0x88>
		_tc0_dev = (struct _timer_device *)dev;
    1acc:	4b0e      	ldr	r3, [pc, #56]	; (1b08 <_timer_init+0x16c>)
    1ace:	601e      	str	r6, [r3, #0]
    1ad0:	e7b3      	b.n	1a3a <_timer_init+0x9e>
		_tc2_dev = (struct _timer_device *)dev;
    1ad2:	4b0d      	ldr	r3, [pc, #52]	; (1b08 <_timer_init+0x16c>)
    1ad4:	605e      	str	r6, [r3, #4]
    1ad6:	e7b3      	b.n	1a40 <_timer_init+0xa4>
		_tc4_dev = (struct _timer_device *)dev;
    1ad8:	4b0b      	ldr	r3, [pc, #44]	; (1b08 <_timer_init+0x16c>)
    1ada:	609e      	str	r6, [r3, #8]
    1adc:	e7b0      	b.n	1a40 <_timer_init+0xa4>
		_tc6_dev = (struct _timer_device *)dev;
    1ade:	4b0a      	ldr	r3, [pc, #40]	; (1b08 <_timer_init+0x16c>)
    1ae0:	60de      	str	r6, [r3, #12]
    1ae2:	e7ad      	b.n	1a40 <_timer_init+0xa4>
    1ae4:	00001919 	.word	0x00001919
    1ae8:	00005740 	.word	0x00005740
    1aec:	00000ddd 	.word	0x00000ddd
    1af0:	000056d0 	.word	0x000056d0
    1af4:	42003000 	.word	0x42003000
    1af8:	42003800 	.word	0x42003800
    1afc:	42004000 	.word	0x42004000
    1b00:	43000c00 	.word	0x43000c00
    1b04:	e000e100 	.word	0xe000e100
    1b08:	200008b4 	.word	0x200008b4

00001b0c <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1b0c:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b0e:	2103      	movs	r1, #3
    1b10:	6913      	ldr	r3, [r2, #16]
    1b12:	4219      	tst	r1, r3
    1b14:	d1fc      	bne.n	1b10 <_timer_start+0x4>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1b16:	6813      	ldr	r3, [r2, #0]
    1b18:	2102      	movs	r1, #2
    1b1a:	430b      	orrs	r3, r1
    1b1c:	6013      	str	r3, [r2, #0]
}
    1b1e:	4770      	bx	lr

00001b20 <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    1b20:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b22:	2103      	movs	r1, #3
    1b24:	6913      	ldr	r3, [r2, #16]
    1b26:	4219      	tst	r1, r3
    1b28:	d1fc      	bne.n	1b24 <_timer_stop+0x4>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1b2a:	6813      	ldr	r3, [r2, #0]
    1b2c:	2102      	movs	r1, #2
    1b2e:	438b      	bics	r3, r1
    1b30:	6013      	str	r3, [r2, #0]
}
    1b32:	4770      	bx	lr

00001b34 <_timer_set_period>:
	void *const hw = device->hw;
    1b34:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    1b36:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1b38:	071b      	lsls	r3, r3, #28
    1b3a:	0f9b      	lsrs	r3, r3, #30
	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1b3c:	2b02      	cmp	r3, #2
    1b3e:	d00b      	beq.n	1b58 <_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    1b40:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1b42:	071b      	lsls	r3, r3, #28
    1b44:	0f9b      	lsrs	r3, r3, #30
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1b46:	d009      	beq.n	1b5c <_timer_set_period+0x28>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    1b48:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1b4a:	071b      	lsls	r3, r3, #28
    1b4c:	0f9b      	lsrs	r3, r3, #30
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1b4e:	2b01      	cmp	r3, #1
    1b50:	d106      	bne.n	1b60 <_timer_set_period+0x2c>
		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    1b52:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    1b54:	76d1      	strb	r1, [r2, #27]
}
    1b56:	e003      	b.n	1b60 <_timer_set_period+0x2c>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1b58:	61d1      	str	r1, [r2, #28]
    1b5a:	e001      	b.n	1b60 <_timer_set_period+0x2c>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    1b5c:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1b5e:	8391      	strh	r1, [r2, #28]
}
    1b60:	4770      	bx	lr

00001b62 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1b62:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b64:	2103      	movs	r1, #3
    1b66:	6913      	ldr	r3, [r2, #16]
    1b68:	4219      	tst	r1, r3
    1b6a:	d1fc      	bne.n	1b66 <_timer_is_started+0x4>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    1b6c:	6810      	ldr	r0, [r2, #0]
	return (bool)tmp;
    1b6e:	0780      	lsls	r0, r0, #30
    1b70:	0fc0      	lsrs	r0, r0, #31
}
    1b72:	4770      	bx	lr

00001b74 <_tc_get_timer>:
}
    1b74:	2000      	movs	r0, #0
    1b76:	4770      	bx	lr

00001b78 <_timer_set_irq>:
{
    1b78:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    1b7a:	68c0      	ldr	r0, [r0, #12]
    1b7c:	4b09      	ldr	r3, [pc, #36]	; (1ba4 <_timer_set_irq+0x2c>)
    1b7e:	4798      	blx	r3
    1b80:	0004      	movs	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    1b82:	221a      	movs	r2, #26
    1b84:	32ff      	adds	r2, #255	; 0xff
    1b86:	4908      	ldr	r1, [pc, #32]	; (1ba8 <_timer_set_irq+0x30>)
    1b88:	2001      	movs	r0, #1
    1b8a:	4b08      	ldr	r3, [pc, #32]	; (1bac <_timer_set_irq+0x34>)
    1b8c:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    1b8e:	00a0      	lsls	r0, r4, #2
    1b90:	1900      	adds	r0, r0, r4
    1b92:	0082      	lsls	r2, r0, #2
    1b94:	4806      	ldr	r0, [pc, #24]	; (1bb0 <_timer_set_irq+0x38>)
    1b96:	3020      	adds	r0, #32
    1b98:	1880      	adds	r0, r0, r2
    1b9a:	7840      	ldrb	r0, [r0, #1]
    1b9c:	4b05      	ldr	r3, [pc, #20]	; (1bb4 <_timer_set_irq+0x3c>)
    1b9e:	4798      	blx	r3
}
    1ba0:	bd10      	pop	{r4, pc}
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	00001919 	.word	0x00001919
    1ba8:	00005740 	.word	0x00005740
    1bac:	00000ddd 	.word	0x00000ddd
    1bb0:	000056d0 	.word	0x000056d0
    1bb4:	00000e79 	.word	0x00000e79

00001bb8 <INT20_Handler>:
{
    1bb8:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc0_dev);
    1bba:	4b02      	ldr	r3, [pc, #8]	; (1bc4 <INT20_Handler+0xc>)
    1bbc:	6818      	ldr	r0, [r3, #0]
    1bbe:	4b02      	ldr	r3, [pc, #8]	; (1bc8 <INT20_Handler+0x10>)
    1bc0:	4798      	blx	r3
}
    1bc2:	bd10      	pop	{r4, pc}
    1bc4:	200008b4 	.word	0x200008b4
    1bc8:	00001901 	.word	0x00001901

00001bcc <INT22_Handler>:
{
    1bcc:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc2_dev);
    1bce:	4b02      	ldr	r3, [pc, #8]	; (1bd8 <INT22_Handler+0xc>)
    1bd0:	6858      	ldr	r0, [r3, #4]
    1bd2:	4b02      	ldr	r3, [pc, #8]	; (1bdc <INT22_Handler+0x10>)
    1bd4:	4798      	blx	r3
}
    1bd6:	bd10      	pop	{r4, pc}
    1bd8:	200008b4 	.word	0x200008b4
    1bdc:	00001901 	.word	0x00001901

00001be0 <TC4_Handler>:
{
    1be0:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    1be2:	4b02      	ldr	r3, [pc, #8]	; (1bec <TC4_Handler+0xc>)
    1be4:	6898      	ldr	r0, [r3, #8]
    1be6:	4b02      	ldr	r3, [pc, #8]	; (1bf0 <TC4_Handler+0x10>)
    1be8:	4798      	blx	r3
}
    1bea:	bd10      	pop	{r4, pc}
    1bec:	200008b4 	.word	0x200008b4
    1bf0:	00001901 	.word	0x00001901

00001bf4 <INT21_Handler>:
{
    1bf4:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc6_dev);
    1bf6:	4b02      	ldr	r3, [pc, #8]	; (1c00 <INT21_Handler+0xc>)
    1bf8:	68d8      	ldr	r0, [r3, #12]
    1bfa:	4b02      	ldr	r3, [pc, #8]	; (1c04 <INT21_Handler+0x10>)
    1bfc:	4798      	blx	r3
}
    1bfe:	bd10      	pop	{r4, pc}
    1c00:	200008b4 	.word	0x200008b4
    1c04:	00001901 	.word	0x00001901

00001c08 <Init>:
	while (1) BandMain();
	
	return 0;
}

void Init(){
    1c08:	b570      	push	{r4, r5, r6, lr}
	MCUBusy = 0;
    1c0a:	2300      	movs	r3, #0
    1c0c:	4a36      	ldr	r2, [pc, #216]	; (1ce8 <Init+0xe0>)
    1c0e:	6013      	str	r3, [r2, #0]
	MCUSkip = false;
    1c10:	4a36      	ldr	r2, [pc, #216]	; (1cec <Init+0xe4>)
    1c12:	7013      	strb	r3, [r2, #0]
	atmel_start_init();
    1c14:	4b36      	ldr	r3, [pc, #216]	; (1cf0 <Init+0xe8>)
    1c16:	4798      	blx	r3
typedef uint8_t  hri_pm_sleepcfg_reg_t;

static inline void hri_pm_set_SLEEPCFG_SLEEPMODE_bf(const void *const hw, hri_pm_sleepcfg_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->SLEEPCFG.reg |= PM_SLEEPCFG_SLEEPMODE(mask);
    1c18:	4a36      	ldr	r2, [pc, #216]	; (1cf4 <Init+0xec>)
    1c1a:	7853      	ldrb	r3, [r2, #1]
    1c1c:	2102      	movs	r1, #2
    1c1e:	430b      	orrs	r3, r1
    1c20:	7053      	strb	r3, [r2, #1]

/// Functions

inline static void SetPowerMode(PowerMode mode){
	hri_pm_set_SLEEPCFG_SLEEPMODE_bf((void*)PM, (uint8)mode);
	delay_ms(2); // So the registers can update
    1c22:	2002      	movs	r0, #2
    1c24:	4b34      	ldr	r3, [pc, #208]	; (1cf8 <Init+0xf0>)
    1c26:	4798      	blx	r3
	InitPowerModule();
	InitEvents();
    1c28:	4b34      	ldr	r3, [pc, #208]	; (1cfc <Init+0xf4>)
    1c2a:	4798      	blx	r3
	InitTimers();
    1c2c:	4b34      	ldr	r3, [pc, #208]	; (1d00 <Init+0xf8>)
    1c2e:	4798      	blx	r3
	InitInterrupts();
    1c30:	4b34      	ldr	r3, [pc, #208]	; (1d04 <Init+0xfc>)
    1c32:	4798      	blx	r3
	InitI2C();
    1c34:	4b34      	ldr	r3, [pc, #208]	; (1d08 <Init+0x100>)
    1c36:	4798      	blx	r3
		MotorEnqueue("_------------------------------_");
	}
	
	/// Setting up accelerometer
	// Config Accelerometer
	if (i2cMaster != NULL){ // Make sure it's initialized
    1c38:	4b34      	ldr	r3, [pc, #208]	; (1d0c <Init+0x104>)
    1c3a:	681b      	ldr	r3, [r3, #0]
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d037      	beq.n	1cb0 <Init+0xa8>
		WriteReg(I2C_ACC_CONF_REG, I2C_ACC_CONF_US | I2C_ACC_CONF_BWP | I2C_ACC_CONF_ODR);
    1c40:	21a6      	movs	r1, #166	; 0xa6
    1c42:	2040      	movs	r0, #64	; 0x40
    1c44:	4c32      	ldr	r4, [pc, #200]	; (1d10 <Init+0x108>)
    1c46:	47a0      	blx	r4
		
		WriteReg(I2C_ACC_RANGE_REG, I2C_ACC_RANGE);
    1c48:	2103      	movs	r1, #3
    1c4a:	2041      	movs	r0, #65	; 0x41
    1c4c:	47a0      	blx	r4
		// Config Interrupts
		WriteReg(I2C_ACC_INT_EN0_REG, I2C_ACC_INT_EN0);
    1c4e:	2107      	movs	r1, #7
    1c50:	2050      	movs	r0, #80	; 0x50
    1c52:	47a0      	blx	r4
		WriteReg(I2C_ACC_INT_EN1_REG, I2C_ACC_INT_EN1);
    1c54:	2100      	movs	r1, #0
    1c56:	2051      	movs	r0, #81	; 0x51
    1c58:	47a0      	blx	r4
		WriteReg(I2C_ACC_INT_EN2_REG, I2C_ACC_INT_EN2);
    1c5a:	2107      	movs	r1, #7
    1c5c:	2052      	movs	r0, #82	; 0x52
    1c5e:	47a0      	blx	r4
		
		WriteReg(I2C_ACC_INT_OUT_CTRL_REG, I2C_ACC_INT_OUT_CTRL);
    1c60:	210f      	movs	r1, #15
    1c62:	2053      	movs	r0, #83	; 0x53
    1c64:	47a0      	blx	r4

		WriteReg(I2C_ACC_INT_MAP0_REG, I2C_ACC_INT_MAP0);
    1c66:	21ff      	movs	r1, #255	; 0xff
    1c68:	2055      	movs	r0, #85	; 0x55
    1c6a:	47a0      	blx	r4
		WriteReg(I2C_ACC_INT_MAP1_REG, I2C_ACC_INT_MAP1);
    1c6c:	21f0      	movs	r1, #240	; 0xf0
    1c6e:	2056      	movs	r0, #86	; 0x56
    1c70:	47a0      	blx	r4
		WriteReg(I2C_ACC_INT_MAP2_REG, I2C_ACC_INT_MAP2);
    1c72:	2100      	movs	r1, #0
    1c74:	2057      	movs	r0, #87	; 0x57
    1c76:	47a0      	blx	r4

		WriteReg(I2C_ACC_INT_MOTION0_REG, I2C_ACC_INT_MOTION0_SLONO_DUR | I2C_ACC_INT_MOTION0_ANYM_DUR);
    1c78:	2100      	movs	r1, #0
    1c7a:	205f      	movs	r0, #95	; 0x5f
    1c7c:	47a0      	blx	r4
		WriteReg(I2C_ACC_INT_MOTION1_REG, I2C_ACC_INT_MOTION1);
    1c7e:	2114      	movs	r1, #20
    1c80:	2060      	movs	r0, #96	; 0x60
    1c82:	47a0      	blx	r4
		WriteReg(I2C_ACC_INT_MOTION2_REG, I2C_ACC_INT_MOTION2);
    1c84:	2114      	movs	r1, #20
    1c86:	2061      	movs	r0, #97	; 0x61
    1c88:	47a0      	blx	r4
		WriteReg(I2C_ACC_INT_MOTION3_REG, I2C_ACC_INT_MOTION3_SIG_MOT_PROOF | I2C_ACC_INT_MOTION3_SIG_MOT_SKIP | I2C_ACC_INT_MOTION3_SIG_MOT_SEL | I2C_ACC_INT_MOTION3_NO_MOT_SEL);
    1c8a:	2102      	movs	r1, #2
    1c8c:	2062      	movs	r0, #98	; 0x62
    1c8e:	47a0      	blx	r4

		// Set Power modes
		WriteReg(I2C_ACC_CMD, I2C_ACC_CMD_ACC_POWER_MODE | I2C_ACC_CMD_LOWPOWER);
    1c90:	2112      	movs	r1, #18
    1c92:	207e      	movs	r0, #126	; 0x7e
    1c94:	47a0      	blx	r4
		delay_ms(I2C_ACC_CMD_ACC_WAIT_TIME);
    1c96:	2005      	movs	r0, #5
    1c98:	4d17      	ldr	r5, [pc, #92]	; (1cf8 <Init+0xf0>)
    1c9a:	47a8      	blx	r5
		
		WriteReg(I2C_ACC_CMD, I2C_ACC_CMD_GYR_POWER_MODE | I2C_ACC_CMD_SUSPEND);
    1c9c:	2114      	movs	r1, #20
    1c9e:	207e      	movs	r0, #126	; 0x7e
    1ca0:	47a0      	blx	r4
		delay_ms(I2C_ACC_CMD_GYR_WAIT_TIME);
    1ca2:	2051      	movs	r0, #81	; 0x51
    1ca4:	47a8      	blx	r5
		
		WriteReg(I2C_ACC_CMD, I2C_ACC_CMD_MAG_POWER_MODE | I2C_ACC_CMD_SUSPEND);
    1ca6:	2118      	movs	r1, #24
    1ca8:	207e      	movs	r0, #126	; 0x7e
    1caa:	47a0      	blx	r4
		delay_ms(I2C_ACC_CMD_MAG_WAIT_TIME);
    1cac:	2001      	movs	r0, #1
    1cae:	47a8      	blx	r5
	}
	
	/// Setting up BlueTooth
	
	/// Other
	isHost = false;
    1cb0:	2300      	movs	r3, #0
    1cb2:	4a18      	ldr	r2, [pc, #96]	; (1d14 <Init+0x10c>)
    1cb4:	7013      	strb	r3, [r2, #0]
	connected = false;
    1cb6:	4a18      	ldr	r2, [pc, #96]	; (1d18 <Init+0x110>)
    1cb8:	7013      	strb	r3, [r2, #0]
	bandRange = STARTING_BANDRANGE;
    1cba:	2101      	movs	r1, #1
    1cbc:	4a17      	ldr	r2, [pc, #92]	; (1d1c <Init+0x114>)
    1cbe:	7011      	strb	r1, [r2, #0]
	button = false;
    1cc0:	4a17      	ldr	r2, [pc, #92]	; (1d20 <Init+0x118>)
    1cc2:	7013      	strb	r3, [r2, #0]
	led = LEDW;
    1cc4:	3114      	adds	r1, #20
    1cc6:	4a17      	ldr	r2, [pc, #92]	; (1d24 <Init+0x11c>)
    1cc8:	6011      	str	r1, [r2, #0]
// Name: ResetTimerCount
// Desc: Resets the count of the given timer.
// Input: (struct timer_descriptor*) timer: The timer to reset the count of.
*/
inline static void ResetTimerCount(struct timer_descriptor* timer){
	hri_tccount16_write_COUNT_reg(timer->device.hw, 0);
    1cca:	4817      	ldr	r0, [pc, #92]	; (1d28 <Init+0x120>)
	((Tc *)hw)->COUNT16.COUNT.reg = data;
    1ccc:	68c2      	ldr	r2, [r0, #12]
    1cce:	8293      	strh	r3, [r2, #20]
// Desc: Starts/Restarts the given timer. the timer needs to be disabled before a restart.
// Input: (struct timer_descriptor*) timer: The timer to start/restart.
*/
inline static void EnableTimer(struct timer_descriptor* timer){
	ResetTimerCount(timer);
	timer_start(timer);
    1cd0:	4b16      	ldr	r3, [pc, #88]	; (1d2c <Init+0x124>)
    1cd2:	4798      	blx	r3
	
	EnableTimer(&TIMER0);
	InitNormal();
    1cd4:	4b16      	ldr	r3, [pc, #88]	; (1d30 <Init+0x128>)
    1cd6:	4798      	blx	r3
	static const bool testing = false;
	if (testing){
		MotorEnqueue("_-_-_");
	}
	else{
		MotorEnqueue("_-_-_");
    1cd8:	4816      	ldr	r0, [pc, #88]	; (1d34 <Init+0x12c>)
    1cda:	4b17      	ldr	r3, [pc, #92]	; (1d38 <Init+0x130>)
    1cdc:	4798      	blx	r3
		LEDEnqueue(LED, "+=+=+");
    1cde:	4917      	ldr	r1, [pc, #92]	; (1d3c <Init+0x134>)
    1ce0:	2045      	movs	r0, #69	; 0x45
    1ce2:	4b17      	ldr	r3, [pc, #92]	; (1d40 <Init+0x138>)
    1ce4:	4798      	blx	r3
	}
		
}
    1ce6:	bd70      	pop	{r4, r5, r6, pc}
    1ce8:	20000bb4 	.word	0x20000bb4
    1cec:	20000c1c 	.word	0x20000c1c
    1cf0:	0000011d 	.word	0x0000011d
    1cf4:	40000400 	.word	0x40000400
    1cf8:	00000799 	.word	0x00000799
    1cfc:	00002095 	.word	0x00002095
    1d00:	00002e11 	.word	0x00002e11
    1d04:	00002075 	.word	0x00002075
    1d08:	00001f2d 	.word	0x00001f2d
    1d0c:	20000c74 	.word	0x20000c74
    1d10:	00001f61 	.word	0x00001f61
    1d14:	20000c7c 	.word	0x20000c7c
    1d18:	20000c25 	.word	0x20000c25
    1d1c:	20000c7d 	.word	0x20000c7d
    1d20:	20000c1d 	.word	0x20000c1d
    1d24:	20000c20 	.word	0x20000c20
    1d28:	20000a5c 	.word	0x20000a5c
    1d2c:	00000b5d 	.word	0x00000b5d
    1d30:	000024f9 	.word	0x000024f9
    1d34:	00005754 	.word	0x00005754
    1d38:	000029f5 	.word	0x000029f5
    1d3c:	0000575c 	.word	0x0000575c
    1d40:	00001e15 	.word	0x00001e15

00001d44 <main>:
{
    1d44:	b510      	push	{r4, lr}
	Init();
    1d46:	4b02      	ldr	r3, [pc, #8]	; (1d50 <main+0xc>)
    1d48:	4798      	blx	r3
	while (1) BandMain();
    1d4a:	4c02      	ldr	r4, [pc, #8]	; (1d54 <main+0x10>)
    1d4c:	47a0      	blx	r4
    1d4e:	e7fd      	b.n	1d4c <main+0x8>
    1d50:	00001c09 	.word	0x00001c09
    1d54:	00001db1 	.word	0x00001db1

00001d58 <HandleUpdates>:
	if (MCUBusy)
		goto SLEEP; // In the short amount of time it took to run IsEmpty, an interrupt happened... sigh...
	GoToSleep();
}

void HandleUpdates(){
    1d58:	b510      	push	{r4, lr}
	switch (bandState){
    1d5a:	4b0d      	ldr	r3, [pc, #52]	; (1d90 <HandleUpdates+0x38>)
    1d5c:	781a      	ldrb	r2, [r3, #0]
    1d5e:	2a06      	cmp	r2, #6
    1d60:	d805      	bhi.n	1d6e <HandleUpdates+0x16>
    1d62:	0093      	lsls	r3, r2, #2
    1d64:	4a0b      	ldr	r2, [pc, #44]	; (1d94 <HandleUpdates+0x3c>)
    1d66:	58d3      	ldr	r3, [r2, r3]
    1d68:	469f      	mov	pc, r3
		case BANDSTATE_DISPLAY:			UpdateDisplay(); break;
    1d6a:	4b0b      	ldr	r3, [pc, #44]	; (1d98 <HandleUpdates+0x40>)
    1d6c:	4798      	blx	r3
		case BANDSTATE_DISCONNECTING:	UpdateDisconnecting(); break;
		case BANDSTATE_LOWPOWER:		UpdateLowPower(); break;
		case BANDSTATE_SLEEP:			UpdateSleep(); break;
		default: break;
	}
}
    1d6e:	bd10      	pop	{r4, pc}
		case BANDSTATE_NORMAL:			UpdateNormal(); break;
    1d70:	4b0a      	ldr	r3, [pc, #40]	; (1d9c <HandleUpdates+0x44>)
    1d72:	4798      	blx	r3
    1d74:	e7fb      	b.n	1d6e <HandleUpdates+0x16>
		case BANDSTATE_CONNECTING:		UpdateConnecting(); break;
    1d76:	4b0a      	ldr	r3, [pc, #40]	; (1da0 <HandleUpdates+0x48>)
    1d78:	4798      	blx	r3
    1d7a:	e7f8      	b.n	1d6e <HandleUpdates+0x16>
		case BANDSTATE_DISCONNECTING:	UpdateDisconnecting(); break;
    1d7c:	4b09      	ldr	r3, [pc, #36]	; (1da4 <HandleUpdates+0x4c>)
    1d7e:	4798      	blx	r3
    1d80:	e7f5      	b.n	1d6e <HandleUpdates+0x16>
		case BANDSTATE_LOWPOWER:		UpdateLowPower(); break;
    1d82:	4b09      	ldr	r3, [pc, #36]	; (1da8 <HandleUpdates+0x50>)
    1d84:	4798      	blx	r3
    1d86:	e7f2      	b.n	1d6e <HandleUpdates+0x16>
		case BANDSTATE_SLEEP:			UpdateSleep(); break;
    1d88:	4b08      	ldr	r3, [pc, #32]	; (1dac <HandleUpdates+0x54>)
    1d8a:	4798      	blx	r3
}
    1d8c:	e7ef      	b.n	1d6e <HandleUpdates+0x16>
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	20000c24 	.word	0x20000c24
    1d94:	00005764 	.word	0x00005764
    1d98:	000022d5 	.word	0x000022d5
    1d9c:	00002531 	.word	0x00002531
    1da0:	000025b5 	.word	0x000025b5
    1da4:	000026f5 	.word	0x000026f5
    1da8:	000028f1 	.word	0x000028f1
    1dac:	00002991 	.word	0x00002991

00001db0 <BandMain>:
void BandMain(){
    1db0:	b570      	push	{r4, r5, r6, lr}
	if (MCUSkip){ // Non important event skips; Skips events and updates (only if there are no events queued)
    1db2:	4b11      	ldr	r3, [pc, #68]	; (1df8 <BandMain+0x48>)
    1db4:	781b      	ldrb	r3, [r3, #0]
    1db6:	2b00      	cmp	r3, #0
    1db8:	d005      	beq.n	1dc6 <BandMain+0x16>
		MCUSkip = false;
    1dba:	2200      	movs	r2, #0
    1dbc:	4b0e      	ldr	r3, [pc, #56]	; (1df8 <BandMain+0x48>)
    1dbe:	701a      	strb	r2, [r3, #0]
	while (MCUBusy); // Wait for running interrupts to finish
    1dc0:	4c0e      	ldr	r4, [pc, #56]	; (1dfc <BandMain+0x4c>)
// Desc: Returns if the given queue has no queued elements.
// Input: (struct Queue*) queue: The queue to check for emptiness.
// Return: (bool) True if the queue is empty, else false. Function will always return a
//                value, even if there is an error; in which case, the value will be true.
inline bool QUE_IsEmpty(volatile struct Queue* queue){
	return queue->size == 0;
    1dc2:	4d0f      	ldr	r5, [pc, #60]	; (1e00 <BandMain+0x50>)
    1dc4:	e00c      	b.n	1de0 <BandMain+0x30>
	HandleEvents();
    1dc6:	4b0f      	ldr	r3, [pc, #60]	; (1e04 <BandMain+0x54>)
    1dc8:	4798      	blx	r3
	HandleUpdates();
    1dca:	4b0f      	ldr	r3, [pc, #60]	; (1e08 <BandMain+0x58>)
    1dcc:	4798      	blx	r3
    1dce:	e7f7      	b.n	1dc0 <BandMain+0x10>
    1dd0:	4b0b      	ldr	r3, [pc, #44]	; (1e00 <BandMain+0x50>)
    1dd2:	689b      	ldr	r3, [r3, #8]
	if (!QUE_IsEmpty(&eventQueue))
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	d1f6      	bne.n	1dc6 <BandMain+0x16>
	if (MCUBusy)
    1dd8:	4b08      	ldr	r3, [pc, #32]	; (1dfc <BandMain+0x4c>)
    1dda:	681b      	ldr	r3, [r3, #0]
    1ddc:	2b00      	cmp	r3, #0
    1dde:	d008      	beq.n	1df2 <BandMain+0x42>
	while (MCUBusy); // Wait for running interrupts to finish
    1de0:	6823      	ldr	r3, [r4, #0]
    1de2:	2b00      	cmp	r3, #0
    1de4:	d1fc      	bne.n	1de0 <BandMain+0x30>
    1de6:	68ab      	ldr	r3, [r5, #8]
	if (!QUE_IsEmpty(&eventQueue)){
    1de8:	2b00      	cmp	r3, #0
    1dea:	d0f1      	beq.n	1dd0 <BandMain+0x20>
		HandleUpdates();
    1dec:	4b06      	ldr	r3, [pc, #24]	; (1e08 <BandMain+0x58>)
    1dee:	4798      	blx	r3
    1df0:	e7ee      	b.n	1dd0 <BandMain+0x20>
}

inline static void GoToSleep(void){
	_go_to_sleep();
    1df2:	4b06      	ldr	r3, [pc, #24]	; (1e0c <BandMain+0x5c>)
    1df4:	4798      	blx	r3
}
    1df6:	bd70      	pop	{r4, r5, r6, pc}
    1df8:	20000c1c 	.word	0x20000c1c
    1dfc:	20000bb4 	.word	0x20000bb4
    1e00:	20000bf8 	.word	0x20000bf8
    1e04:	000020c5 	.word	0x000020c5
    1e08:	00001d59 	.word	0x00001d59
    1e0c:	00000e71 	.word	0x00000e71

00001e10 <ForceBreakAway>:

/// Other

void ForceBreakAway(void){
	// Disconnect from everything immediately with no notifications, updating, initializing or closing anything.
}
    1e10:	4770      	bx	lr
	...

00001e14 <LEDEnqueue>:
	
void FireAlarm(void) { /* Empty */ }
	
/// LED Section

void LEDEnqueue(uint pin, const char* const instructions){
    1e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static struct timer_task task = { .cb = TIMER_CALLBACK, .mode = TIMER_TASK_ONE_SHOT, .interval = 1, };
	static struct QueueInst inst;
	static const char* temp;
	
	inst.misc = pin;
    1e16:	4b1d      	ldr	r3, [pc, #116]	; (1e8c <LEDEnqueue+0x78>)
    1e18:	6058      	str	r0, [r3, #4]
	temp = instructions;
    1e1a:	6099      	str	r1, [r3, #8]
	while (*temp != '\0'){
    1e1c:	780b      	ldrb	r3, [r1, #0]
    1e1e:	2b00      	cmp	r3, #0
    1e20:	d020      	beq.n	1e64 <LEDEnqueue+0x50>
			case '.':
			case '^':
			case '*': inst.type = INST_LED_ON; break;
			case '_':
			case '=': inst.type = INST_LED_OFF; break;
			default: inst.type = INST_NOP; break;
    1e22:	4e1a      	ldr	r6, [pc, #104]	; (1e8c <LEDEnqueue+0x78>)
			case '*': inst.type = INST_LED_ON; break;
    1e24:	0035      	movs	r5, r6
			case '=': inst.type = INST_LED_OFF; break;
    1e26:	0034      	movs	r4, r6
    1e28:	e00f      	b.n	1e4a <LEDEnqueue+0x36>
		switch (*temp){
    1e2a:	3b2a      	subs	r3, #42	; 0x2a
    1e2c:	2b04      	cmp	r3, #4
    1e2e:	d813      	bhi.n	1e58 <LEDEnqueue+0x44>
			case '*': inst.type = INST_LED_ON; break;
    1e30:	2305      	movs	r3, #5
    1e32:	702b      	strb	r3, [r5, #0]
		}
		QUE_Enqueue(&task4, &inst);
    1e34:	4f15      	ldr	r7, [pc, #84]	; (1e8c <LEDEnqueue+0x78>)
    1e36:	0039      	movs	r1, r7
    1e38:	4815      	ldr	r0, [pc, #84]	; (1e90 <LEDEnqueue+0x7c>)
    1e3a:	4b16      	ldr	r3, [pc, #88]	; (1e94 <LEDEnqueue+0x80>)
    1e3c:	4798      	blx	r3
		temp++;
    1e3e:	68bb      	ldr	r3, [r7, #8]
    1e40:	1c5a      	adds	r2, r3, #1
    1e42:	60ba      	str	r2, [r7, #8]
	while (*temp != '\0'){
    1e44:	785b      	ldrb	r3, [r3, #1]
    1e46:	2b00      	cmp	r3, #0
    1e48:	d00c      	beq.n	1e64 <LEDEnqueue+0x50>
		switch (*temp){
    1e4a:	2b3d      	cmp	r3, #61	; 0x3d
    1e4c:	d007      	beq.n	1e5e <LEDEnqueue+0x4a>
    1e4e:	d9ec      	bls.n	1e2a <LEDEnqueue+0x16>
    1e50:	2b5e      	cmp	r3, #94	; 0x5e
    1e52:	d0ed      	beq.n	1e30 <LEDEnqueue+0x1c>
    1e54:	2b5f      	cmp	r3, #95	; 0x5f
    1e56:	d002      	beq.n	1e5e <LEDEnqueue+0x4a>
			default: inst.type = INST_NOP; break;
    1e58:	2300      	movs	r3, #0
    1e5a:	7033      	strb	r3, [r6, #0]
    1e5c:	e7ea      	b.n	1e34 <LEDEnqueue+0x20>
			case '=': inst.type = INST_LED_OFF; break;
    1e5e:	2306      	movs	r3, #6
    1e60:	7023      	strb	r3, [r4, #0]
    1e62:	e7e7      	b.n	1e34 <LEDEnqueue+0x20>
	}
	
	if (!_timer_is_started(&TIMER3.device) && !QUE_IsEmpty(&task4)){
    1e64:	480c      	ldr	r0, [pc, #48]	; (1e98 <LEDEnqueue+0x84>)
    1e66:	4b0d      	ldr	r3, [pc, #52]	; (1e9c <LEDEnqueue+0x88>)
    1e68:	4798      	blx	r3
    1e6a:	2800      	cmp	r0, #0
    1e6c:	d103      	bne.n	1e76 <LEDEnqueue+0x62>
    1e6e:	4b08      	ldr	r3, [pc, #32]	; (1e90 <LEDEnqueue+0x7c>)
    1e70:	689b      	ldr	r3, [r3, #8]
    1e72:	2b00      	cmp	r3, #0
    1e74:	d100      	bne.n	1e78 <LEDEnqueue+0x64>
		timer_add_task(&TIMER3, &task);
		timer_start(&TIMER3);
	}
}
    1e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		timer_add_task(&TIMER3, &task);
    1e78:	4c07      	ldr	r4, [pc, #28]	; (1e98 <LEDEnqueue+0x84>)
    1e7a:	4909      	ldr	r1, [pc, #36]	; (1ea0 <LEDEnqueue+0x8c>)
    1e7c:	0020      	movs	r0, r4
    1e7e:	4b09      	ldr	r3, [pc, #36]	; (1ea4 <LEDEnqueue+0x90>)
    1e80:	4798      	blx	r3
		timer_start(&TIMER3);
    1e82:	0020      	movs	r0, r4
    1e84:	4b08      	ldr	r3, [pc, #32]	; (1ea8 <LEDEnqueue+0x94>)
    1e86:	4798      	blx	r3
}
    1e88:	e7f5      	b.n	1e76 <LEDEnqueue+0x62>
    1e8a:	46c0      	nop			; (mov r8, r8)
    1e8c:	200008c4 	.word	0x200008c4
    1e90:	20000b80 	.word	0x20000b80
    1e94:	000001e5 	.word	0x000001e5
    1e98:	20000a40 	.word	0x20000a40
    1e9c:	00001b63 	.word	0x00001b63
    1ea0:	20000000 	.word	0x20000000
    1ea4:	00000c01 	.word	0x00000c01
    1ea8:	00000b5d 	.word	0x00000b5d

00001eac <LEDClearQueue>:

void LEDClearQueue(){
    1eac:	b570      	push	{r4, r5, r6, lr}
    1eae:	4b06      	ldr	r3, [pc, #24]	; (1ec8 <LEDClearQueue+0x1c>)
    1eb0:	689b      	ldr	r3, [r3, #8]
	while (!QUE_IsEmpty(&task4)){
    1eb2:	2b00      	cmp	r3, #0
    1eb4:	d007      	beq.n	1ec6 <LEDClearQueue+0x1a>
		QUE_Dequeue(&task4, NULL);
    1eb6:	4c04      	ldr	r4, [pc, #16]	; (1ec8 <LEDClearQueue+0x1c>)
    1eb8:	4d04      	ldr	r5, [pc, #16]	; (1ecc <LEDClearQueue+0x20>)
    1eba:	2100      	movs	r1, #0
    1ebc:	0020      	movs	r0, r4
    1ebe:	47a8      	blx	r5
    1ec0:	68a3      	ldr	r3, [r4, #8]
	while (!QUE_IsEmpty(&task4)){
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	d1f9      	bne.n	1eba <LEDClearQueue+0xe>
	}
}
    1ec6:	bd70      	pop	{r4, r5, r6, pc}
    1ec8:	20000b80 	.word	0x20000b80
    1ecc:	00000231 	.word	0x00000231

00001ed0 <LEDDelay>:

bool LEDIsIdle(){
	return QUE_IsEmpty(&task4) && !_timer_is_started(&TIMER3.device);
}

void LEDDelay(uint milliseconds){
    1ed0:	b570      	push	{r4, r5, r6, lr}
	uint delay = milliseconds / TIMER_LENGTH;
    1ed2:	4b0f      	ldr	r3, [pc, #60]	; (1f10 <LEDDelay+0x40>)
    1ed4:	4798      	blx	r3
    1ed6:	2200      	movs	r2, #0
    1ed8:	4b0e      	ldr	r3, [pc, #56]	; (1f14 <LEDDelay+0x44>)
    1eda:	4c0f      	ldr	r4, [pc, #60]	; (1f18 <LEDDelay+0x48>)
    1edc:	47a0      	blx	r4
    1ede:	4b0f      	ldr	r3, [pc, #60]	; (1f1c <LEDDelay+0x4c>)
    1ee0:	4798      	blx	r3
    1ee2:	0004      	movs	r4, r0
	char* const inst = malloc(delay + 1);
    1ee4:	3001      	adds	r0, #1
    1ee6:	4b0e      	ldr	r3, [pc, #56]	; (1f20 <LEDDelay+0x50>)
    1ee8:	4798      	blx	r3
    1eea:	0005      	movs	r5, r0
	
	for (uint i = 0; i < delay; i++)
    1eec:	2c00      	cmp	r4, #0
    1eee:	d006      	beq.n	1efe <LEDDelay+0x2e>
    1ef0:	0003      	movs	r3, r0
    1ef2:	1904      	adds	r4, r0, r4
		inst[i] = '$'; // NOP
    1ef4:	2224      	movs	r2, #36	; 0x24
    1ef6:	701a      	strb	r2, [r3, #0]
    1ef8:	3301      	adds	r3, #1
	for (uint i = 0; i < delay; i++)
    1efa:	42a3      	cmp	r3, r4
    1efc:	d1fb      	bne.n	1ef6 <LEDDelay+0x26>
	LEDEnqueue(0, inst);
    1efe:	0029      	movs	r1, r5
    1f00:	2000      	movs	r0, #0
    1f02:	4b08      	ldr	r3, [pc, #32]	; (1f24 <LEDDelay+0x54>)
    1f04:	4798      	blx	r3
	
	free(inst);
    1f06:	0028      	movs	r0, r5
    1f08:	4b07      	ldr	r3, [pc, #28]	; (1f28 <LEDDelay+0x58>)
    1f0a:	4798      	blx	r3
    1f0c:	bd70      	pop	{r4, r5, r6, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	00004785 	.word	0x00004785
    1f14:	40711700 	.word	0x40711700
    1f18:	00003589 	.word	0x00003589
    1f1c:	00003085 	.word	0x00003085
    1f20:	00004bd9 	.word	0x00004bd9
    1f24:	00001e15 	.word	0x00001e15
    1f28:	00004bed 	.word	0x00004bed

00001f2c <InitI2C>:
#include "i2c.h"
#include "driver_init.h"

/// Function Definitions

void InitI2C(){
    1f2c:	b510      	push	{r4, lr}
	i2c_m_sync_get_io_descriptor(&I2C, &i2cMaster);
    1f2e:	4c07      	ldr	r4, [pc, #28]	; (1f4c <InitI2C+0x20>)
    1f30:	4907      	ldr	r1, [pc, #28]	; (1f50 <InitI2C+0x24>)
    1f32:	0020      	movs	r0, r4
    1f34:	4b07      	ldr	r3, [pc, #28]	; (1f54 <InitI2C+0x28>)
    1f36:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&I2C, I2C_MOTION_ADDRESS, I2C_M_SEVEN);
    1f38:	2280      	movs	r2, #128	; 0x80
    1f3a:	0112      	lsls	r2, r2, #4
    1f3c:	2168      	movs	r1, #104	; 0x68
    1f3e:	0020      	movs	r0, r4
    1f40:	4b05      	ldr	r3, [pc, #20]	; (1f58 <InitI2C+0x2c>)
    1f42:	4798      	blx	r3

/// Function Declarations

void InitI2C(void);
inline void EnableI2C(void) {
	i2c_m_sync_enable(&I2C);
    1f44:	0020      	movs	r0, r4
    1f46:	4b05      	ldr	r3, [pc, #20]	; (1f5c <InitI2C+0x30>)
    1f48:	4798      	blx	r3
	EnableI2C();
}
    1f4a:	bd10      	pop	{r4, pc}
    1f4c:	200009f8 	.word	0x200009f8
    1f50:	20000c74 	.word	0x20000c74
    1f54:	00000a15 	.word	0x00000a15
    1f58:	000009b9 	.word	0x000009b9
    1f5c:	000009ad 	.word	0x000009ad

00001f60 <WriteReg>:
		if (timeout++ >= I2C_GENERAL_TIMEOUT)
		break;
	}
}

void WriteReg(uint8 regAddr, uint8 data){
    1f60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f62:	b083      	sub	sp, #12
    1f64:	0006      	movs	r6, r0
    1f66:	466b      	mov	r3, sp
    1f68:	71d9      	strb	r1, [r3, #7]
	int timeout = 0;
	while (i2c_m_sync_cmd_write(&I2C, regAddr, &data, 1) == 0){
    1f6a:	4c08      	ldr	r4, [pc, #32]	; (1f8c <WriteReg+0x2c>)
    1f6c:	4d08      	ldr	r5, [pc, #32]	; (1f90 <WriteReg+0x30>)
    1f6e:	4f09      	ldr	r7, [pc, #36]	; (1f94 <WriteReg+0x34>)
    1f70:	2301      	movs	r3, #1
    1f72:	466a      	mov	r2, sp
    1f74:	3207      	adds	r2, #7
    1f76:	0031      	movs	r1, r6
    1f78:	0028      	movs	r0, r5
    1f7a:	47b8      	blx	r7
    1f7c:	2800      	cmp	r0, #0
    1f7e:	d102      	bne.n	1f86 <WriteReg+0x26>
    1f80:	3c01      	subs	r4, #1
		if (timeout++ >= I2C_GENERAL_TIMEOUT)
    1f82:	2c00      	cmp	r4, #0
    1f84:	d1f4      	bne.n	1f70 <WriteReg+0x10>
		break;
	}
}
    1f86:	b003      	add	sp, #12
    1f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f8a:	46c0      	nop			; (mov r8, r8)
    1f8c:	000003e9 	.word	0x000003e9
    1f90:	200009f8 	.word	0x200009f8
    1f94:	000009cd 	.word	0x000009cd

00001f98 <ISR_Button>:
void InitInterrupts(){
	ext_irq_register(BUTTON, ISR_Button);
	ext_irq_register(ACCEL, ISR_Accelerometer);
}

void ISR_Button(){
    1f98:	b530      	push	{r4, r5, lr}
    1f9a:	b083      	sub	sp, #12
// Name: DisableInterrupt
// Desc: Disables the interrupt on the given pin.
// Input: (uint) pin: the pin to disable interrupts on.
*/
inline void DisableInterrupt(uint pin){
	ext_irq_disable(pin);
    1f9c:	2033      	movs	r0, #51	; 0x33
    1f9e:	4b18      	ldr	r3, [pc, #96]	; (2000 <STACK_SIZE>)
    1fa0:	4798      	blx	r3
	static struct EventMessage message;
	static bool state = false;
	
	/**/BEGIN:/**/
	DisableInterrupt(BUTTON);
	MCUBusy++;
    1fa2:	4d18      	ldr	r5, [pc, #96]	; (2004 <STACK_SIZE+0x4>)
    1fa4:	682b      	ldr	r3, [r5, #0]
    1fa6:	3301      	adds	r3, #1
    1fa8:	602b      	str	r3, [r5, #0]
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1faa:	a801      	add	r0, sp, #4
    1fac:	4b16      	ldr	r3, [pc, #88]	; (2008 <STACK_SIZE+0x8>)
    1fae:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1fb0:	23c0      	movs	r3, #192	; 0xc0
    1fb2:	05db      	lsls	r3, r3, #23
    1fb4:	2280      	movs	r2, #128	; 0x80
    1fb6:	589c      	ldr	r4, [r3, r2]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1fb8:	3220      	adds	r2, #32
    1fba:	2182      	movs	r1, #130	; 0x82
    1fbc:	05c9      	lsls	r1, r1, #23
    1fbe:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1fc0:	2190      	movs	r1, #144	; 0x90
    1fc2:	585b      	ldr	r3, [r3, r1]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1fc4:	4053      	eors	r3, r2
    1fc6:	401c      	ands	r4, r3
    1fc8:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    1fca:	a801      	add	r0, sp, #4
    1fcc:	4b0f      	ldr	r3, [pc, #60]	; (200c <STACK_SIZE+0xc>)
    1fce:	4798      	blx	r3
	
	state = ButtonPressed;
	message.eventType = EVENT_BUTTON;
    1fd0:	490f      	ldr	r1, [pc, #60]	; (2010 <STACK_SIZE+0x10>)
    1fd2:	2300      	movs	r3, #0
    1fd4:	700b      	strb	r3, [r1, #0]
	message.eventBandState = (uint8)bandState;
    1fd6:	4b0f      	ldr	r3, [pc, #60]	; (2014 <STACK_SIZE+0x14>)
    1fd8:	781b      	ldrb	r3, [r3, #0]
    1fda:	704b      	strb	r3, [r1, #1]
	state = ButtonPressed;
    1fdc:	0ce4      	lsrs	r4, r4, #19
    1fde:	2301      	movs	r3, #1
    1fe0:	405c      	eors	r4, r3
    1fe2:	401c      	ands	r4, r3
	message.eventInfo[0] = state;
    1fe4:	708c      	strb	r4, [r1, #2]
	QUE_Enqueue(writeEventQueue, &message);
    1fe6:	4b0c      	ldr	r3, [pc, #48]	; (2018 <STACK_SIZE+0x18>)
    1fe8:	6818      	ldr	r0, [r3, #0]
    1fea:	4b0c      	ldr	r3, [pc, #48]	; (201c <STACK_SIZE+0x1c>)
    1fec:	4798      	blx	r3
	ext_irq_enable(pin);
    1fee:	2033      	movs	r0, #51	; 0x33
    1ff0:	4b0b      	ldr	r3, [pc, #44]	; (2020 <STACK_SIZE+0x20>)
    1ff2:	4798      	blx	r3
	
	/**/END:/**/
	EnableInterrupt(BUTTON);
	MCUBusy--;
    1ff4:	682b      	ldr	r3, [r5, #0]
    1ff6:	3b01      	subs	r3, #1
    1ff8:	602b      	str	r3, [r5, #0]
}
    1ffa:	b003      	add	sp, #12
    1ffc:	bd30      	pop	{r4, r5, pc}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	000008fd 	.word	0x000008fd
    2004:	20000bb4 	.word	0x20000bb4
    2008:	00000769 	.word	0x00000769
    200c:	00000777 	.word	0x00000777
    2010:	200008e8 	.word	0x200008e8
    2014:	20000c24 	.word	0x20000c24
    2018:	20000a7c 	.word	0x20000a7c
    201c:	000001e5 	.word	0x000001e5
    2020:	000008ed 	.word	0x000008ed

00002024 <ISR_Accelerometer>:

void ISR_Accelerometer(){
    2024:	b510      	push	{r4, lr}
	ext_irq_disable(pin);
    2026:	2058      	movs	r0, #88	; 0x58
    2028:	4b0c      	ldr	r3, [pc, #48]	; (205c <ISR_Accelerometer+0x38>)
    202a:	4798      	blx	r3
	/**/BEGIN:/**/
	DisableInterrupt(ACCEL);
	MCUBusy++;
    202c:	4a0c      	ldr	r2, [pc, #48]	; (2060 <ISR_Accelerometer+0x3c>)
    202e:	6813      	ldr	r3, [r2, #0]
    2030:	3301      	adds	r3, #1
    2032:	6013      	str	r3, [r2, #0]
	
	switch (bandState){
    2034:	4b0b      	ldr	r3, [pc, #44]	; (2064 <ISR_Accelerometer+0x40>)
    2036:	781b      	ldrb	r3, [r3, #0]
    2038:	2b02      	cmp	r3, #2
    203a:	d009      	beq.n	2050 <ISR_Accelerometer+0x2c>
    203c:	2b06      	cmp	r3, #6
    203e:	d00a      	beq.n	2056 <ISR_Accelerometer+0x32>
	ext_irq_enable(pin);
    2040:	2058      	movs	r0, #88	; 0x58
    2042:	4b09      	ldr	r3, [pc, #36]	; (2068 <ISR_Accelerometer+0x44>)
    2044:	4798      	blx	r3
		default: break;
	}

	/**/END:/**/
	EnableInterrupt(ACCEL);
	MCUBusy--;
    2046:	4a06      	ldr	r2, [pc, #24]	; (2060 <ISR_Accelerometer+0x3c>)
    2048:	6813      	ldr	r3, [r2, #0]
    204a:	3b01      	subs	r3, #1
    204c:	6013      	str	r3, [r2, #0]
    204e:	bd10      	pop	{r4, pc}
		case BANDSTATE_NORMAL:			EventNormal(); break;
    2050:	4b06      	ldr	r3, [pc, #24]	; (206c <ISR_Accelerometer+0x48>)
    2052:	4798      	blx	r3
    2054:	e7f4      	b.n	2040 <ISR_Accelerometer+0x1c>
		case BANDSTATE_SLEEP:			EventSleep(); break;
    2056:	4b06      	ldr	r3, [pc, #24]	; (2070 <ISR_Accelerometer+0x4c>)
    2058:	4798      	blx	r3
    205a:	e7f1      	b.n	2040 <ISR_Accelerometer+0x1c>
    205c:	000008fd 	.word	0x000008fd
    2060:	20000bb4 	.word	0x20000bb4
    2064:	20000c24 	.word	0x20000c24
    2068:	000008ed 	.word	0x000008ed
    206c:	00002535 	.word	0x00002535
    2070:	000029d5 	.word	0x000029d5

00002074 <InitInterrupts>:
void InitInterrupts(){
    2074:	b510      	push	{r4, lr}
	ext_irq_register(BUTTON, ISR_Button);
    2076:	4904      	ldr	r1, [pc, #16]	; (2088 <InitInterrupts+0x14>)
    2078:	2033      	movs	r0, #51	; 0x33
    207a:	4c04      	ldr	r4, [pc, #16]	; (208c <InitInterrupts+0x18>)
    207c:	47a0      	blx	r4
	ext_irq_register(ACCEL, ISR_Accelerometer);
    207e:	4904      	ldr	r1, [pc, #16]	; (2090 <InitInterrupts+0x1c>)
    2080:	2058      	movs	r0, #88	; 0x58
    2082:	47a0      	blx	r4
}
    2084:	bd10      	pop	{r4, pc}
    2086:	46c0      	nop			; (mov r8, r8)
    2088:	00001f99 	.word	0x00001f99
    208c:	00000835 	.word	0x00000835
    2090:	00002025 	.word	0x00002025

00002094 <InitEvents>:
#include "timers.h"
#include "motor.h"

/// Function Definitions

void InitEvents(){
    2094:	b570      	push	{r4, r5, r6, lr}
	readEventQueue = &eventMessageQueues[0];
    2096:	4807      	ldr	r0, [pc, #28]	; (20b4 <InitEvents+0x20>)
    2098:	4b07      	ldr	r3, [pc, #28]	; (20b8 <InitEvents+0x24>)
    209a:	6018      	str	r0, [r3, #0]
	writeEventQueue = &eventMessageQueues[1];
    209c:	4d07      	ldr	r5, [pc, #28]	; (20bc <InitEvents+0x28>)
    209e:	0003      	movs	r3, r0
    20a0:	3320      	adds	r3, #32
    20a2:	602b      	str	r3, [r5, #0]
	QUE_InitQueue(readEventQueue, sizeof(struct EventMessage));
    20a4:	2112      	movs	r1, #18
    20a6:	4c06      	ldr	r4, [pc, #24]	; (20c0 <InitEvents+0x2c>)
    20a8:	47a0      	blx	r4
	QUE_InitQueue(writeEventQueue, sizeof(struct EventMessage));
    20aa:	6828      	ldr	r0, [r5, #0]
    20ac:	2112      	movs	r1, #18
    20ae:	47a0      	blx	r4
}
    20b0:	bd70      	pop	{r4, r5, r6, pc}
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	20000bb8 	.word	0x20000bb8
    20b8:	20000c18 	.word	0x20000c18
    20bc:	20000a7c 	.word	0x20000a7c
    20c0:	000001b5 	.word	0x000001b5

000020c4 <HandleEvents>:

void HandleEvents(){
    20c4:	b570      	push	{r4, r5, r6, lr}
	static struct EventMessage message;
	static void* miscptr = NULL;
	static volatile struct Queue* temp;
	
	// Switch Buffers
	temp = writeEventQueue;
    20c6:	4b68      	ldr	r3, [pc, #416]	; (2268 <HandleEvents+0x1a4>)
    20c8:	6819      	ldr	r1, [r3, #0]
	while (MCUBusy); // Make sure no interrupts are happening
    20ca:	4a68      	ldr	r2, [pc, #416]	; (226c <HandleEvents+0x1a8>)
    20cc:	6813      	ldr	r3, [r2, #0]
    20ce:	2b00      	cmp	r3, #0
    20d0:	d1fc      	bne.n	20cc <HandleEvents+0x8>
	writeEventQueue = readEventQueue;
    20d2:	4b67      	ldr	r3, [pc, #412]	; (2270 <HandleEvents+0x1ac>)
    20d4:	4a64      	ldr	r2, [pc, #400]	; (2268 <HandleEvents+0x1a4>)
    20d6:	6818      	ldr	r0, [r3, #0]
    20d8:	6010      	str	r0, [r2, #0]
	readEventQueue = temp;
    20da:	6019      	str	r1, [r3, #0]
	
	while (QUE_Dequeue(readEventQueue, &message)){
    20dc:	4c65      	ldr	r4, [pc, #404]	; (2274 <HandleEvents+0x1b0>)
			break;
			case EVENT_TIMER:
			switch (message.eventInfo[TIMER_EVENT_INFO_TIMER_EVENT]){
				case EVENT_TIMER_EXPIRED:
				miscptr = &message.eventInfo[TIMER_EVENT_INFO_SENDER]; // pointer to start of message module
				if (*(struct timer_task**)miscptr == &task0){ // MainTimerTimeout
    20de:	1ce5      	adds	r5, r4, #3
	while (QUE_Dequeue(readEventQueue, &message)){
    20e0:	4b63      	ldr	r3, [pc, #396]	; (2270 <HandleEvents+0x1ac>)
    20e2:	6818      	ldr	r0, [r3, #0]
    20e4:	0021      	movs	r1, r4
    20e6:	4b64      	ldr	r3, [pc, #400]	; (2278 <HandleEvents+0x1b4>)
    20e8:	4798      	blx	r3
    20ea:	2800      	cmp	r0, #0
    20ec:	d100      	bne.n	20f0 <HandleEvents+0x2c>
    20ee:	e0ba      	b.n	2266 <HandleEvents+0x1a2>
		switch (message.eventType){
    20f0:	4b60      	ldr	r3, [pc, #384]	; (2274 <HandleEvents+0x1b0>)
    20f2:	781b      	ldrb	r3, [r3, #0]
    20f4:	2b01      	cmp	r3, #1
    20f6:	d047      	beq.n	2188 <HandleEvents+0xc4>
    20f8:	2b00      	cmp	r3, #0
    20fa:	d00f      	beq.n	211c <HandleEvents+0x58>
    20fc:	2b02      	cmp	r3, #2
    20fe:	d1ef      	bne.n	20e0 <HandleEvents+0x1c>
				}
				else; // How did you get an else? there are only 3 timers...
			}
			break;
			case EVENT_COMMAND:
			switch (message.eventInfo[COMMAND_EVENT_INFO_COMMAND]){
    2100:	4b5c      	ldr	r3, [pc, #368]	; (2274 <HandleEvents+0x1b0>)
    2102:	789b      	ldrb	r3, [r3, #2]
    2104:	2b00      	cmp	r3, #0
    2106:	d100      	bne.n	210a <HandleEvents+0x46>
    2108:	e0a9      	b.n	225e <HandleEvents+0x19a>
    210a:	2b01      	cmp	r3, #1
    210c:	d1e8      	bne.n	20e0 <HandleEvents+0x1c>
				case EVENT_COMMAND_NOTIFY_DISCONNECT:	connected = false; /* Send back ack command */ break; // Independent of band state // Precursor to a disconnect event // This is sent FROM a host TO a guest (the event will occur on the guest)
				case EVENT_COMMAND_DISCONNECT:			if (!connected) EventDisconnecting(); break; // Will ignore command if not notified of disconnect first // This is sent FROM a host TO a guest (the event will occur on the guest)
    210e:	4b5b      	ldr	r3, [pc, #364]	; (227c <HandleEvents+0x1b8>)
    2110:	781b      	ldrb	r3, [r3, #0]
    2112:	2b00      	cmp	r3, #0
    2114:	d1e4      	bne.n	20e0 <HandleEvents+0x1c>
    2116:	4b5a      	ldr	r3, [pc, #360]	; (2280 <HandleEvents+0x1bc>)
    2118:	4798      	blx	r3
    211a:	e7e1      	b.n	20e0 <HandleEvents+0x1c>
			if (message.eventInfo[BUTTON_EVENT_INFO_BUTTON_STATE] == button) break; // Double event (not supposed to happen)
    211c:	4b55      	ldr	r3, [pc, #340]	; (2274 <HandleEvents+0x1b0>)
    211e:	789b      	ldrb	r3, [r3, #2]
    2120:	4a58      	ldr	r2, [pc, #352]	; (2284 <HandleEvents+0x1c0>)
    2122:	7812      	ldrb	r2, [r2, #0]
    2124:	b2d2      	uxtb	r2, r2
    2126:	4293      	cmp	r3, r2
    2128:	d0da      	beq.n	20e0 <HandleEvents+0x1c>
			else button = message.eventInfo[BUTTON_EVENT_INFO_BUTTON_STATE]; // Set button
    212a:	1e5a      	subs	r2, r3, #1
    212c:	4193      	sbcs	r3, r2
    212e:	b2db      	uxtb	r3, r3
    2130:	4a54      	ldr	r2, [pc, #336]	; (2284 <HandleEvents+0x1c0>)
    2132:	7013      	strb	r3, [r2, #0]
			if (button){ // Button Down
    2134:	7813      	ldrb	r3, [r2, #0]
    2136:	2b00      	cmp	r3, #0
    2138:	d01c      	beq.n	2174 <HandleEvents+0xb0>
				switch (message.eventBandState){ // Band state
    213a:	4b4e      	ldr	r3, [pc, #312]	; (2274 <HandleEvents+0x1b0>)
    213c:	785b      	ldrb	r3, [r3, #1]
    213e:	2b02      	cmp	r3, #2
    2140:	d00e      	beq.n	2160 <HandleEvents+0x9c>
    2142:	b2da      	uxtb	r2, r3
    2144:	2a02      	cmp	r2, #2
    2146:	d906      	bls.n	2156 <HandleEvents+0x92>
    2148:	2b03      	cmp	r3, #3
    214a:	d00e      	beq.n	216a <HandleEvents+0xa6>
    214c:	2b05      	cmp	r3, #5
    214e:	d1c7      	bne.n	20e0 <HandleEvents+0x1c>
					case BANDSTATE_LOWPOWER:		EventLowPower(); break;
    2150:	4b4d      	ldr	r3, [pc, #308]	; (2288 <HandleEvents+0x1c4>)
    2152:	4798      	blx	r3
    2154:	e7c4      	b.n	20e0 <HandleEvents+0x1c>
				switch (message.eventBandState){ // Band state
    2156:	2b01      	cmp	r3, #1
    2158:	d1c2      	bne.n	20e0 <HandleEvents+0x1c>
					case BANDSTATE_DISPLAY:			EventDisplay(); break;
    215a:	4b4c      	ldr	r3, [pc, #304]	; (228c <HandleEvents+0x1c8>)
    215c:	4798      	blx	r3
    215e:	e7bf      	b.n	20e0 <HandleEvents+0x1c>
					case BANDSTATE_NORMAL:			CloseNormal(); InitDisplay(); break;
    2160:	4b4b      	ldr	r3, [pc, #300]	; (2290 <HandleEvents+0x1cc>)
    2162:	4798      	blx	r3
    2164:	4b4b      	ldr	r3, [pc, #300]	; (2294 <HandleEvents+0x1d0>)
    2166:	4798      	blx	r3
    2168:	e7ba      	b.n	20e0 <HandleEvents+0x1c>
	hri_tccount16_write_COUNT_reg(timer->device.hw, 0);
    216a:	4b4b      	ldr	r3, [pc, #300]	; (2298 <HandleEvents+0x1d4>)
    216c:	68db      	ldr	r3, [r3, #12]
    216e:	2200      	movs	r2, #0
    2170:	829a      	strh	r2, [r3, #20]
    2172:	e7b5      	b.n	20e0 <HandleEvents+0x1c>
				MotorEnqueue(MOTOR_GENERIC_BUTTON_UP_ACTION);
    2174:	4849      	ldr	r0, [pc, #292]	; (229c <HandleEvents+0x1d8>)
    2176:	4b4a      	ldr	r3, [pc, #296]	; (22a0 <HandleEvents+0x1dc>)
    2178:	4798      	blx	r3
				switch (message.eventBandState){ // Band state
    217a:	4b3e      	ldr	r3, [pc, #248]	; (2274 <HandleEvents+0x1b0>)
    217c:	785b      	ldrb	r3, [r3, #1]
    217e:	2b01      	cmp	r3, #1
    2180:	d1ae      	bne.n	20e0 <HandleEvents+0x1c>
					case BANDSTATE_DISPLAY:			EventDisplay(); break;
    2182:	4b42      	ldr	r3, [pc, #264]	; (228c <HandleEvents+0x1c8>)
    2184:	4798      	blx	r3
    2186:	e7ab      	b.n	20e0 <HandleEvents+0x1c>
			switch (message.eventInfo[TIMER_EVENT_INFO_TIMER_EVENT]){
    2188:	4b3a      	ldr	r3, [pc, #232]	; (2274 <HandleEvents+0x1b0>)
    218a:	789b      	ldrb	r3, [r3, #2]
    218c:	2b00      	cmp	r3, #0
    218e:	d1a7      	bne.n	20e0 <HandleEvents+0x1c>
				if (*(struct timer_task**)miscptr == &task0){ // MainTimerTimeout
    2190:	782b      	ldrb	r3, [r5, #0]
    2192:	786a      	ldrb	r2, [r5, #1]
    2194:	0212      	lsls	r2, r2, #8
    2196:	431a      	orrs	r2, r3
    2198:	78ab      	ldrb	r3, [r5, #2]
    219a:	041b      	lsls	r3, r3, #16
    219c:	431a      	orrs	r2, r3
    219e:	78eb      	ldrb	r3, [r5, #3]
    21a0:	061b      	lsls	r3, r3, #24
    21a2:	4313      	orrs	r3, r2
    21a4:	4a3f      	ldr	r2, [pc, #252]	; (22a4 <HandleEvents+0x1e0>)
    21a6:	4293      	cmp	r3, r2
    21a8:	d017      	beq.n	21da <HandleEvents+0x116>
				else if (*(struct timer_task**)miscptr == &task1){ // Standard Mode timeout (usually)
    21aa:	4a3f      	ldr	r2, [pc, #252]	; (22a8 <HandleEvents+0x1e4>)
    21ac:	4293      	cmp	r3, r2
    21ae:	d023      	beq.n	21f8 <HandleEvents+0x134>
				else if (*(struct timer_task**)miscptr == &task2){ // Special Mode timeout (usually)
    21b0:	4a3e      	ldr	r2, [pc, #248]	; (22ac <HandleEvents+0x1e8>)
    21b2:	4293      	cmp	r3, r2
    21b4:	d194      	bne.n	20e0 <HandleEvents+0x1c>
					switch (message.eventBandState){
    21b6:	4b2f      	ldr	r3, [pc, #188]	; (2274 <HandleEvents+0x1b0>)
    21b8:	785b      	ldrb	r3, [r3, #1]
    21ba:	2b02      	cmp	r3, #2
    21bc:	d045      	beq.n	224a <HandleEvents+0x186>
    21be:	b2da      	uxtb	r2, r3
    21c0:	2a02      	cmp	r2, #2
    21c2:	d933      	bls.n	222c <HandleEvents+0x168>
    21c4:	2b03      	cmp	r3, #3
    21c6:	d045      	beq.n	2254 <HandleEvents+0x190>
    21c8:	2b05      	cmp	r3, #5
    21ca:	d189      	bne.n	20e0 <HandleEvents+0x1c>
						case BANDSTATE_LOWPOWER:		CloseLowPower(); ForceBreakAway(); InitSleep(); break; // Turn off event
    21cc:	4b38      	ldr	r3, [pc, #224]	; (22b0 <HandleEvents+0x1ec>)
    21ce:	4798      	blx	r3
    21d0:	4b38      	ldr	r3, [pc, #224]	; (22b4 <HandleEvents+0x1f0>)
    21d2:	4798      	blx	r3
    21d4:	4b38      	ldr	r3, [pc, #224]	; (22b8 <HandleEvents+0x1f4>)
    21d6:	4798      	blx	r3
    21d8:	e782      	b.n	20e0 <HandleEvents+0x1c>
					switch (message.eventBandState){ // Actions not in update functions
    21da:	4b26      	ldr	r3, [pc, #152]	; (2274 <HandleEvents+0x1b0>)
    21dc:	785b      	ldrb	r3, [r3, #1]
    21de:	2b01      	cmp	r3, #1
    21e0:	d000      	beq.n	21e4 <HandleEvents+0x120>
    21e2:	e77d      	b.n	20e0 <HandleEvents+0x1c>
						case BANDSTATE_DISPLAY:			if (button) ResetTimerCount(&TIMER1); break;
    21e4:	4b27      	ldr	r3, [pc, #156]	; (2284 <HandleEvents+0x1c0>)
    21e6:	781b      	ldrb	r3, [r3, #0]
    21e8:	2b00      	cmp	r3, #0
    21ea:	d100      	bne.n	21ee <HandleEvents+0x12a>
    21ec:	e778      	b.n	20e0 <HandleEvents+0x1c>
    21ee:	4b2a      	ldr	r3, [pc, #168]	; (2298 <HandleEvents+0x1d4>)
    21f0:	68db      	ldr	r3, [r3, #12]
    21f2:	2200      	movs	r2, #0
    21f4:	829a      	strh	r2, [r3, #20]
    21f6:	e773      	b.n	20e0 <HandleEvents+0x1c>
					switch (message.eventBandState){
    21f8:	4b1e      	ldr	r3, [pc, #120]	; (2274 <HandleEvents+0x1b0>)
    21fa:	785b      	ldrb	r3, [r3, #1]
    21fc:	2b03      	cmp	r3, #3
    21fe:	d009      	beq.n	2214 <HandleEvents+0x150>
    2200:	2b04      	cmp	r3, #4
    2202:	d00c      	beq.n	221e <HandleEvents+0x15a>
    2204:	2b01      	cmp	r3, #1
    2206:	d000      	beq.n	220a <HandleEvents+0x146>
    2208:	e76a      	b.n	20e0 <HandleEvents+0x1c>
						case BANDSTATE_DISPLAY:			CloseDisplay();	InitNormal(); break;
    220a:	4b2c      	ldr	r3, [pc, #176]	; (22bc <HandleEvents+0x1f8>)
    220c:	4798      	blx	r3
    220e:	4b2c      	ldr	r3, [pc, #176]	; (22c0 <HandleEvents+0x1fc>)
    2210:	4798      	blx	r3
    2212:	e765      	b.n	20e0 <HandleEvents+0x1c>
						case BANDSTATE_CONNECTING:		CloseConnecting(); InitDisplay(); break;
    2214:	4b2b      	ldr	r3, [pc, #172]	; (22c4 <HandleEvents+0x200>)
    2216:	4798      	blx	r3
    2218:	4b1e      	ldr	r3, [pc, #120]	; (2294 <HandleEvents+0x1d0>)
    221a:	4798      	blx	r3
    221c:	e760      	b.n	20e0 <HandleEvents+0x1c>
						case BANDSTATE_DISCONNECTING:	CloseDisconnecting(); ForceBreakAway(); InitDisplay(); break; // Disconnect failed
    221e:	4b2a      	ldr	r3, [pc, #168]	; (22c8 <HandleEvents+0x204>)
    2220:	4798      	blx	r3
    2222:	4b24      	ldr	r3, [pc, #144]	; (22b4 <HandleEvents+0x1f0>)
    2224:	4798      	blx	r3
    2226:	4b1b      	ldr	r3, [pc, #108]	; (2294 <HandleEvents+0x1d0>)
    2228:	4798      	blx	r3
    222a:	e759      	b.n	20e0 <HandleEvents+0x1c>
					switch (message.eventBandState){
    222c:	2b01      	cmp	r3, #1
    222e:	d000      	beq.n	2232 <HandleEvents+0x16e>
    2230:	e756      	b.n	20e0 <HandleEvents+0x1c>
						case BANDSTATE_DISPLAY:			CloseDisplay(); if (connected) InitDisconnecting(); else InitConnecting(); break; // button held event
    2232:	4b22      	ldr	r3, [pc, #136]	; (22bc <HandleEvents+0x1f8>)
    2234:	4798      	blx	r3
    2236:	4b11      	ldr	r3, [pc, #68]	; (227c <HandleEvents+0x1b8>)
    2238:	781b      	ldrb	r3, [r3, #0]
    223a:	2b00      	cmp	r3, #0
    223c:	d002      	beq.n	2244 <HandleEvents+0x180>
    223e:	4b23      	ldr	r3, [pc, #140]	; (22cc <HandleEvents+0x208>)
    2240:	4798      	blx	r3
    2242:	e74d      	b.n	20e0 <HandleEvents+0x1c>
    2244:	4b22      	ldr	r3, [pc, #136]	; (22d0 <HandleEvents+0x20c>)
    2246:	4798      	blx	r3
    2248:	e74a      	b.n	20e0 <HandleEvents+0x1c>
						case BANDSTATE_NORMAL:			CloseNormal(); InitSleep(); break; // Inactive timeout event
    224a:	4b11      	ldr	r3, [pc, #68]	; (2290 <HandleEvents+0x1cc>)
    224c:	4798      	blx	r3
    224e:	4b1a      	ldr	r3, [pc, #104]	; (22b8 <HandleEvents+0x1f4>)
    2250:	4798      	blx	r3
    2252:	e745      	b.n	20e0 <HandleEvents+0x1c>
						case BANDSTATE_CONNECTING:		CloseConnecting(); InitDisconnecting(); break; // Cancel connecting event
    2254:	4b1b      	ldr	r3, [pc, #108]	; (22c4 <HandleEvents+0x200>)
    2256:	4798      	blx	r3
    2258:	4b1c      	ldr	r3, [pc, #112]	; (22cc <HandleEvents+0x208>)
    225a:	4798      	blx	r3
    225c:	e740      	b.n	20e0 <HandleEvents+0x1c>
				case EVENT_COMMAND_NOTIFY_DISCONNECT:	connected = false; /* Send back ack command */ break; // Independent of band state // Precursor to a disconnect event // This is sent FROM a host TO a guest (the event will occur on the guest)
    225e:	2200      	movs	r2, #0
    2260:	4b06      	ldr	r3, [pc, #24]	; (227c <HandleEvents+0x1b8>)
    2262:	701a      	strb	r2, [r3, #0]
    2264:	e73c      	b.n	20e0 <HandleEvents+0x1c>
				case EVENT_COMMAND_SET_COUNT:			/* Sets this band's TIMER2 count value to the received count value. */ break;
			}
			break;
		}
	}
    2266:	bd70      	pop	{r4, r5, r6, pc}
    2268:	20000a7c 	.word	0x20000a7c
    226c:	20000bb4 	.word	0x20000bb4
    2270:	20000c18 	.word	0x20000c18
    2274:	20000914 	.word	0x20000914
    2278:	00000231 	.word	0x00000231
    227c:	20000c25 	.word	0x20000c25
    2280:	000027ad 	.word	0x000027ad
    2284:	20000c1d 	.word	0x20000c1d
    2288:	00002831 	.word	0x00002831
    228c:	00002421 	.word	0x00002421
    2290:	00002545 	.word	0x00002545
    2294:	000023a9 	.word	0x000023a9
    2298:	20000a18 	.word	0x20000a18
    229c:	00005780 	.word	0x00005780
    22a0:	000029f5 	.word	0x000029f5
    22a4:	20000ba0 	.word	0x20000ba0
    22a8:	20000c28 	.word	0x20000c28
    22ac:	20000c3c 	.word	0x20000c3c
    22b0:	00002861 	.word	0x00002861
    22b4:	00001e11 	.word	0x00001e11
    22b8:	00002885 	.word	0x00002885
    22bc:	000024a9 	.word	0x000024a9
    22c0:	000024f9 	.word	0x000024f9
    22c4:	0000263d 	.word	0x0000263d
    22c8:	000027e5 	.word	0x000027e5
    22cc:	0000268d 	.word	0x0000268d
    22d0:	00002559 	.word	0x00002559

000022d4 <UpdateDisplay>:
	// No vibration
	displaySVAR = 1; // Skip first up event
}

void UpdateDisplay(){
	if (button) ResetTimerCount(&TIMER1);
    22d4:	4b2e      	ldr	r3, [pc, #184]	; (2390 <UpdateDisplay+0xbc>)
    22d6:	781b      	ldrb	r3, [r3, #0]
    22d8:	2b00      	cmp	r3, #0
    22da:	d003      	beq.n	22e4 <UpdateDisplay+0x10>
    22dc:	4b2d      	ldr	r3, [pc, #180]	; (2394 <UpdateDisplay+0xc0>)
    22de:	68db      	ldr	r3, [r3, #12]
    22e0:	2200      	movs	r2, #0
    22e2:	829a      	strh	r2, [r3, #20]
	
	// LED set
	switch(bandRange){ // Update LEDS
    22e4:	4b2c      	ldr	r3, [pc, #176]	; (2398 <UpdateDisplay+0xc4>)
    22e6:	781b      	ldrb	r3, [r3, #0]
    22e8:	b2db      	uxtb	r3, r3
    22ea:	2b01      	cmp	r3, #1
    22ec:	d00f      	beq.n	230e <UpdateDisplay+0x3a>
    22ee:	2b00      	cmp	r3, #0
    22f0:	d02c      	beq.n	234c <UpdateDisplay+0x78>
    22f2:	2b02      	cmp	r3, #2
    22f4:	d006      	beq.n	2304 <UpdateDisplay+0x30>
    22f6:	2b03      	cmp	r3, #3
    22f8:	d10e      	bne.n	2318 <UpdateDisplay+0x44>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    22fa:	2280      	movs	r2, #128	; 0x80
    22fc:	02d2      	lsls	r2, r2, #11
    22fe:	23c0      	movs	r3, #192	; 0xc0
    2300:	05db      	lsls	r3, r3, #23
    2302:	619a      	str	r2, [r3, #24]
    2304:	2280      	movs	r2, #128	; 0x80
    2306:	0112      	lsls	r2, r2, #4
    2308:	23c0      	movs	r3, #192	; 0xc0
    230a:	05db      	lsls	r3, r3, #23
    230c:	619a      	str	r2, [r3, #24]
    230e:	2280      	movs	r2, #128	; 0x80
    2310:	00d2      	lsls	r2, r2, #3
    2312:	23c0      	movs	r3, #192	; 0xc0
    2314:	05db      	lsls	r3, r3, #23
    2316:	619a      	str	r2, [r3, #24]
		case BANDRANGE_SHORT:
			SetLED(SLED, ON);
		break;
	}
	// Primary LED clear and set
	SetLED(led, OFF); // Clear old one
    2318:	4b20      	ldr	r3, [pc, #128]	; (239c <UpdateDisplay+0xc8>)
    231a:	681b      	ldr	r3, [r3, #0]
    231c:	b2db      	uxtb	r3, r3
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    231e:	211f      	movs	r1, #31
    2320:	4019      	ands	r1, r3
    2322:	2201      	movs	r2, #1
    2324:	408a      	lsls	r2, r1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2326:	095b      	lsrs	r3, r3, #5
    2328:	01db      	lsls	r3, r3, #7
    232a:	21c0      	movs	r1, #192	; 0xc0
    232c:	05c9      	lsls	r1, r1, #23
    232e:	468c      	mov	ip, r1
    2330:	4463      	add	r3, ip
    2332:	615a      	str	r2, [r3, #20]
	if (isHost) // Set new one (HOST) A host will always be connected to something. When the last band disconnects, the band will become free
    2334:	4b1a      	ldr	r3, [pc, #104]	; (23a0 <UpdateDisplay+0xcc>)
    2336:	781b      	ldrb	r3, [r3, #0]
    2338:	2b00      	cmp	r3, #0
    233a:	d113      	bne.n	2364 <UpdateDisplay+0x90>
		led = LEDG;
	else if (connected) // Or set new one (GUEST)
    233c:	4b19      	ldr	r3, [pc, #100]	; (23a4 <UpdateDisplay+0xd0>)
    233e:	781b      	ldrb	r3, [r3, #0]
    2340:	2b00      	cmp	r3, #0
    2342:	d121      	bne.n	2388 <UpdateDisplay+0xb4>
		led = LEDB;
	else // Or set new one (FREE)
		led = LEDW;
    2344:	2215      	movs	r2, #21
    2346:	4b15      	ldr	r3, [pc, #84]	; (239c <UpdateDisplay+0xc8>)
    2348:	601a      	str	r2, [r3, #0]
    234a:	e00e      	b.n	236a <UpdateDisplay+0x96>
    234c:	23c0      	movs	r3, #192	; 0xc0
    234e:	05db      	lsls	r3, r3, #23
    2350:	2280      	movs	r2, #128	; 0x80
    2352:	00d2      	lsls	r2, r2, #3
    2354:	615a      	str	r2, [r3, #20]
    2356:	2280      	movs	r2, #128	; 0x80
    2358:	0112      	lsls	r2, r2, #4
    235a:	615a      	str	r2, [r3, #20]
    235c:	2280      	movs	r2, #128	; 0x80
    235e:	02d2      	lsls	r2, r2, #11
    2360:	615a      	str	r2, [r3, #20]
    2362:	e7d9      	b.n	2318 <UpdateDisplay+0x44>
		led = LEDG;
    2364:	2221      	movs	r2, #33	; 0x21
    2366:	4b0d      	ldr	r3, [pc, #52]	; (239c <UpdateDisplay+0xc8>)
    2368:	601a      	str	r2, [r3, #0]
	SetLED(led, ON); // Update new one
    236a:	4b0c      	ldr	r3, [pc, #48]	; (239c <UpdateDisplay+0xc8>)
    236c:	681b      	ldr	r3, [r3, #0]
    236e:	b2db      	uxtb	r3, r3
    2370:	211f      	movs	r1, #31
    2372:	4019      	ands	r1, r3
    2374:	2201      	movs	r2, #1
    2376:	408a      	lsls	r2, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2378:	095b      	lsrs	r3, r3, #5
    237a:	01db      	lsls	r3, r3, #7
    237c:	21c0      	movs	r1, #192	; 0xc0
    237e:	05c9      	lsls	r1, r1, #23
    2380:	468c      	mov	ip, r1
    2382:	4463      	add	r3, ip
    2384:	619a      	str	r2, [r3, #24]
}
    2386:	4770      	bx	lr
		led = LEDB;
    2388:	2222      	movs	r2, #34	; 0x22
    238a:	4b04      	ldr	r3, [pc, #16]	; (239c <UpdateDisplay+0xc8>)
    238c:	601a      	str	r2, [r3, #0]
    238e:	e7ec      	b.n	236a <UpdateDisplay+0x96>
    2390:	20000c1d 	.word	0x20000c1d
    2394:	20000a18 	.word	0x20000a18
    2398:	20000c7d 	.word	0x20000c7d
    239c:	20000c20 	.word	0x20000c20
    23a0:	20000c7c 	.word	0x20000c7c
    23a4:	20000c25 	.word	0x20000c25

000023a8 <InitDisplay>:
void InitDisplay(){
    23a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bandState = BANDSTATE_DISPLAY;
    23aa:	2401      	movs	r4, #1
    23ac:	4b14      	ldr	r3, [pc, #80]	; (2400 <InitDisplay+0x58>)
    23ae:	701c      	strb	r4, [r3, #0]
	ConfigTimer(&TIMER1, TIMER_CONFIG_DISPLAY); // Display timeout
    23b0:	4e14      	ldr	r6, [pc, #80]	; (2404 <InitDisplay+0x5c>)
    23b2:	2101      	movs	r1, #1
    23b4:	0030      	movs	r0, r6
    23b6:	4f14      	ldr	r7, [pc, #80]	; (2408 <InitDisplay+0x60>)
    23b8:	47b8      	blx	r7
	ConfigTimer(&TIMER2, TIMER_CONFIG_DISPLAY_BUTTON); // Long hold event
    23ba:	4d14      	ldr	r5, [pc, #80]	; (240c <InitDisplay+0x64>)
    23bc:	2102      	movs	r1, #2
    23be:	0028      	movs	r0, r5
    23c0:	47b8      	blx	r7
    23c2:	2700      	movs	r7, #0
    23c4:	68f3      	ldr	r3, [r6, #12]
    23c6:	829f      	strh	r7, [r3, #20]
	timer_start(timer);
    23c8:	0030      	movs	r0, r6
    23ca:	4e11      	ldr	r6, [pc, #68]	; (2410 <InitDisplay+0x68>)
    23cc:	47b0      	blx	r6
    23ce:	68eb      	ldr	r3, [r5, #12]
    23d0:	829f      	strh	r7, [r3, #20]
    23d2:	0028      	movs	r0, r5
    23d4:	47b0      	blx	r6
	SetLED(led, ON);
    23d6:	4b0f      	ldr	r3, [pc, #60]	; (2414 <InitDisplay+0x6c>)
    23d8:	681b      	ldr	r3, [r3, #0]
    23da:	b2db      	uxtb	r3, r3
    23dc:	221f      	movs	r2, #31
    23de:	401a      	ands	r2, r3
    23e0:	0021      	movs	r1, r4
    23e2:	4091      	lsls	r1, r2
    23e4:	000a      	movs	r2, r1
    23e6:	095b      	lsrs	r3, r3, #5
    23e8:	01db      	lsls	r3, r3, #7
    23ea:	21c0      	movs	r1, #192	; 0xc0
    23ec:	05c9      	lsls	r1, r1, #23
    23ee:	468c      	mov	ip, r1
    23f0:	4463      	add	r3, ip
    23f2:	619a      	str	r2, [r3, #24]
	UpdateDisplay();
    23f4:	4b08      	ldr	r3, [pc, #32]	; (2418 <InitDisplay+0x70>)
    23f6:	4798      	blx	r3
	displaySVAR = 1; // Skip first up event
    23f8:	4b08      	ldr	r3, [pc, #32]	; (241c <InitDisplay+0x74>)
    23fa:	601c      	str	r4, [r3, #0]
}
    23fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	20000c24 	.word	0x20000c24
    2404:	20000a18 	.word	0x20000a18
    2408:	00002d99 	.word	0x00002d99
    240c:	200009dc 	.word	0x200009dc
    2410:	00000b5d 	.word	0x00000b5d
    2414:	20000c20 	.word	0x20000c20
    2418:	000022d5 	.word	0x000022d5
    241c:	20000940 	.word	0x20000940

00002420 <EventDisplay>:

void EventDisplay(){
    2420:	b510      	push	{r4, lr}
	if (displaySVAR){ // Skip first up event
    2422:	4b1a      	ldr	r3, [pc, #104]	; (248c <EventDisplay+0x6c>)
    2424:	681b      	ldr	r3, [r3, #0]
    2426:	2b00      	cmp	r3, #0
    2428:	d112      	bne.n	2450 <EventDisplay+0x30>
		displaySVAR = 0;
		return;
	}
	// Change range on button up
	if (!button){
    242a:	4b19      	ldr	r3, [pc, #100]	; (2490 <EventDisplay+0x70>)
    242c:	781b      	ldrb	r3, [r3, #0]
    242e:	2b00      	cmp	r3, #0
    2430:	d122      	bne.n	2478 <EventDisplay+0x58>
		// Change Range
		switch(bandRange){
    2432:	4b18      	ldr	r3, [pc, #96]	; (2494 <EventDisplay+0x74>)
    2434:	781b      	ldrb	r3, [r3, #0]
    2436:	b2db      	uxtb	r3, r3
    2438:	2b01      	cmp	r3, #1
    243a:	d011      	beq.n	2460 <EventDisplay+0x40>
    243c:	2b00      	cmp	r3, #0
    243e:	d00b      	beq.n	2458 <EventDisplay+0x38>
    2440:	2b02      	cmp	r3, #2
    2442:	d011      	beq.n	2468 <EventDisplay+0x48>
    2444:	2b03      	cmp	r3, #3
    2446:	d013      	beq.n	2470 <EventDisplay+0x50>
// Name: DisableTimer
// Desc: Stops the given timer.
// Input: (struct timer_descriptor*) timer: The timer to stop.
*/
inline static void DisableTimer(struct timer_descriptor* timer){
	timer_stop(timer);
    2448:	4813      	ldr	r0, [pc, #76]	; (2498 <EventDisplay+0x78>)
    244a:	4b14      	ldr	r3, [pc, #80]	; (249c <EventDisplay+0x7c>)
    244c:	4798      	blx	r3
	else{
		// Extend timer
		ResetTimerCount(&TIMER1); // Display timeout timer
		EnableTimer(&TIMER2); // Button held timer
	}
}
    244e:	bd10      	pop	{r4, pc}
		displaySVAR = 0;
    2450:	2200      	movs	r2, #0
    2452:	4b0e      	ldr	r3, [pc, #56]	; (248c <EventDisplay+0x6c>)
    2454:	601a      	str	r2, [r3, #0]
		return;
    2456:	e7fa      	b.n	244e <EventDisplay+0x2e>
			bandRange = BANDRANGE_SHORT;
    2458:	2201      	movs	r2, #1
    245a:	4b0e      	ldr	r3, [pc, #56]	; (2494 <EventDisplay+0x74>)
    245c:	701a      	strb	r2, [r3, #0]
			break;
    245e:	e7f3      	b.n	2448 <EventDisplay+0x28>
			bandRange = BANDRANGE_MEDIUM;
    2460:	2202      	movs	r2, #2
    2462:	4b0c      	ldr	r3, [pc, #48]	; (2494 <EventDisplay+0x74>)
    2464:	701a      	strb	r2, [r3, #0]
			break;
    2466:	e7ef      	b.n	2448 <EventDisplay+0x28>
			bandRange = BANDRANGE_LONG;
    2468:	2203      	movs	r2, #3
    246a:	4b0a      	ldr	r3, [pc, #40]	; (2494 <EventDisplay+0x74>)
    246c:	701a      	strb	r2, [r3, #0]
			break;
    246e:	e7eb      	b.n	2448 <EventDisplay+0x28>
			bandRange = BANDRANGE_NONE;
    2470:	2200      	movs	r2, #0
    2472:	4b08      	ldr	r3, [pc, #32]	; (2494 <EventDisplay+0x74>)
    2474:	701a      	strb	r2, [r3, #0]
			break;
    2476:	e7e7      	b.n	2448 <EventDisplay+0x28>
	hri_tccount16_write_COUNT_reg(timer->device.hw, 0);
    2478:	4b09      	ldr	r3, [pc, #36]	; (24a0 <EventDisplay+0x80>)
    247a:	68da      	ldr	r2, [r3, #12]
    247c:	2300      	movs	r3, #0
    247e:	8293      	strh	r3, [r2, #20]
    2480:	4805      	ldr	r0, [pc, #20]	; (2498 <EventDisplay+0x78>)
    2482:	68c2      	ldr	r2, [r0, #12]
    2484:	8293      	strh	r3, [r2, #20]
	timer_start(timer);
    2486:	4b07      	ldr	r3, [pc, #28]	; (24a4 <EventDisplay+0x84>)
    2488:	4798      	blx	r3
    248a:	e7e0      	b.n	244e <EventDisplay+0x2e>
    248c:	20000940 	.word	0x20000940
    2490:	20000c1d 	.word	0x20000c1d
    2494:	20000c7d 	.word	0x20000c7d
    2498:	200009dc 	.word	0x200009dc
    249c:	00000b99 	.word	0x00000b99
    24a0:	20000a18 	.word	0x20000a18
    24a4:	00000b5d 	.word	0x00000b5d

000024a8 <CloseDisplay>:

void CloseDisplay(){
    24a8:	b510      	push	{r4, lr}
	timer_stop(timer);
    24aa:	480f      	ldr	r0, [pc, #60]	; (24e8 <CloseDisplay+0x40>)
    24ac:	4c0f      	ldr	r4, [pc, #60]	; (24ec <CloseDisplay+0x44>)
    24ae:	47a0      	blx	r4
    24b0:	480f      	ldr	r0, [pc, #60]	; (24f0 <CloseDisplay+0x48>)
    24b2:	47a0      	blx	r4
	DisableTimer(&TIMER1);
	DisableTimer(&TIMER2);
	displaySVAR = 0;
    24b4:	2200      	movs	r2, #0
    24b6:	4b0f      	ldr	r3, [pc, #60]	; (24f4 <CloseDisplay+0x4c>)
    24b8:	601a      	str	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    24ba:	23c0      	movs	r3, #192	; 0xc0
    24bc:	05db      	lsls	r3, r3, #23
    24be:	2280      	movs	r2, #128	; 0x80
    24c0:	00d2      	lsls	r2, r2, #3
    24c2:	615a      	str	r2, [r3, #20]
    24c4:	2280      	movs	r2, #128	; 0x80
    24c6:	0112      	lsls	r2, r2, #4
    24c8:	615a      	str	r2, [r3, #20]
    24ca:	2280      	movs	r2, #128	; 0x80
    24cc:	02d2      	lsls	r2, r2, #11
    24ce:	615a      	str	r2, [r3, #20]
    24d0:	2294      	movs	r2, #148	; 0x94
    24d2:	2101      	movs	r1, #1
    24d4:	5099      	str	r1, [r3, r2]
    24d6:	3101      	adds	r1, #1
    24d8:	5099      	str	r1, [r3, r2]
    24da:	3102      	adds	r1, #2
    24dc:	5099      	str	r1, [r3, r2]
    24de:	2280      	movs	r2, #128	; 0x80
    24e0:	0392      	lsls	r2, r2, #14
    24e2:	615a      	str	r2, [r3, #20]
	SetLED(LLED, OFF);
	SetLED(LEDR, OFF);
	SetLED(LEDG, OFF);
	SetLED(LEDB, OFF);
	SetLED(LEDW, OFF);
}
    24e4:	bd10      	pop	{r4, pc}
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	20000a18 	.word	0x20000a18
    24ec:	00000b99 	.word	0x00000b99
    24f0:	200009dc 	.word	0x200009dc
    24f4:	20000940 	.word	0x20000940

000024f8 <InitNormal>:

void InitNormal(){
    24f8:	b570      	push	{r4, r5, r6, lr}
	bandState = BANDSTATE_NORMAL;
    24fa:	2202      	movs	r2, #2
    24fc:	4b07      	ldr	r3, [pc, #28]	; (251c <InitNormal+0x24>)
    24fe:	701a      	strb	r2, [r3, #0]
	ConfigTimer(&TIMER2, TIMER_CONFIG_NORMAL); // Inactive timeout
    2500:	4c07      	ldr	r4, [pc, #28]	; (2520 <InitNormal+0x28>)
    2502:	2103      	movs	r1, #3
    2504:	0020      	movs	r0, r4
    2506:	4b07      	ldr	r3, [pc, #28]	; (2524 <InitNormal+0x2c>)
    2508:	4798      	blx	r3
    250a:	2500      	movs	r5, #0
    250c:	68e3      	ldr	r3, [r4, #12]
    250e:	829d      	strh	r5, [r3, #20]
	timer_start(timer);
    2510:	0020      	movs	r0, r4
    2512:	4b05      	ldr	r3, [pc, #20]	; (2528 <InitNormal+0x30>)
    2514:	4798      	blx	r3
	EnableTimer(&TIMER2);
	// No vibration
	normalSVAR = 0;
    2516:	4b05      	ldr	r3, [pc, #20]	; (252c <InitNormal+0x34>)
    2518:	605d      	str	r5, [r3, #4]
}
    251a:	bd70      	pop	{r4, r5, r6, pc}
    251c:	20000c24 	.word	0x20000c24
    2520:	200009dc 	.word	0x200009dc
    2524:	00002d99 	.word	0x00002d99
    2528:	00000b5d 	.word	0x00000b5d
    252c:	20000940 	.word	0x20000940

00002530 <UpdateNormal>:
	
	// Guest update (if it needs it)
	
	// Free update
	// Idle state
}
    2530:	4770      	bx	lr
	...

00002534 <EventNormal>:
	hri_tccount16_write_COUNT_reg(timer->device.hw, 0);
    2534:	4b02      	ldr	r3, [pc, #8]	; (2540 <EventNormal+0xc>)
    2536:	68db      	ldr	r3, [r3, #12]
    2538:	2200      	movs	r2, #0
    253a:	829a      	strh	r2, [r3, #20]

void EventNormal(){ // Called directly from interrupt (does not go through event queue)
	// Accelerometer event
	ResetTimerCount(&TIMER2); // Normal mode inactive timer
}
    253c:	4770      	bx	lr
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	200009dc 	.word	0x200009dc

00002544 <CloseNormal>:

void CloseNormal() {
    2544:	b510      	push	{r4, lr}
	timer_stop(timer);
    2546:	4802      	ldr	r0, [pc, #8]	; (2550 <CloseNormal+0xc>)
    2548:	4b02      	ldr	r3, [pc, #8]	; (2554 <CloseNormal+0x10>)
    254a:	4798      	blx	r3
	DisableTimer(&TIMER2);
}
    254c:	bd10      	pop	{r4, pc}
    254e:	46c0      	nop			; (mov r8, r8)
    2550:	200009dc 	.word	0x200009dc
    2554:	00000b99 	.word	0x00000b99

00002558 <InitConnecting>:

void InitConnecting() {
    2558:	b570      	push	{r4, r5, r6, lr}
	bandState = BANDSTATE_CONNECTING;
    255a:	2203      	movs	r2, #3
    255c:	4b0d      	ldr	r3, [pc, #52]	; (2594 <InitConnecting+0x3c>)
    255e:	701a      	strb	r2, [r3, #0]
	ConfigTimer(&TIMER1, TIMER_CONFIG_CONNECTING); // Connecting timeout
    2560:	4e0d      	ldr	r6, [pc, #52]	; (2598 <InitConnecting+0x40>)
    2562:	2104      	movs	r1, #4
    2564:	0030      	movs	r0, r6
    2566:	4c0d      	ldr	r4, [pc, #52]	; (259c <InitConnecting+0x44>)
    2568:	47a0      	blx	r4
	ConfigTimer(&TIMER2, TIMER_CONFIG_CONNECTING_TIMEOUT); // Start time counter
    256a:	4d0d      	ldr	r5, [pc, #52]	; (25a0 <InitConnecting+0x48>)
    256c:	2105      	movs	r1, #5
    256e:	0028      	movs	r0, r5
    2570:	47a0      	blx	r4
    2572:	2400      	movs	r4, #0
    2574:	68f3      	ldr	r3, [r6, #12]
    2576:	829c      	strh	r4, [r3, #20]
	timer_start(timer);
    2578:	0030      	movs	r0, r6
    257a:	4e0a      	ldr	r6, [pc, #40]	; (25a4 <InitConnecting+0x4c>)
    257c:	47b0      	blx	r6
    257e:	68eb      	ldr	r3, [r5, #12]
    2580:	829c      	strh	r4, [r3, #20]
    2582:	0028      	movs	r0, r5
    2584:	47b0      	blx	r6
	EnableTimer(&TIMER1);
	EnableTimer(&TIMER2);
	MotorEnqueue(MOTOR_CONNECTING_INIT_ACTION);
    2586:	4808      	ldr	r0, [pc, #32]	; (25a8 <InitConnecting+0x50>)
    2588:	4b08      	ldr	r3, [pc, #32]	; (25ac <InitConnecting+0x54>)
    258a:	4798      	blx	r3
	connectingSVAR = 0;
    258c:	4b08      	ldr	r3, [pc, #32]	; (25b0 <InitConnecting+0x58>)
    258e:	609c      	str	r4, [r3, #8]
}
    2590:	bd70      	pop	{r4, r5, r6, pc}
    2592:	46c0      	nop			; (mov r8, r8)
    2594:	20000c24 	.word	0x20000c24
    2598:	20000a18 	.word	0x20000a18
    259c:	00002d99 	.word	0x00002d99
    25a0:	200009dc 	.word	0x200009dc
    25a4:	00000b5d 	.word	0x00000b5d
    25a8:	00005784 	.word	0x00005784
    25ac:	000029f5 	.word	0x000029f5
    25b0:	20000940 	.word	0x20000940

000025b4 <UpdateConnecting>:
	
void UpdateConnecting(){
    25b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint task4CheckValue;
	static const int task4BlinkDuration = 500;
	
	// LED display connecting
	task4CheckValue = 1.5 * GetDurationOfTimer(&TIMER0)->length;
    25b6:	4814      	ldr	r0, [pc, #80]	; (2608 <UpdateConnecting+0x54>)
    25b8:	4b14      	ldr	r3, [pc, #80]	; (260c <UpdateConnecting+0x58>)
    25ba:	4798      	blx	r3
    25bc:	68c0      	ldr	r0, [r0, #12]
    25be:	4b14      	ldr	r3, [pc, #80]	; (2610 <UpdateConnecting+0x5c>)
    25c0:	4798      	blx	r3
    25c2:	2200      	movs	r2, #0
    25c4:	4b13      	ldr	r3, [pc, #76]	; (2614 <UpdateConnecting+0x60>)
    25c6:	4c14      	ldr	r4, [pc, #80]	; (2618 <UpdateConnecting+0x64>)
    25c8:	47a0      	blx	r4
    25ca:	4b14      	ldr	r3, [pc, #80]	; (261c <UpdateConnecting+0x68>)
    25cc:	4798      	blx	r3
    25ce:	4b14      	ldr	r3, [pc, #80]	; (2620 <UpdateConnecting+0x6c>)
    25d0:	60d8      	str	r0, [r3, #12]
	while (task4.size < task4CheckValue){
    25d2:	4b14      	ldr	r3, [pc, #80]	; (2624 <UpdateConnecting+0x70>)
    25d4:	689b      	ldr	r3, [r3, #8]
    25d6:	4298      	cmp	r0, r3
    25d8:	d914      	bls.n	2604 <UpdateConnecting+0x50>
		LEDEnqueue(led, "+");
    25da:	4f13      	ldr	r7, [pc, #76]	; (2628 <UpdateConnecting+0x74>)
    25dc:	4e13      	ldr	r6, [pc, #76]	; (262c <UpdateConnecting+0x78>)
    25de:	6838      	ldr	r0, [r7, #0]
    25e0:	4913      	ldr	r1, [pc, #76]	; (2630 <UpdateConnecting+0x7c>)
    25e2:	47b0      	blx	r6
		LEDDelay(task4BlinkDuration);
    25e4:	25fa      	movs	r5, #250	; 0xfa
    25e6:	006d      	lsls	r5, r5, #1
    25e8:	0028      	movs	r0, r5
    25ea:	4c12      	ldr	r4, [pc, #72]	; (2634 <UpdateConnecting+0x80>)
    25ec:	47a0      	blx	r4
		LEDEnqueue(led, "=");
    25ee:	6838      	ldr	r0, [r7, #0]
    25f0:	4911      	ldr	r1, [pc, #68]	; (2638 <UpdateConnecting+0x84>)
    25f2:	47b0      	blx	r6
		LEDDelay(task4BlinkDuration);
    25f4:	0028      	movs	r0, r5
    25f6:	47a0      	blx	r4
	while (task4.size < task4CheckValue){
    25f8:	4b0a      	ldr	r3, [pc, #40]	; (2624 <UpdateConnecting+0x70>)
    25fa:	689a      	ldr	r2, [r3, #8]
    25fc:	4b08      	ldr	r3, [pc, #32]	; (2620 <UpdateConnecting+0x6c>)
    25fe:	68db      	ldr	r3, [r3, #12]
    2600:	429a      	cmp	r2, r3
    2602:	d3ec      	bcc.n	25de <UpdateConnecting+0x2a>
	   Do not vibrate on these connections, as there might be a lot of them. */
	
	/* Set connection state of this band.
	   Set the host handle
	   All host and guest bands will wait for host timeout. (To correct any host mistakes)(No way to end it sooner) */
}
    2604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2606:	46c0      	nop			; (mov r8, r8)
    2608:	20000a5c 	.word	0x20000a5c
    260c:	00002c41 	.word	0x00002c41
    2610:	00004785 	.word	0x00004785
    2614:	3ff80000 	.word	0x3ff80000
    2618:	00003bf1 	.word	0x00003bf1
    261c:	00003085 	.word	0x00003085
    2620:	20000940 	.word	0x20000940
    2624:	20000b80 	.word	0x20000b80
    2628:	20000c20 	.word	0x20000c20
    262c:	00001e15 	.word	0x00001e15
    2630:	00005760 	.word	0x00005760
    2634:	00001ed1 	.word	0x00001ed1
    2638:	00005794 	.word	0x00005794

0000263c <CloseConnecting>:
	
void EventConnecting() { /* Empty */ }
	
void CloseConnecting() {
    263c:	b510      	push	{r4, lr}
	LEDClearQueue();
    263e:	4b0c      	ldr	r3, [pc, #48]	; (2670 <CloseConnecting+0x34>)
    2640:	4798      	blx	r3
	SetLED(led, OFF);
    2642:	4b0c      	ldr	r3, [pc, #48]	; (2674 <CloseConnecting+0x38>)
    2644:	681b      	ldr	r3, [r3, #0]
    2646:	b2db      	uxtb	r3, r3
    2648:	211f      	movs	r1, #31
    264a:	4019      	ands	r1, r3
    264c:	2201      	movs	r2, #1
    264e:	408a      	lsls	r2, r1
    2650:	095b      	lsrs	r3, r3, #5
    2652:	01db      	lsls	r3, r3, #7
    2654:	21c0      	movs	r1, #192	; 0xc0
    2656:	05c9      	lsls	r1, r1, #23
    2658:	468c      	mov	ip, r1
    265a:	4463      	add	r3, ip
    265c:	615a      	str	r2, [r3, #20]
	timer_stop(timer);
    265e:	4806      	ldr	r0, [pc, #24]	; (2678 <CloseConnecting+0x3c>)
    2660:	4c06      	ldr	r4, [pc, #24]	; (267c <CloseConnecting+0x40>)
    2662:	47a0      	blx	r4
    2664:	4806      	ldr	r0, [pc, #24]	; (2680 <CloseConnecting+0x44>)
    2666:	47a0      	blx	r4
	DisableTimer(&TIMER1);
	DisableTimer(&TIMER2);
	MotorEnqueue(MOTOR_CONNECTING_CLOSE_ACTION);
    2668:	4806      	ldr	r0, [pc, #24]	; (2684 <CloseConnecting+0x48>)
    266a:	4b07      	ldr	r3, [pc, #28]	; (2688 <CloseConnecting+0x4c>)
    266c:	4798      	blx	r3
}
    266e:	bd10      	pop	{r4, pc}
    2670:	00001ead 	.word	0x00001ead
    2674:	20000c20 	.word	0x20000c20
    2678:	20000a18 	.word	0x20000a18
    267c:	00000b99 	.word	0x00000b99
    2680:	200009dc 	.word	0x200009dc
    2684:	00005754 	.word	0x00005754
    2688:	000029f5 	.word	0x000029f5

0000268c <InitDisconnecting>:
	
void InitDisconnecting() {
    268c:	b570      	push	{r4, r5, r6, lr}
	if (!connected || !isHost) return;
    268e:	4b0f      	ldr	r3, [pc, #60]	; (26cc <InitDisconnecting+0x40>)
    2690:	781b      	ldrb	r3, [r3, #0]
    2692:	2b00      	cmp	r3, #0
    2694:	d003      	beq.n	269e <InitDisconnecting+0x12>
    2696:	4b0e      	ldr	r3, [pc, #56]	; (26d0 <InitDisconnecting+0x44>)
    2698:	781b      	ldrb	r3, [r3, #0]
    269a:	2b00      	cmp	r3, #0
    269c:	d100      	bne.n	26a0 <InitDisconnecting+0x14>
	ConfigTimer(&TIMER1, DISCONNECTING_TIMER_TIMEOUT);
	EnableTimer(&TIMER1);
	MotorEnqueue(MOTOR_DISCONNECTING_INIT_ACTION);
	UpdateDisplay();
	disconnectingSVAR = 0;
}
    269e:	bd70      	pop	{r4, r5, r6, pc}
	bandState = BANDSTATE_DISCONNECTING;
    26a0:	2204      	movs	r2, #4
    26a2:	4b0c      	ldr	r3, [pc, #48]	; (26d4 <InitDisconnecting+0x48>)
    26a4:	701a      	strb	r2, [r3, #0]
	ConfigTimer(&TIMER1, DISCONNECTING_TIMER_TIMEOUT);
    26a6:	4c0c      	ldr	r4, [pc, #48]	; (26d8 <InitDisconnecting+0x4c>)
    26a8:	210a      	movs	r1, #10
    26aa:	0020      	movs	r0, r4
    26ac:	4b0b      	ldr	r3, [pc, #44]	; (26dc <InitDisconnecting+0x50>)
    26ae:	4798      	blx	r3
    26b0:	2500      	movs	r5, #0
    26b2:	68e3      	ldr	r3, [r4, #12]
    26b4:	829d      	strh	r5, [r3, #20]
	timer_start(timer);
    26b6:	0020      	movs	r0, r4
    26b8:	4b09      	ldr	r3, [pc, #36]	; (26e0 <InitDisconnecting+0x54>)
    26ba:	4798      	blx	r3
	MotorEnqueue(MOTOR_DISCONNECTING_INIT_ACTION);
    26bc:	4809      	ldr	r0, [pc, #36]	; (26e4 <InitDisconnecting+0x58>)
    26be:	4b0a      	ldr	r3, [pc, #40]	; (26e8 <InitDisconnecting+0x5c>)
    26c0:	4798      	blx	r3
	UpdateDisplay();
    26c2:	4b0a      	ldr	r3, [pc, #40]	; (26ec <InitDisconnecting+0x60>)
    26c4:	4798      	blx	r3
	disconnectingSVAR = 0;
    26c6:	4b0a      	ldr	r3, [pc, #40]	; (26f0 <InitDisconnecting+0x64>)
    26c8:	611d      	str	r5, [r3, #16]
    26ca:	e7e8      	b.n	269e <InitDisconnecting+0x12>
    26cc:	20000c25 	.word	0x20000c25
    26d0:	20000c7c 	.word	0x20000c7c
    26d4:	20000c24 	.word	0x20000c24
    26d8:	20000a18 	.word	0x20000a18
    26dc:	00002d99 	.word	0x00002d99
    26e0:	00000b5d 	.word	0x00000b5d
    26e4:	00005798 	.word	0x00005798
    26e8:	000029f5 	.word	0x000029f5
    26ec:	000022d5 	.word	0x000022d5
    26f0:	20000940 	.word	0x20000940

000026f4 <UpdateDisconnecting>:
	
void UpdateDisconnecting(){
    26f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint task4CheckValue;
	static const uint task4BlinkDuration = 500;
	
	if (!connected || !isHost) return;
    26f6:	4b1b      	ldr	r3, [pc, #108]	; (2764 <UpdateDisconnecting+0x70>)
    26f8:	781b      	ldrb	r3, [r3, #0]
    26fa:	2b00      	cmp	r3, #0
    26fc:	d003      	beq.n	2706 <UpdateDisconnecting+0x12>
    26fe:	4b1a      	ldr	r3, [pc, #104]	; (2768 <UpdateDisconnecting+0x74>)
    2700:	781b      	ldrb	r3, [r3, #0]
    2702:	2b00      	cmp	r3, #0
    2704:	d100      	bne.n	2708 <UpdateDisconnecting+0x14>
	   Remove any quest that was disconnected from the guest array */
	
	// Actual bluetooth disconnect handled in guest.
	
	// If the guest array is empty, then close disconnecting.
}
    2706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	task4CheckValue = 1.5 * GetDurationOfTimer(&TIMER0)->length;
    2708:	4818      	ldr	r0, [pc, #96]	; (276c <UpdateDisconnecting+0x78>)
    270a:	4b19      	ldr	r3, [pc, #100]	; (2770 <UpdateDisconnecting+0x7c>)
    270c:	4798      	blx	r3
    270e:	68c0      	ldr	r0, [r0, #12]
    2710:	4b18      	ldr	r3, [pc, #96]	; (2774 <UpdateDisconnecting+0x80>)
    2712:	4798      	blx	r3
    2714:	2200      	movs	r2, #0
    2716:	4b18      	ldr	r3, [pc, #96]	; (2778 <UpdateDisconnecting+0x84>)
    2718:	4c18      	ldr	r4, [pc, #96]	; (277c <UpdateDisconnecting+0x88>)
    271a:	47a0      	blx	r4
    271c:	4b18      	ldr	r3, [pc, #96]	; (2780 <UpdateDisconnecting+0x8c>)
    271e:	4798      	blx	r3
    2720:	4b18      	ldr	r3, [pc, #96]	; (2784 <UpdateDisconnecting+0x90>)
    2722:	6158      	str	r0, [r3, #20]
	while (task4.size < task4CheckValue){
    2724:	4b18      	ldr	r3, [pc, #96]	; (2788 <UpdateDisconnecting+0x94>)
    2726:	689b      	ldr	r3, [r3, #8]
    2728:	4298      	cmp	r0, r3
    272a:	d914      	bls.n	2756 <UpdateDisconnecting+0x62>
		LEDEnqueue(led, "+");
    272c:	4f17      	ldr	r7, [pc, #92]	; (278c <UpdateDisconnecting+0x98>)
    272e:	4e18      	ldr	r6, [pc, #96]	; (2790 <UpdateDisconnecting+0x9c>)
    2730:	6838      	ldr	r0, [r7, #0]
    2732:	4918      	ldr	r1, [pc, #96]	; (2794 <UpdateDisconnecting+0xa0>)
    2734:	47b0      	blx	r6
		LEDDelay(task4BlinkDuration);
    2736:	25fa      	movs	r5, #250	; 0xfa
    2738:	006d      	lsls	r5, r5, #1
    273a:	0028      	movs	r0, r5
    273c:	4c16      	ldr	r4, [pc, #88]	; (2798 <UpdateDisconnecting+0xa4>)
    273e:	47a0      	blx	r4
		LEDEnqueue(led, "=");
    2740:	6838      	ldr	r0, [r7, #0]
    2742:	4916      	ldr	r1, [pc, #88]	; (279c <UpdateDisconnecting+0xa8>)
    2744:	47b0      	blx	r6
		LEDDelay(task4BlinkDuration);
    2746:	0028      	movs	r0, r5
    2748:	47a0      	blx	r4
	while (task4.size < task4CheckValue){
    274a:	4b0f      	ldr	r3, [pc, #60]	; (2788 <UpdateDisconnecting+0x94>)
    274c:	689a      	ldr	r2, [r3, #8]
    274e:	4b0d      	ldr	r3, [pc, #52]	; (2784 <UpdateDisconnecting+0x90>)
    2750:	695b      	ldr	r3, [r3, #20]
    2752:	429a      	cmp	r2, r3
    2754:	d3ec      	bcc.n	2730 <UpdateDisconnecting+0x3c>
	MotorEnqueue(MOTOR_DISCONNECTING_UPDATE_ACTION);
    2756:	4812      	ldr	r0, [pc, #72]	; (27a0 <UpdateDisconnecting+0xac>)
    2758:	4b12      	ldr	r3, [pc, #72]	; (27a4 <UpdateDisconnecting+0xb0>)
    275a:	4798      	blx	r3
	UpdateDisplay();
    275c:	4b12      	ldr	r3, [pc, #72]	; (27a8 <UpdateDisconnecting+0xb4>)
    275e:	4798      	blx	r3
    2760:	e7d1      	b.n	2706 <UpdateDisconnecting+0x12>
    2762:	46c0      	nop			; (mov r8, r8)
    2764:	20000c25 	.word	0x20000c25
    2768:	20000c7c 	.word	0x20000c7c
    276c:	20000a5c 	.word	0x20000a5c
    2770:	00002c41 	.word	0x00002c41
    2774:	00004785 	.word	0x00004785
    2778:	3ff80000 	.word	0x3ff80000
    277c:	00003bf1 	.word	0x00003bf1
    2780:	00003085 	.word	0x00003085
    2784:	20000940 	.word	0x20000940
    2788:	20000b80 	.word	0x20000b80
    278c:	20000c20 	.word	0x20000c20
    2790:	00001e15 	.word	0x00001e15
    2794:	00005760 	.word	0x00005760
    2798:	00001ed1 	.word	0x00001ed1
    279c:	00005794 	.word	0x00005794
    27a0:	00005780 	.word	0x00005780
    27a4:	000029f5 	.word	0x000029f5
    27a8:	000022d5 	.word	0x000022d5

000027ac <EventDisconnecting>:

void EventDisconnecting(){
    27ac:	b510      	push	{r4, lr}
	
	// Connected variable already set to false (but not disconnected yet)
	
	/* Handle disconnect from host */
	
	connected = false;
    27ae:	2300      	movs	r3, #0
    27b0:	4a06      	ldr	r2, [pc, #24]	; (27cc <EventDisconnecting+0x20>)
    27b2:	7013      	strb	r3, [r2, #0]
	host = NULL;
    27b4:	4a06      	ldr	r2, [pc, #24]	; (27d0 <EventDisconnecting+0x24>)
    27b6:	6013      	str	r3, [r2, #0]
	/* Band will return back to whatever it was doing before.
	   Update display
	   wait a bit delay_s()
	   Clear display */
	
	LEDEnqueue(led, MOTOR_DISCONNECTING_EVENT_ACTION); // Lines up with the motor queue
    27b8:	4b06      	ldr	r3, [pc, #24]	; (27d4 <EventDisconnecting+0x28>)
    27ba:	6818      	ldr	r0, [r3, #0]
    27bc:	4c06      	ldr	r4, [pc, #24]	; (27d8 <EventDisconnecting+0x2c>)
    27be:	0021      	movs	r1, r4
    27c0:	4b06      	ldr	r3, [pc, #24]	; (27dc <EventDisconnecting+0x30>)
    27c2:	4798      	blx	r3
	MotorEnqueue(MOTOR_DISCONNECTING_EVENT_ACTION);
    27c4:	0020      	movs	r0, r4
    27c6:	4b06      	ldr	r3, [pc, #24]	; (27e0 <EventDisconnecting+0x34>)
    27c8:	4798      	blx	r3
	
	// Will go back to whatever it was doing before
}
    27ca:	bd10      	pop	{r4, pc}
    27cc:	20000c25 	.word	0x20000c25
    27d0:	20000a80 	.word	0x20000a80
    27d4:	20000c20 	.word	0x20000c20
    27d8:	000057a0 	.word	0x000057a0
    27dc:	00001e15 	.word	0x00001e15
    27e0:	000029f5 	.word	0x000029f5

000027e4 <CloseDisconnecting>:
	
void CloseDisconnecting(){
    27e4:	b510      	push	{r4, lr}
	if (!connected || !isHost) return;
    27e6:	4b0b      	ldr	r3, [pc, #44]	; (2814 <CloseDisconnecting+0x30>)
    27e8:	781b      	ldrb	r3, [r3, #0]
    27ea:	2b00      	cmp	r3, #0
    27ec:	d003      	beq.n	27f6 <CloseDisconnecting+0x12>
    27ee:	4b0a      	ldr	r3, [pc, #40]	; (2818 <CloseDisconnecting+0x34>)
    27f0:	781b      	ldrb	r3, [r3, #0]
    27f2:	2b00      	cmp	r3, #0
    27f4:	d100      	bne.n	27f8 <CloseDisconnecting+0x14>
	connected = false;
	isHost = false;
	DisableTimer(&TIMER1);
	MotorEnqueue(MOTOR_DISCONNECTING_CLOSE_ACTION);
	InitDisplay(); // Shows new color, then will fall back into normal
}
    27f6:	bd10      	pop	{r4, pc}
	connected = false;
    27f8:	2300      	movs	r3, #0
    27fa:	4a06      	ldr	r2, [pc, #24]	; (2814 <CloseDisconnecting+0x30>)
    27fc:	7013      	strb	r3, [r2, #0]
	isHost = false;
    27fe:	4a06      	ldr	r2, [pc, #24]	; (2818 <CloseDisconnecting+0x34>)
    2800:	7013      	strb	r3, [r2, #0]
	timer_stop(timer);
    2802:	4806      	ldr	r0, [pc, #24]	; (281c <CloseDisconnecting+0x38>)
    2804:	4b06      	ldr	r3, [pc, #24]	; (2820 <CloseDisconnecting+0x3c>)
    2806:	4798      	blx	r3
	MotorEnqueue(MOTOR_DISCONNECTING_CLOSE_ACTION);
    2808:	4806      	ldr	r0, [pc, #24]	; (2824 <CloseDisconnecting+0x40>)
    280a:	4b07      	ldr	r3, [pc, #28]	; (2828 <CloseDisconnecting+0x44>)
    280c:	4798      	blx	r3
	InitDisplay(); // Shows new color, then will fall back into normal
    280e:	4b07      	ldr	r3, [pc, #28]	; (282c <CloseDisconnecting+0x48>)
    2810:	4798      	blx	r3
    2812:	e7f0      	b.n	27f6 <CloseDisconnecting+0x12>
    2814:	20000c25 	.word	0x20000c25
    2818:	20000c7c 	.word	0x20000c7c
    281c:	20000a18 	.word	0x20000a18
    2820:	00000b99 	.word	0x00000b99
    2824:	000057a0 	.word	0x000057a0
    2828:	000029f5 	.word	0x000029f5
    282c:	000023a9 	.word	0x000023a9

00002830 <EventLowPower>:
	/* Check if almost dead, if so kill
	   CloseLowPower
	   ForceBreakAway */
}
	
void EventLowPower(){
    2830:	b510      	push	{r4, lr}
	if (button)
    2832:	4b07      	ldr	r3, [pc, #28]	; (2850 <EventLowPower+0x20>)
    2834:	781b      	ldrb	r3, [r3, #0]
    2836:	2b00      	cmp	r3, #0
    2838:	d103      	bne.n	2842 <EventLowPower+0x12>
    283a:	4806      	ldr	r0, [pc, #24]	; (2854 <EventLowPower+0x24>)
    283c:	4b06      	ldr	r3, [pc, #24]	; (2858 <EventLowPower+0x28>)
    283e:	4798      	blx	r3
		EnableTimer(&TIMER2);
	else
		DisableTimer(&TIMER2);
}
    2840:	bd10      	pop	{r4, pc}
	hri_tccount16_write_COUNT_reg(timer->device.hw, 0);
    2842:	4804      	ldr	r0, [pc, #16]	; (2854 <EventLowPower+0x24>)
    2844:	2300      	movs	r3, #0
    2846:	68c2      	ldr	r2, [r0, #12]
    2848:	8293      	strh	r3, [r2, #20]
	timer_start(timer);
    284a:	4b04      	ldr	r3, [pc, #16]	; (285c <EventLowPower+0x2c>)
    284c:	4798      	blx	r3
    284e:	e7f7      	b.n	2840 <EventLowPower+0x10>
    2850:	20000c1d 	.word	0x20000c1d
    2854:	200009dc 	.word	0x200009dc
    2858:	00000b99 	.word	0x00000b99
    285c:	00000b5d 	.word	0x00000b5d

00002860 <CloseLowPower>:
	
void CloseLowPower(){
    2860:	b510      	push	{r4, lr}
	timer_stop(timer);
    2862:	4805      	ldr	r0, [pc, #20]	; (2878 <CloseLowPower+0x18>)
    2864:	4c05      	ldr	r4, [pc, #20]	; (287c <CloseLowPower+0x1c>)
    2866:	47a0      	blx	r4
    2868:	4805      	ldr	r0, [pc, #20]	; (2880 <CloseLowPower+0x20>)
    286a:	47a0      	blx	r4
    286c:	2101      	movs	r1, #1
    286e:	2394      	movs	r3, #148	; 0x94
    2870:	22c0      	movs	r2, #192	; 0xc0
    2872:	05d2      	lsls	r2, r2, #23
    2874:	50d1      	str	r1, [r2, r3]
	DisableTimer(&TIMER1);
	DisableTimer(&TIMER2);
	SetLED(LOWPOWER_LED_PIN, OFF); // Make sure led is off.	
}
    2876:	bd10      	pop	{r4, pc}
    2878:	20000a18 	.word	0x20000a18
    287c:	00000b99 	.word	0x00000b99
    2880:	200009dc 	.word	0x200009dc

00002884 <InitSleep>:
	
void InitSleep() {
    2884:	b510      	push	{r4, lr}
	MotorEnqueue(MOTOR_SLEEP_INIT_ACTION);
    2886:	4810      	ldr	r0, [pc, #64]	; (28c8 <InitSleep+0x44>)
    2888:	4b10      	ldr	r3, [pc, #64]	; (28cc <InitSleep+0x48>)
    288a:	4798      	blx	r3
    288c:	2120      	movs	r1, #32
    288e:	238a      	movs	r3, #138	; 0x8a
    2890:	005b      	lsls	r3, r3, #1
    2892:	22c0      	movs	r2, #192	; 0xc0
    2894:	05d2      	lsls	r2, r2, #23
    2896:	50d1      	str	r1, [r2, r3]
	DebugOn;
	bandState = BANDSTATE_SLEEP;
    2898:	2206      	movs	r2, #6
    289a:	4b0d      	ldr	r3, [pc, #52]	; (28d0 <InitSleep+0x4c>)
    289c:	701a      	strb	r2, [r3, #0]
    289e:	480d      	ldr	r0, [pc, #52]	; (28d4 <InitSleep+0x50>)
    28a0:	4b0d      	ldr	r3, [pc, #52]	; (28d8 <InitSleep+0x54>)
    28a2:	4798      	blx	r3
    28a4:	4a0d      	ldr	r2, [pc, #52]	; (28dc <InitSleep+0x58>)
    28a6:	7853      	ldrb	r3, [r2, #1]
    28a8:	2104      	movs	r1, #4
    28aa:	430b      	orrs	r3, r1
    28ac:	7053      	strb	r3, [r2, #1]
	delay_ms(2); // So the registers can update
    28ae:	2002      	movs	r0, #2
    28b0:	4b0b      	ldr	r3, [pc, #44]	; (28e0 <InitSleep+0x5c>)
    28b2:	4798      	blx	r3
	DisableTimer(&TIMER0);
	SetPowerMode(POWERMODE_STANDBY);
	while (!MotorIsIdle()); // Wait until motor is done
    28b4:	4c0b      	ldr	r4, [pc, #44]	; (28e4 <InitSleep+0x60>)
    28b6:	47a0      	blx	r4
    28b8:	2800      	cmp	r0, #0
    28ba:	d0fc      	beq.n	28b6 <InitSleep+0x32>
	_go_to_sleep();
    28bc:	4b0a      	ldr	r3, [pc, #40]	; (28e8 <InitSleep+0x64>)
    28be:	4798      	blx	r3
	GoToSleep();
	/* Put MCU into suspend or sleep mode. Make sure interrupts are still on.
	   Put the BMI160 into an even better power saving mode. The accelerometer does not need to be very accurate to wake up the MCU. */
	sleepSVAR = 0;
    28c0:	2200      	movs	r2, #0
    28c2:	4b0a      	ldr	r3, [pc, #40]	; (28ec <InitSleep+0x68>)
    28c4:	61da      	str	r2, [r3, #28]
}
    28c6:	bd10      	pop	{r4, pc}
    28c8:	00005754 	.word	0x00005754
    28cc:	000029f5 	.word	0x000029f5
    28d0:	20000c24 	.word	0x20000c24
    28d4:	20000a5c 	.word	0x20000a5c
    28d8:	00000b99 	.word	0x00000b99
    28dc:	40000400 	.word	0x40000400
    28e0:	00000799 	.word	0x00000799
    28e4:	00002a91 	.word	0x00002a91
    28e8:	00000e71 	.word	0x00000e71
    28ec:	20000940 	.word	0x20000940

000028f0 <UpdateLowPower>:
void UpdateLowPower(){
    28f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!connected){ // As soon as not connected, go to sleep.
    28f2:	4b18      	ldr	r3, [pc, #96]	; (2954 <UpdateLowPower+0x64>)
    28f4:	781b      	ldrb	r3, [r3, #0]
    28f6:	2b00      	cmp	r3, #0
    28f8:	d027      	beq.n	294a <UpdateLowPower+0x5a>
	task4CheckValue = 1.5 * GetDurationOfTimer(&TIMER0)->length;
    28fa:	4817      	ldr	r0, [pc, #92]	; (2958 <UpdateLowPower+0x68>)
    28fc:	4b17      	ldr	r3, [pc, #92]	; (295c <UpdateLowPower+0x6c>)
    28fe:	4798      	blx	r3
    2900:	68c0      	ldr	r0, [r0, #12]
    2902:	4b17      	ldr	r3, [pc, #92]	; (2960 <UpdateLowPower+0x70>)
    2904:	4798      	blx	r3
    2906:	2200      	movs	r2, #0
    2908:	4b16      	ldr	r3, [pc, #88]	; (2964 <UpdateLowPower+0x74>)
    290a:	4c17      	ldr	r4, [pc, #92]	; (2968 <UpdateLowPower+0x78>)
    290c:	47a0      	blx	r4
    290e:	4b17      	ldr	r3, [pc, #92]	; (296c <UpdateLowPower+0x7c>)
    2910:	4798      	blx	r3
    2912:	4b17      	ldr	r3, [pc, #92]	; (2970 <UpdateLowPower+0x80>)
    2914:	6218      	str	r0, [r3, #32]
	while (task4.size <= task4CheckValue){
    2916:	4b17      	ldr	r3, [pc, #92]	; (2974 <UpdateLowPower+0x84>)
    2918:	689b      	ldr	r3, [r3, #8]
    291a:	4298      	cmp	r0, r3
    291c:	d314      	bcc.n	2948 <UpdateLowPower+0x58>
		LEDEnqueue(LOWPOWER_LED_PIN, "+");
    291e:	4f16      	ldr	r7, [pc, #88]	; (2978 <UpdateLowPower+0x88>)
    2920:	4e16      	ldr	r6, [pc, #88]	; (297c <UpdateLowPower+0x8c>)
		LEDDelay(task4BlinkDuration);
    2922:	4d17      	ldr	r5, [pc, #92]	; (2980 <UpdateLowPower+0x90>)
		LEDEnqueue(LOWPOWER_LED_PIN, "+");
    2924:	0039      	movs	r1, r7
    2926:	2020      	movs	r0, #32
    2928:	47b0      	blx	r6
		LEDDelay(task4BlinkDuration);
    292a:	24fa      	movs	r4, #250	; 0xfa
    292c:	0064      	lsls	r4, r4, #1
    292e:	0020      	movs	r0, r4
    2930:	47a8      	blx	r5
		LEDEnqueue(LOWPOWER_LED_PIN, "=");
    2932:	4914      	ldr	r1, [pc, #80]	; (2984 <UpdateLowPower+0x94>)
    2934:	2020      	movs	r0, #32
    2936:	47b0      	blx	r6
		LEDDelay(task4BlinkDuration);
    2938:	0020      	movs	r0, r4
    293a:	47a8      	blx	r5
	while (task4.size <= task4CheckValue){
    293c:	4b0d      	ldr	r3, [pc, #52]	; (2974 <UpdateLowPower+0x84>)
    293e:	689a      	ldr	r2, [r3, #8]
    2940:	4b0b      	ldr	r3, [pc, #44]	; (2970 <UpdateLowPower+0x80>)
    2942:	6a1b      	ldr	r3, [r3, #32]
    2944:	429a      	cmp	r2, r3
    2946:	d9ed      	bls.n	2924 <UpdateLowPower+0x34>
}
    2948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CloseLowPower();
    294a:	4b0f      	ldr	r3, [pc, #60]	; (2988 <UpdateLowPower+0x98>)
    294c:	4798      	blx	r3
		InitSleep();
    294e:	4b0f      	ldr	r3, [pc, #60]	; (298c <UpdateLowPower+0x9c>)
    2950:	4798      	blx	r3
    2952:	e7d2      	b.n	28fa <UpdateLowPower+0xa>
    2954:	20000c25 	.word	0x20000c25
    2958:	20000a5c 	.word	0x20000a5c
    295c:	00002c41 	.word	0x00002c41
    2960:	00004785 	.word	0x00004785
    2964:	3ff80000 	.word	0x3ff80000
    2968:	00003bf1 	.word	0x00003bf1
    296c:	00003085 	.word	0x00003085
    2970:	20000940 	.word	0x20000940
    2974:	20000b80 	.word	0x20000b80
    2978:	00005760 	.word	0x00005760
    297c:	00001e15 	.word	0x00001e15
    2980:	00001ed1 	.word	0x00001ed1
    2984:	00005794 	.word	0x00005794
    2988:	00002861 	.word	0x00002861
    298c:	00002885 	.word	0x00002885

00002990 <UpdateSleep>:

void UpdateSleep() { /* Empty */ }
    2990:	4770      	bx	lr
	...

00002994 <CloseSleep>:
	delay_ms(10); // Delay however long it takes to wake up the MCU
	CloseSleep();
	InitDisplay();	
}
	
void CloseSleep(){
    2994:	b510      	push	{r4, lr}
	hri_tccount16_write_COUNT_reg(timer->device.hw, 0);
    2996:	4809      	ldr	r0, [pc, #36]	; (29bc <CloseSleep+0x28>)
    2998:	2300      	movs	r3, #0
    299a:	68c2      	ldr	r2, [r0, #12]
    299c:	8293      	strh	r3, [r2, #20]
	timer_start(timer);
    299e:	4b08      	ldr	r3, [pc, #32]	; (29c0 <CloseSleep+0x2c>)
    29a0:	4798      	blx	r3
    29a2:	4a08      	ldr	r2, [pc, #32]	; (29c4 <CloseSleep+0x30>)
    29a4:	7853      	ldrb	r3, [r2, #1]
    29a6:	2102      	movs	r1, #2
    29a8:	430b      	orrs	r3, r1
    29aa:	7053      	strb	r3, [r2, #1]
	delay_ms(2); // So the registers can update
    29ac:	2002      	movs	r0, #2
    29ae:	4b06      	ldr	r3, [pc, #24]	; (29c8 <CloseSleep+0x34>)
    29b0:	4798      	blx	r3
	EnableTimer(&TIMER0);
	SetPowerMode(POWERMODE_IDLE);
	MotorEnqueue(MOTOR_SLEEP_CLOSE_ACTION);
    29b2:	4806      	ldr	r0, [pc, #24]	; (29cc <CloseSleep+0x38>)
    29b4:	4b06      	ldr	r3, [pc, #24]	; (29d0 <CloseSleep+0x3c>)
    29b6:	4798      	blx	r3
	/* Put the BMI160 into the normal setting (still low power, but a little more accurate) */
    29b8:	bd10      	pop	{r4, pc}
    29ba:	46c0      	nop			; (mov r8, r8)
    29bc:	20000a5c 	.word	0x20000a5c
    29c0:	00000b5d 	.word	0x00000b5d
    29c4:	40000400 	.word	0x40000400
    29c8:	00000799 	.word	0x00000799
    29cc:	000057c0 	.word	0x000057c0
    29d0:	000029f5 	.word	0x000029f5

000029d4 <EventSleep>:
void EventSleep(){ // Called directly from interrupt (does not go through event queue)
    29d4:	b510      	push	{r4, lr}
	delay_ms(10); // Delay however long it takes to wake up the MCU
    29d6:	200a      	movs	r0, #10
    29d8:	4b03      	ldr	r3, [pc, #12]	; (29e8 <EventSleep+0x14>)
    29da:	4798      	blx	r3
	CloseSleep();
    29dc:	4b03      	ldr	r3, [pc, #12]	; (29ec <EventSleep+0x18>)
    29de:	4798      	blx	r3
	InitDisplay();	
    29e0:	4b03      	ldr	r3, [pc, #12]	; (29f0 <EventSleep+0x1c>)
    29e2:	4798      	blx	r3
}
    29e4:	bd10      	pop	{r4, pc}
    29e6:	46c0      	nop			; (mov r8, r8)
    29e8:	00000799 	.word	0x00000799
    29ec:	00002995 	.word	0x00002995
    29f0:	000023a9 	.word	0x000023a9

000029f4 <MotorEnqueue>:
#include "driver_init.h"
#include "timers.h"

/// Functions

void MotorEnqueue(const char* const instruction){
    29f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static struct timer_task task = { .cb = TIMER_CALLBACK, .mode = TIMER_TASK_ONE_SHOT, .interval = 1, };
	const char* temp = instruction;
	static struct QueueInst inst;
	
	temp = instruction;
	while (*temp != '\0'){
    29f6:	7803      	ldrb	r3, [r0, #0]
    29f8:	2b00      	cmp	r3, #0
    29fa:	d024      	beq.n	2a46 <MotorEnqueue+0x52>
    29fc:	0006      	movs	r6, r0
			case ',': inst.type = INST_MOTOR_WEAK; break;
			case '+':
			case '-': inst.type = INST_MOTOR_ACTIVE; break;
			case '*':
			case '^': inst.type = INST_MOTOR_SHAKE; break;
			default: inst.type = INST_NOP; break;
    29fe:	4d1b      	ldr	r5, [pc, #108]	; (2a6c <MotorEnqueue+0x78>)
		switch (*temp){
    2a00:	4f1b      	ldr	r7, [pc, #108]	; (2a70 <MotorEnqueue+0x7c>)
			case '^': inst.type = INST_MOTOR_SHAKE; break;
    2a02:	002c      	movs	r4, r5
    2a04:	e00a      	b.n	2a1c <MotorEnqueue+0x28>
			case '_': inst.type = INST_MOTOR_REST; break;
    2a06:	2201      	movs	r2, #1
    2a08:	4b18      	ldr	r3, [pc, #96]	; (2a6c <MotorEnqueue+0x78>)
    2a0a:	701a      	strb	r2, [r3, #0]
		}
		QUE_Enqueue(&task3, &inst);
    2a0c:	4917      	ldr	r1, [pc, #92]	; (2a6c <MotorEnqueue+0x78>)
    2a0e:	4819      	ldr	r0, [pc, #100]	; (2a74 <MotorEnqueue+0x80>)
    2a10:	4b19      	ldr	r3, [pc, #100]	; (2a78 <MotorEnqueue+0x84>)
    2a12:	4798      	blx	r3
		temp++;
    2a14:	3601      	adds	r6, #1
	while (*temp != '\0'){
    2a16:	7833      	ldrb	r3, [r6, #0]
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d014      	beq.n	2a46 <MotorEnqueue+0x52>
		switch (*temp){
    2a1c:	3b2a      	subs	r3, #42	; 0x2a
    2a1e:	b2da      	uxtb	r2, r3
    2a20:	2a35      	cmp	r2, #53	; 0x35
    2a22:	d80d      	bhi.n	2a40 <MotorEnqueue+0x4c>
    2a24:	0093      	lsls	r3, r2, #2
    2a26:	58fb      	ldr	r3, [r7, r3]
    2a28:	469f      	mov	pc, r3
			case ',': inst.type = INST_MOTOR_WEAK; break;
    2a2a:	2202      	movs	r2, #2
    2a2c:	4b0f      	ldr	r3, [pc, #60]	; (2a6c <MotorEnqueue+0x78>)
    2a2e:	701a      	strb	r2, [r3, #0]
    2a30:	e7ec      	b.n	2a0c <MotorEnqueue+0x18>
			case '-': inst.type = INST_MOTOR_ACTIVE; break;
    2a32:	2203      	movs	r2, #3
    2a34:	4b0d      	ldr	r3, [pc, #52]	; (2a6c <MotorEnqueue+0x78>)
    2a36:	701a      	strb	r2, [r3, #0]
    2a38:	e7e8      	b.n	2a0c <MotorEnqueue+0x18>
			case '^': inst.type = INST_MOTOR_SHAKE; break;
    2a3a:	2304      	movs	r3, #4
    2a3c:	7023      	strb	r3, [r4, #0]
    2a3e:	e7e5      	b.n	2a0c <MotorEnqueue+0x18>
			default: inst.type = INST_NOP; break;
    2a40:	2300      	movs	r3, #0
    2a42:	702b      	strb	r3, [r5, #0]
    2a44:	e7e2      	b.n	2a0c <MotorEnqueue+0x18>
	}
	
	if (!_timer_is_started(&TIMER3.device) && !QUE_IsEmpty(&task3)){
    2a46:	480d      	ldr	r0, [pc, #52]	; (2a7c <MotorEnqueue+0x88>)
    2a48:	4b0d      	ldr	r3, [pc, #52]	; (2a80 <MotorEnqueue+0x8c>)
    2a4a:	4798      	blx	r3
    2a4c:	2800      	cmp	r0, #0
    2a4e:	d103      	bne.n	2a58 <MotorEnqueue+0x64>
    2a50:	4b08      	ldr	r3, [pc, #32]	; (2a74 <MotorEnqueue+0x80>)
    2a52:	689b      	ldr	r3, [r3, #8]
    2a54:	2b00      	cmp	r3, #0
    2a56:	d100      	bne.n	2a5a <MotorEnqueue+0x66>
		timer_add_task(&TIMER3, &task);
		timer_start(&TIMER3);
	}
}
    2a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		timer_add_task(&TIMER3, &task);
    2a5a:	4c08      	ldr	r4, [pc, #32]	; (2a7c <MotorEnqueue+0x88>)
    2a5c:	4909      	ldr	r1, [pc, #36]	; (2a84 <MotorEnqueue+0x90>)
    2a5e:	0020      	movs	r0, r4
    2a60:	4b09      	ldr	r3, [pc, #36]	; (2a88 <MotorEnqueue+0x94>)
    2a62:	4798      	blx	r3
		timer_start(&TIMER3);
    2a64:	0020      	movs	r0, r4
    2a66:	4b09      	ldr	r3, [pc, #36]	; (2a8c <MotorEnqueue+0x98>)
    2a68:	4798      	blx	r3
}
    2a6a:	e7f5      	b.n	2a58 <MotorEnqueue+0x64>
    2a6c:	20000964 	.word	0x20000964
    2a70:	000057c8 	.word	0x000057c8
    2a74:	20000c94 	.word	0x20000c94
    2a78:	000001e5 	.word	0x000001e5
    2a7c:	20000a40 	.word	0x20000a40
    2a80:	00001b63 	.word	0x00001b63
    2a84:	20000014 	.word	0x20000014
    2a88:	00000c01 	.word	0x00000c01
    2a8c:	00000b5d 	.word	0x00000b5d

00002a90 <MotorIsIdle>:
	while (!QUE_IsEmpty(&task3)){
		QUE_Dequeue(&task3, NULL);
	}
}

bool MotorIsIdle(){
    2a90:	b510      	push	{r4, lr}
    2a92:	4b07      	ldr	r3, [pc, #28]	; (2ab0 <MotorIsIdle+0x20>)
    2a94:	689a      	ldr	r2, [r3, #8]
	return QUE_IsEmpty(&task3) && !_timer_is_started(&TIMER3.device);
    2a96:	2300      	movs	r3, #0
    2a98:	2a00      	cmp	r2, #0
    2a9a:	d002      	beq.n	2aa2 <MotorIsIdle+0x12>
    2a9c:	2001      	movs	r0, #1
    2a9e:	4018      	ands	r0, r3
}
    2aa0:	bd10      	pop	{r4, pc}
	return QUE_IsEmpty(&task3) && !_timer_is_started(&TIMER3.device);
    2aa2:	4804      	ldr	r0, [pc, #16]	; (2ab4 <MotorIsIdle+0x24>)
    2aa4:	4b04      	ldr	r3, [pc, #16]	; (2ab8 <MotorIsIdle+0x28>)
    2aa6:	4798      	blx	r3
    2aa8:	2301      	movs	r3, #1
    2aaa:	4043      	eors	r3, r0
    2aac:	b2db      	uxtb	r3, r3
    2aae:	e7f5      	b.n	2a9c <MotorIsIdle+0xc>
    2ab0:	20000c94 	.word	0x20000c94
    2ab4:	20000a40 	.word	0x20000a40
    2ab8:	00001b63 	.word	0x00001b63

00002abc <ISR_Queue>:
	if (timer == &TIMER0 && !_timer_is_started(&TIMER0.device))
		EnableTimer(timer);
	MCUBusy--;
}

void ISR_Queue(const struct timer_task* const task){
    2abc:	b510      	push	{r4, lr}
	static struct timer_task tsk = { .cb = ISR_Queue, .mode = TIMER_TASK_ONE_SHOT, .interval = 1, };
	static struct QueueInst inst;
	bool end = true; // Becomes false when a queue is not empty (ie. continue to run)
	
	/**/BEGIN:/**/
	MCUBusy++;
    2abe:	4a46      	ldr	r2, [pc, #280]	; (2bd8 <ISR_Queue+0x11c>)
    2ac0:	6813      	ldr	r3, [r2, #0]
    2ac2:	3301      	adds	r3, #1
    2ac4:	6013      	str	r3, [r2, #0]
	MCUSkip = true;
    2ac6:	2201      	movs	r2, #1
    2ac8:	4b44      	ldr	r3, [pc, #272]	; (2bdc <ISR_Queue+0x120>)
    2aca:	701a      	strb	r2, [r3, #0]
    2acc:	4b44      	ldr	r3, [pc, #272]	; (2be0 <ISR_Queue+0x124>)
    2ace:	689b      	ldr	r3, [r3, #8]
	
	// Handle Motor
	if (!QUE_IsEmpty(&task3)){
    2ad0:	2b00      	cmp	r3, #0
    2ad2:	d10b      	bne.n	2aec <ISR_Queue+0x30>
    2ad4:	4b43      	ldr	r3, [pc, #268]	; (2be4 <ISR_Queue+0x128>)
    2ad6:	689b      	ldr	r3, [r3, #8]
		timer_set_clock_cycles_per_tick(&TIMER3, TIMER_LENGTH);
		timer_add_task(&TIMER3, &tsk);
		end = false;
	}
	// Handle LED
	if (!QUE_IsEmpty(&task4)){
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d163      	bne.n	2ba4 <ISR_Queue+0xe8>
			timer_add_task(&TIMER3, &tsk);
		end = false;
	}
	// Timer end condition check
	if (end){
		timer_stop(&TIMER3);
    2adc:	4842      	ldr	r0, [pc, #264]	; (2be8 <ISR_Queue+0x12c>)
    2ade:	4b43      	ldr	r3, [pc, #268]	; (2bec <ISR_Queue+0x130>)
    2ae0:	4798      	blx	r3
	}
	
	/**/END:/**/
	MCUBusy--;
    2ae2:	4a3d      	ldr	r2, [pc, #244]	; (2bd8 <ISR_Queue+0x11c>)
    2ae4:	6813      	ldr	r3, [r2, #0]
    2ae6:	3b01      	subs	r3, #1
    2ae8:	6013      	str	r3, [r2, #0]
    2aea:	bd10      	pop	{r4, pc}
		QUE_Dequeue(&task3, &inst);
    2aec:	4c40      	ldr	r4, [pc, #256]	; (2bf0 <ISR_Queue+0x134>)
    2aee:	0021      	movs	r1, r4
    2af0:	483b      	ldr	r0, [pc, #236]	; (2be0 <ISR_Queue+0x124>)
    2af2:	4b40      	ldr	r3, [pc, #256]	; (2bf4 <ISR_Queue+0x138>)
    2af4:	4798      	blx	r3
		switch (inst.type){
    2af6:	7823      	ldrb	r3, [r4, #0]
    2af8:	2b01      	cmp	r3, #1
    2afa:	d01f      	beq.n	2b3c <ISR_Queue+0x80>
    2afc:	2b03      	cmp	r3, #3
    2afe:	d025      	beq.n	2b4c <ISR_Queue+0x90>
		timer_set_clock_cycles_per_tick(&TIMER3, TIMER_LENGTH);
    2b00:	4c39      	ldr	r4, [pc, #228]	; (2be8 <ISR_Queue+0x12c>)
    2b02:	2112      	movs	r1, #18
    2b04:	31ff      	adds	r1, #255	; 0xff
    2b06:	0020      	movs	r0, r4
    2b08:	4b3b      	ldr	r3, [pc, #236]	; (2bf8 <ISR_Queue+0x13c>)
    2b0a:	4798      	blx	r3
		timer_add_task(&TIMER3, &tsk);
    2b0c:	493b      	ldr	r1, [pc, #236]	; (2bfc <ISR_Queue+0x140>)
    2b0e:	0020      	movs	r0, r4
    2b10:	4b3b      	ldr	r3, [pc, #236]	; (2c00 <ISR_Queue+0x144>)
    2b12:	4798      	blx	r3
    2b14:	4b33      	ldr	r3, [pc, #204]	; (2be4 <ISR_Queue+0x128>)
    2b16:	689b      	ldr	r3, [r3, #8]
	if (!QUE_IsEmpty(&task4)){
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d0e2      	beq.n	2ae2 <ISR_Queue+0x26>
		QUE_Dequeue(&task4, &inst);
    2b1c:	4c34      	ldr	r4, [pc, #208]	; (2bf0 <ISR_Queue+0x134>)
    2b1e:	0021      	movs	r1, r4
    2b20:	4830      	ldr	r0, [pc, #192]	; (2be4 <ISR_Queue+0x128>)
    2b22:	4b34      	ldr	r3, [pc, #208]	; (2bf4 <ISR_Queue+0x138>)
    2b24:	4798      	blx	r3
		switch (inst.type){
    2b26:	7823      	ldrb	r3, [r4, #0]
    2b28:	2b05      	cmp	r3, #5
    2b2a:	d017      	beq.n	2b5c <ISR_Queue+0xa0>
    2b2c:	2b06      	cmp	r3, #6
    2b2e:	d02d      	beq.n	2b8c <ISR_Queue+0xd0>
		timer_set_clock_cycles_per_tick(&TIMER3, TIMER_LENGTH);
    2b30:	2112      	movs	r1, #18
    2b32:	31ff      	adds	r1, #255	; 0xff
    2b34:	482c      	ldr	r0, [pc, #176]	; (2be8 <ISR_Queue+0x12c>)
    2b36:	4b30      	ldr	r3, [pc, #192]	; (2bf8 <ISR_Queue+0x13c>)
    2b38:	4798      	blx	r3
    2b3a:	e7d2      	b.n	2ae2 <ISR_Queue+0x26>
    2b3c:	2180      	movs	r1, #128	; 0x80
    2b3e:	0509      	lsls	r1, r1, #20
    2b40:	238a      	movs	r3, #138	; 0x8a
    2b42:	005b      	lsls	r3, r3, #1
    2b44:	22c0      	movs	r2, #192	; 0xc0
    2b46:	05d2      	lsls	r2, r2, #23
    2b48:	50d1      	str	r1, [r2, r3]
    2b4a:	e7d9      	b.n	2b00 <ISR_Queue+0x44>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b4c:	2180      	movs	r1, #128	; 0x80
    2b4e:	0509      	lsls	r1, r1, #20
    2b50:	238c      	movs	r3, #140	; 0x8c
    2b52:	005b      	lsls	r3, r3, #1
    2b54:	22c0      	movs	r2, #192	; 0xc0
    2b56:	05d2      	lsls	r2, r2, #23
    2b58:	50d1      	str	r1, [r2, r3]
    2b5a:	e7d1      	b.n	2b00 <ISR_Queue+0x44>
		end = false;
    2b5c:	2400      	movs	r4, #0
    2b5e:	e000      	b.n	2b62 <ISR_Queue+0xa6>
	bool end = true; // Becomes false when a queue is not empty (ie. continue to run)
    2b60:	2401      	movs	r4, #1
			case INST_LED_ON: SetLED(inst.misc, ON); break;
    2b62:	4b23      	ldr	r3, [pc, #140]	; (2bf0 <ISR_Queue+0x134>)
    2b64:	791b      	ldrb	r3, [r3, #4]
    2b66:	211f      	movs	r1, #31
    2b68:	4019      	ands	r1, r3
    2b6a:	2201      	movs	r2, #1
    2b6c:	408a      	lsls	r2, r1
    2b6e:	095b      	lsrs	r3, r3, #5
    2b70:	01db      	lsls	r3, r3, #7
    2b72:	21c0      	movs	r1, #192	; 0xc0
    2b74:	05c9      	lsls	r1, r1, #23
    2b76:	468c      	mov	ip, r1
    2b78:	4463      	add	r3, ip
    2b7a:	619a      	str	r2, [r3, #24]
		timer_set_clock_cycles_per_tick(&TIMER3, TIMER_LENGTH);
    2b7c:	2112      	movs	r1, #18
    2b7e:	31ff      	adds	r1, #255	; 0xff
    2b80:	4819      	ldr	r0, [pc, #100]	; (2be8 <ISR_Queue+0x12c>)
    2b82:	4b1d      	ldr	r3, [pc, #116]	; (2bf8 <ISR_Queue+0x13c>)
    2b84:	4798      	blx	r3
		if (end)
    2b86:	2c00      	cmp	r4, #0
    2b88:	d0ab      	beq.n	2ae2 <ISR_Queue+0x26>
    2b8a:	e006      	b.n	2b9a <ISR_Queue+0xde>
		end = false;
    2b8c:	2400      	movs	r4, #0
    2b8e:	e014      	b.n	2bba <ISR_Queue+0xfe>
		timer_set_clock_cycles_per_tick(&TIMER3, TIMER_LENGTH);
    2b90:	2112      	movs	r1, #18
    2b92:	31ff      	adds	r1, #255	; 0xff
    2b94:	4814      	ldr	r0, [pc, #80]	; (2be8 <ISR_Queue+0x12c>)
    2b96:	4b18      	ldr	r3, [pc, #96]	; (2bf8 <ISR_Queue+0x13c>)
    2b98:	4798      	blx	r3
			timer_add_task(&TIMER3, &tsk);
    2b9a:	4918      	ldr	r1, [pc, #96]	; (2bfc <ISR_Queue+0x140>)
    2b9c:	4812      	ldr	r0, [pc, #72]	; (2be8 <ISR_Queue+0x12c>)
    2b9e:	4b18      	ldr	r3, [pc, #96]	; (2c00 <ISR_Queue+0x144>)
    2ba0:	4798      	blx	r3
    2ba2:	e79e      	b.n	2ae2 <ISR_Queue+0x26>
		QUE_Dequeue(&task4, &inst);
    2ba4:	4c12      	ldr	r4, [pc, #72]	; (2bf0 <ISR_Queue+0x134>)
    2ba6:	0021      	movs	r1, r4
    2ba8:	480e      	ldr	r0, [pc, #56]	; (2be4 <ISR_Queue+0x128>)
    2baa:	4b12      	ldr	r3, [pc, #72]	; (2bf4 <ISR_Queue+0x138>)
    2bac:	4798      	blx	r3
		switch (inst.type){
    2bae:	7823      	ldrb	r3, [r4, #0]
    2bb0:	2b05      	cmp	r3, #5
    2bb2:	d0d5      	beq.n	2b60 <ISR_Queue+0xa4>
	bool end = true; // Becomes false when a queue is not empty (ie. continue to run)
    2bb4:	2401      	movs	r4, #1
		switch (inst.type){
    2bb6:	2b06      	cmp	r3, #6
    2bb8:	d1ea      	bne.n	2b90 <ISR_Queue+0xd4>
			case INST_LED_OFF: SetLED(inst.misc, OFF); break;
    2bba:	4b0d      	ldr	r3, [pc, #52]	; (2bf0 <ISR_Queue+0x134>)
    2bbc:	791b      	ldrb	r3, [r3, #4]
    2bbe:	211f      	movs	r1, #31
    2bc0:	4019      	ands	r1, r3
    2bc2:	2201      	movs	r2, #1
    2bc4:	408a      	lsls	r2, r1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2bc6:	095b      	lsrs	r3, r3, #5
    2bc8:	01db      	lsls	r3, r3, #7
    2bca:	21c0      	movs	r1, #192	; 0xc0
    2bcc:	05c9      	lsls	r1, r1, #23
    2bce:	468c      	mov	ip, r1
    2bd0:	4463      	add	r3, ip
    2bd2:	615a      	str	r2, [r3, #20]
    2bd4:	e7d2      	b.n	2b7c <ISR_Queue+0xc0>
    2bd6:	46c0      	nop			; (mov r8, r8)
    2bd8:	20000bb4 	.word	0x20000bb4
    2bdc:	20000c1c 	.word	0x20000c1c
    2be0:	20000c94 	.word	0x20000c94
    2be4:	20000b80 	.word	0x20000b80
    2be8:	20000a40 	.word	0x20000a40
    2bec:	00000b99 	.word	0x00000b99
    2bf0:	2000096c 	.word	0x2000096c
    2bf4:	00000231 	.word	0x00000231
    2bf8:	00000bd5 	.word	0x00000bd5
    2bfc:	20000028 	.word	0x20000028
    2c00:	00000c01 	.word	0x00000c01

00002c04 <GetTimerOfTask>:
	if (task == &task0)
    2c04:	4b08      	ldr	r3, [pc, #32]	; (2c28 <GetTimerOfTask+0x24>)
    2c06:	4298      	cmp	r0, r3
    2c08:	d009      	beq.n	2c1e <GetTimerOfTask+0x1a>
	else if (task == &task1)
    2c0a:	4b08      	ldr	r3, [pc, #32]	; (2c2c <GetTimerOfTask+0x28>)
    2c0c:	4298      	cmp	r0, r3
    2c0e:	d008      	beq.n	2c22 <GetTimerOfTask+0x1e>
	else if (task == &task2)
    2c10:	4b07      	ldr	r3, [pc, #28]	; (2c30 <GetTimerOfTask+0x2c>)
    2c12:	4298      	cmp	r0, r3
    2c14:	d101      	bne.n	2c1a <GetTimerOfTask+0x16>
	return &TIMER2;
    2c16:	4807      	ldr	r0, [pc, #28]	; (2c34 <GetTimerOfTask+0x30>)
}
    2c18:	4770      	bx	lr
	return NULL;
    2c1a:	2000      	movs	r0, #0
    2c1c:	e7fc      	b.n	2c18 <GetTimerOfTask+0x14>
	return &TIMER0;
    2c1e:	4806      	ldr	r0, [pc, #24]	; (2c38 <GetTimerOfTask+0x34>)
    2c20:	e7fa      	b.n	2c18 <GetTimerOfTask+0x14>
	return &TIMER1;
    2c22:	4806      	ldr	r0, [pc, #24]	; (2c3c <GetTimerOfTask+0x38>)
    2c24:	e7f8      	b.n	2c18 <GetTimerOfTask+0x14>
    2c26:	46c0      	nop			; (mov r8, r8)
    2c28:	20000ba0 	.word	0x20000ba0
    2c2c:	20000c28 	.word	0x20000c28
    2c30:	20000c3c 	.word	0x20000c3c
    2c34:	200009dc 	.word	0x200009dc
    2c38:	20000a5c 	.word	0x20000a5c
    2c3c:	20000a18 	.word	0x20000a18

00002c40 <GetDurationOfTimer>:
volatile struct TimerDuration* GetDurationOfTimer(const struct timer_descriptor* const timer){
    2c40:	0003      	movs	r3, r0
	if (timer == &TIMER0)
    2c42:	4a09      	ldr	r2, [pc, #36]	; (2c68 <GetDurationOfTimer+0x28>)
    2c44:	4290      	cmp	r0, r2
    2c46:	d009      	beq.n	2c5c <GetDurationOfTimer+0x1c>
	else if (timer == &TIMER1)
    2c48:	4a08      	ldr	r2, [pc, #32]	; (2c6c <GetDurationOfTimer+0x2c>)
    2c4a:	4290      	cmp	r0, r2
    2c4c:	d009      	beq.n	2c62 <GetDurationOfTimer+0x22>
	else if (timer == &TIMER2)
    2c4e:	4a08      	ldr	r2, [pc, #32]	; (2c70 <GetDurationOfTimer+0x30>)
		return NULL;
    2c50:	2000      	movs	r0, #0
	else if (timer == &TIMER2)
    2c52:	4293      	cmp	r3, r2
    2c54:	d101      	bne.n	2c5a <GetDurationOfTimer+0x1a>
		return task2cfg;
    2c56:	4b07      	ldr	r3, [pc, #28]	; (2c74 <GetDurationOfTimer+0x34>)
    2c58:	6818      	ldr	r0, [r3, #0]
}
    2c5a:	4770      	bx	lr
		return task0cfg;
    2c5c:	4b06      	ldr	r3, [pc, #24]	; (2c78 <GetDurationOfTimer+0x38>)
    2c5e:	6818      	ldr	r0, [r3, #0]
    2c60:	e7fb      	b.n	2c5a <GetDurationOfTimer+0x1a>
		return task1cfg;
    2c62:	4b06      	ldr	r3, [pc, #24]	; (2c7c <GetDurationOfTimer+0x3c>)
    2c64:	6818      	ldr	r0, [r3, #0]
    2c66:	e7f8      	b.n	2c5a <GetDurationOfTimer+0x1a>
    2c68:	20000a5c 	.word	0x20000a5c
    2c6c:	20000a18 	.word	0x20000a18
    2c70:	200009dc 	.word	0x200009dc
    2c74:	20000c70 	.word	0x20000c70
    2c78:	20000a78 	.word	0x20000a78
    2c7c:	20000c78 	.word	0x20000c78

00002c80 <GetDurationOfTask>:
volatile struct TimerDuration* GetDurationOfTask(const struct timer_task* const task){
    2c80:	0003      	movs	r3, r0
	if (task == &task0)
    2c82:	4a09      	ldr	r2, [pc, #36]	; (2ca8 <GetDurationOfTask+0x28>)
    2c84:	4290      	cmp	r0, r2
    2c86:	d009      	beq.n	2c9c <GetDurationOfTask+0x1c>
	else if (task == &task1)
    2c88:	4a08      	ldr	r2, [pc, #32]	; (2cac <GetDurationOfTask+0x2c>)
    2c8a:	4290      	cmp	r0, r2
    2c8c:	d009      	beq.n	2ca2 <GetDurationOfTask+0x22>
	else if (task == &task2)
    2c8e:	4a08      	ldr	r2, [pc, #32]	; (2cb0 <GetDurationOfTask+0x30>)
		return NULL;
    2c90:	2000      	movs	r0, #0
	else if (task == &task2)
    2c92:	4293      	cmp	r3, r2
    2c94:	d101      	bne.n	2c9a <GetDurationOfTask+0x1a>
		return task2cfg;
    2c96:	4b07      	ldr	r3, [pc, #28]	; (2cb4 <GetDurationOfTask+0x34>)
    2c98:	6818      	ldr	r0, [r3, #0]
}
    2c9a:	4770      	bx	lr
		return task0cfg;
    2c9c:	4b06      	ldr	r3, [pc, #24]	; (2cb8 <GetDurationOfTask+0x38>)
    2c9e:	6818      	ldr	r0, [r3, #0]
    2ca0:	e7fb      	b.n	2c9a <GetDurationOfTask+0x1a>
		return task1cfg;
    2ca2:	4b06      	ldr	r3, [pc, #24]	; (2cbc <GetDurationOfTask+0x3c>)
    2ca4:	6818      	ldr	r0, [r3, #0]
    2ca6:	e7f8      	b.n	2c9a <GetDurationOfTask+0x1a>
    2ca8:	20000ba0 	.word	0x20000ba0
    2cac:	20000c28 	.word	0x20000c28
    2cb0:	20000c3c 	.word	0x20000c3c
    2cb4:	20000c70 	.word	0x20000c70
    2cb8:	20000a78 	.word	0x20000a78
    2cbc:	20000c78 	.word	0x20000c78

00002cc0 <ISR_Timer>:
void ISR_Timer(const struct timer_task* const task){
    2cc0:	b510      	push	{r4, lr}
    2cc2:	0004      	movs	r4, r0
	MCUBusy++;
    2cc4:	4a28      	ldr	r2, [pc, #160]	; (2d68 <ISR_Timer+0xa8>)
    2cc6:	6813      	ldr	r3, [r2, #0]
    2cc8:	3301      	adds	r3, #1
    2cca:	6013      	str	r3, [r2, #0]
	MCUSkip = false; // Overrides an MCUSkip order
    2ccc:	2200      	movs	r2, #0
    2cce:	4b27      	ldr	r3, [pc, #156]	; (2d6c <ISR_Timer+0xac>)
    2cd0:	701a      	strb	r2, [r3, #0]
	timer = GetTimerOfTask(task);
    2cd2:	4b27      	ldr	r3, [pc, #156]	; (2d70 <ISR_Timer+0xb0>)
    2cd4:	4798      	blx	r3
    2cd6:	4b27      	ldr	r3, [pc, #156]	; (2d74 <ISR_Timer+0xb4>)
    2cd8:	6098      	str	r0, [r3, #8]
	timer_stop(timer);
    2cda:	4b27      	ldr	r3, [pc, #156]	; (2d78 <ISR_Timer+0xb8>)
    2cdc:	4798      	blx	r3
	dur = GetDurationOfTask(task);
    2cde:	0020      	movs	r0, r4
    2ce0:	4b26      	ldr	r3, [pc, #152]	; (2d7c <ISR_Timer+0xbc>)
    2ce2:	4798      	blx	r3
	if (dur->overtime){
    2ce4:	7c03      	ldrb	r3, [r0, #16]
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	d008      	beq.n	2cfc <ISR_Timer+0x3c>
		dur->count++;
    2cea:	6943      	ldr	r3, [r0, #20]
    2cec:	3301      	adds	r3, #1
    2cee:	6143      	str	r3, [r0, #20]
		if (dur->count < dur->countCap){ // Don't fire event yet
    2cf0:	6942      	ldr	r2, [r0, #20]
    2cf2:	6983      	ldr	r3, [r0, #24]
    2cf4:	429a      	cmp	r2, r3
    2cf6:	d31e      	bcc.n	2d36 <ISR_Timer+0x76>
			dur->count = 0;
    2cf8:	2300      	movs	r3, #0
    2cfa:	6143      	str	r3, [r0, #20]
	message.eventType = EVENT_TIMER;
    2cfc:	491d      	ldr	r1, [pc, #116]	; (2d74 <ISR_Timer+0xb4>)
    2cfe:	2301      	movs	r3, #1
    2d00:	730b      	strb	r3, [r1, #12]
	message.eventBandState = (uint8)bandState;
    2d02:	4b1f      	ldr	r3, [pc, #124]	; (2d80 <ISR_Timer+0xc0>)
    2d04:	781b      	ldrb	r3, [r3, #0]
    2d06:	734b      	strb	r3, [r1, #13]
	message.eventInfo[0] = EVENT_TIMER_EXPIRED;
    2d08:	2300      	movs	r3, #0
    2d0a:	738b      	strb	r3, [r1, #14]
	*(struct timer_task**)(message.eventInfo + 1) = (struct timer_task*)task;
    2d0c:	73cc      	strb	r4, [r1, #15]
    2d0e:	0a22      	lsrs	r2, r4, #8
    2d10:	740a      	strb	r2, [r1, #16]
    2d12:	0c22      	lsrs	r2, r4, #16
    2d14:	744a      	strb	r2, [r1, #17]
    2d16:	0e24      	lsrs	r4, r4, #24
    2d18:	748c      	strb	r4, [r1, #18]
	QUE_Enqueue(&writeEventQueue, &message);
    2d1a:	310c      	adds	r1, #12
    2d1c:	4819      	ldr	r0, [pc, #100]	; (2d84 <ISR_Timer+0xc4>)
    2d1e:	4b1a      	ldr	r3, [pc, #104]	; (2d88 <ISR_Timer+0xc8>)
    2d20:	4798      	blx	r3
	if (timer == &TIMER0 && !_timer_is_started(&TIMER0.device))
    2d22:	4b1a      	ldr	r3, [pc, #104]	; (2d8c <ISR_Timer+0xcc>)
    2d24:	4a13      	ldr	r2, [pc, #76]	; (2d74 <ISR_Timer+0xb4>)
    2d26:	6892      	ldr	r2, [r2, #8]
    2d28:	429a      	cmp	r2, r3
    2d2a:	d00f      	beq.n	2d4c <ISR_Timer+0x8c>
	MCUBusy--;
    2d2c:	4a0e      	ldr	r2, [pc, #56]	; (2d68 <ISR_Timer+0xa8>)
    2d2e:	6813      	ldr	r3, [r2, #0]
    2d30:	3b01      	subs	r3, #1
    2d32:	6013      	str	r3, [r2, #0]
}
    2d34:	bd10      	pop	{r4, pc}
			EnableTimer(timer);
    2d36:	4b0f      	ldr	r3, [pc, #60]	; (2d74 <ISR_Timer+0xb4>)
    2d38:	6898      	ldr	r0, [r3, #8]
    2d3a:	2300      	movs	r3, #0
    2d3c:	68c2      	ldr	r2, [r0, #12]
    2d3e:	8293      	strh	r3, [r2, #20]
	timer_start(timer);
    2d40:	4b13      	ldr	r3, [pc, #76]	; (2d90 <ISR_Timer+0xd0>)
    2d42:	4798      	blx	r3
			MCUSkip = true;
    2d44:	2201      	movs	r2, #1
    2d46:	4b09      	ldr	r3, [pc, #36]	; (2d6c <ISR_Timer+0xac>)
    2d48:	701a      	strb	r2, [r3, #0]
			goto END;
    2d4a:	e7ea      	b.n	2d22 <ISR_Timer+0x62>
	if (timer == &TIMER0 && !_timer_is_started(&TIMER0.device))
    2d4c:	0018      	movs	r0, r3
    2d4e:	4b11      	ldr	r3, [pc, #68]	; (2d94 <ISR_Timer+0xd4>)
    2d50:	4798      	blx	r3
    2d52:	2800      	cmp	r0, #0
    2d54:	d1ea      	bne.n	2d2c <ISR_Timer+0x6c>
		EnableTimer(timer);
    2d56:	4b07      	ldr	r3, [pc, #28]	; (2d74 <ISR_Timer+0xb4>)
    2d58:	6898      	ldr	r0, [r3, #8]
    2d5a:	2300      	movs	r3, #0
    2d5c:	68c2      	ldr	r2, [r0, #12]
    2d5e:	8293      	strh	r3, [r2, #20]
    2d60:	4b0b      	ldr	r3, [pc, #44]	; (2d90 <ISR_Timer+0xd0>)
    2d62:	4798      	blx	r3
    2d64:	e7e2      	b.n	2d2c <ISR_Timer+0x6c>
    2d66:	46c0      	nop			; (mov r8, r8)
    2d68:	20000bb4 	.word	0x20000bb4
    2d6c:	20000c1c 	.word	0x20000c1c
    2d70:	00002c05 	.word	0x00002c05
    2d74:	2000096c 	.word	0x2000096c
    2d78:	00000b99 	.word	0x00000b99
    2d7c:	00002c81 	.word	0x00002c81
    2d80:	20000c24 	.word	0x20000c24
    2d84:	20000a7c 	.word	0x20000a7c
    2d88:	000001e5 	.word	0x000001e5
    2d8c:	20000a5c 	.word	0x20000a5c
    2d90:	00000b5d 	.word	0x00000b5d
    2d94:	00001b63 	.word	0x00001b63

00002d98 <ConfigTimer>:
void ConfigTimer(struct timer_descriptor* timer, TimerConfig template){
    2d98:	b570      	push	{r4, r5, r6, lr}
	if (timer == &TIMER0)
    2d9a:	4b14      	ldr	r3, [pc, #80]	; (2dec <ConfigTimer+0x54>)
    2d9c:	4298      	cmp	r0, r3
    2d9e:	d018      	beq.n	2dd2 <ConfigTimer+0x3a>
	else if (timer == &TIMER1)
    2da0:	4b13      	ldr	r3, [pc, #76]	; (2df0 <ConfigTimer+0x58>)
    2da2:	4298      	cmp	r0, r3
    2da4:	d019      	beq.n	2dda <ConfigTimer+0x42>
	else if (timer == &TIMER2)
    2da6:	4b13      	ldr	r3, [pc, #76]	; (2df4 <ConfigTimer+0x5c>)
    2da8:	4298      	cmp	r0, r3
    2daa:	d01a      	beq.n	2de2 <ConfigTimer+0x4a>
		cfg = NULL;
    2dac:	2200      	movs	r2, #0
    2dae:	4b12      	ldr	r3, [pc, #72]	; (2df8 <ConfigTimer+0x60>)
    2db0:	621a      	str	r2, [r3, #32]
	*cfg = &durations[template];
    2db2:	4b11      	ldr	r3, [pc, #68]	; (2df8 <ConfigTimer+0x60>)
    2db4:	6a1d      	ldr	r5, [r3, #32]
    2db6:	00cb      	lsls	r3, r1, #3
    2db8:	1a5a      	subs	r2, r3, r1
    2dba:	0092      	lsls	r2, r2, #2
    2dbc:	4c0f      	ldr	r4, [pc, #60]	; (2dfc <ConfigTimer+0x64>)
    2dbe:	1912      	adds	r2, r2, r4
    2dc0:	602a      	str	r2, [r5, #0]
	(*cfg)->count = 0;
    2dc2:	0013      	movs	r3, r2
    2dc4:	2200      	movs	r2, #0
    2dc6:	615a      	str	r2, [r3, #20]
	timer_set_clock_cycles_per_tick(timer, (*cfg)->cycles);
    2dc8:	682b      	ldr	r3, [r5, #0]
    2dca:	6899      	ldr	r1, [r3, #8]
    2dcc:	4b0c      	ldr	r3, [pc, #48]	; (2e00 <ConfigTimer+0x68>)
    2dce:	4798      	blx	r3
}
    2dd0:	bd70      	pop	{r4, r5, r6, pc}
		cfg = &task0cfg;
    2dd2:	4a0c      	ldr	r2, [pc, #48]	; (2e04 <ConfigTimer+0x6c>)
    2dd4:	4b08      	ldr	r3, [pc, #32]	; (2df8 <ConfigTimer+0x60>)
    2dd6:	621a      	str	r2, [r3, #32]
    2dd8:	e7eb      	b.n	2db2 <ConfigTimer+0x1a>
		cfg = &task1cfg;
    2dda:	4a0b      	ldr	r2, [pc, #44]	; (2e08 <ConfigTimer+0x70>)
    2ddc:	4b06      	ldr	r3, [pc, #24]	; (2df8 <ConfigTimer+0x60>)
    2dde:	621a      	str	r2, [r3, #32]
    2de0:	e7e7      	b.n	2db2 <ConfigTimer+0x1a>
		cfg = &task2cfg;
    2de2:	4a0a      	ldr	r2, [pc, #40]	; (2e0c <ConfigTimer+0x74>)
    2de4:	4b04      	ldr	r3, [pc, #16]	; (2df8 <ConfigTimer+0x60>)
    2de6:	621a      	str	r2, [r3, #32]
    2de8:	e7e3      	b.n	2db2 <ConfigTimer+0x1a>
    2dea:	46c0      	nop			; (mov r8, r8)
    2dec:	20000a5c 	.word	0x20000a5c
    2df0:	20000a18 	.word	0x20000a18
    2df4:	200009dc 	.word	0x200009dc
    2df8:	2000096c 	.word	0x2000096c
    2dfc:	20000a84 	.word	0x20000a84
    2e00:	00000bd5 	.word	0x00000bd5
    2e04:	20000a78 	.word	0x20000a78
    2e08:	20000c78 	.word	0x20000c78
    2e0c:	20000c70 	.word	0x20000c70

00002e10 <InitTimers>:
{
    2e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e12:	46d6      	mov	lr, sl
    2e14:	464f      	mov	r7, r9
    2e16:	b580      	push	{r7, lr}
    2e18:	b083      	sub	sp, #12
	durations[TIMER_CONFIG_MAIN].id							= TIMER_CONFIG_MAIN;
    2e1a:	4d50      	ldr	r5, [pc, #320]	; (2f5c <InitTimers+0x14c>)
    2e1c:	2300      	movs	r3, #0
    2e1e:	702b      	strb	r3, [r5, #0]
	durations[TIMER_CONFIG_MAIN].duration					= MAIN_TIMER_DURATION;
    2e20:	23fe      	movs	r3, #254	; 0xfe
    2e22:	059b      	lsls	r3, r3, #22
    2e24:	606b      	str	r3, [r5, #4]
	durations[TIMER_CONFIG_DISPLAY].id						= TIMER_CONFIG_DISPLAY;
    2e26:	2301      	movs	r3, #1
    2e28:	772b      	strb	r3, [r5, #28]
	durations[TIMER_CONFIG_DISPLAY].duration				= DISPLAY_TIMER_DURATION;
    2e2a:	4b4d      	ldr	r3, [pc, #308]	; (2f60 <InitTimers+0x150>)
    2e2c:	622b      	str	r3, [r5, #32]
	durations[TIMER_CONFIG_DISPLAY_BUTTON].id				= TIMER_CONFIG_DISPLAY_BUTTON;
    2e2e:	2202      	movs	r2, #2
    2e30:	2338      	movs	r3, #56	; 0x38
    2e32:	54ea      	strb	r2, [r5, r3]
	durations[TIMER_CONFIG_DISPLAY_BUTTON].duration			= DISPLAY_TIMER_BUTTON_DURATION;
    2e34:	2381      	movs	r3, #129	; 0x81
    2e36:	05db      	lsls	r3, r3, #23
    2e38:	63eb      	str	r3, [r5, #60]	; 0x3c
	durations[TIMER_CONFIG_NORMAL].id						= TIMER_CONFIG_NORMAL;
    2e3a:	2103      	movs	r1, #3
    2e3c:	3252      	adds	r2, #82	; 0x52
    2e3e:	54a9      	strb	r1, [r5, r2]
	durations[TIMER_CONFIG_NORMAL].duration					= NORMAL_TIMER_DURATION;
    2e40:	4a48      	ldr	r2, [pc, #288]	; (2f64 <InitTimers+0x154>)
    2e42:	65aa      	str	r2, [r5, #88]	; 0x58
	durations[TIMER_CONFIG_CONNECTING].id					= TIMER_CONFIG_CONNECTING;
    2e44:	3101      	adds	r1, #1
    2e46:	2270      	movs	r2, #112	; 0x70
    2e48:	54a9      	strb	r1, [r5, r2]
	durations[TIMER_CONFIG_CONNECTING].duration				= CONNECTING_TIMER_DURATION;
    2e4a:	676b      	str	r3, [r5, #116]	; 0x74
	durations[TIMER_CONFIG_CONNECTING_TIMEOUT].id			= TIMER_CONFIG_CONNECTING_TIMEOUT;
    2e4c:	3a6b      	subs	r2, #107	; 0x6b
    2e4e:	238c      	movs	r3, #140	; 0x8c
    2e50:	54ea      	strb	r2, [r5, r3]
	durations[TIMER_CONFIG_CONNECTING_TIMEOUT].duration		= CONNECTING_TIMER_TIMEOUT;
    2e52:	4a45      	ldr	r2, [pc, #276]	; (2f68 <InitTimers+0x158>)
    2e54:	3304      	adds	r3, #4
    2e56:	50ea      	str	r2, [r5, r3]
	durations[TIMER_CONFIG_DISCONNECTING_TIMEOUT].id		= TIMER_CONFIG_DISCONNECTING_TIMEOUT;
    2e58:	2206      	movs	r2, #6
    2e5a:	3318      	adds	r3, #24
    2e5c:	54ea      	strb	r2, [r5, r3]
	durations[TIMER_CONFIG_DISCONNECTING_TIMEOUT].duration	= DISCONNECTING_TIMER_TIMEOUT;
    2e5e:	4b43      	ldr	r3, [pc, #268]	; (2f6c <InitTimers+0x15c>)
    2e60:	32a6      	adds	r2, #166	; 0xa6
    2e62:	50ab      	str	r3, [r5, r2]
	durations[TIMER_CONFIG_LOWPOWER].id						= TIMER_CONFIG_LOWPOWER;
    2e64:	3103      	adds	r1, #3
    2e66:	3218      	adds	r2, #24
    2e68:	54a9      	strb	r1, [r5, r2]
	durations[TIMER_CONFIG_LOWPOWER].duration				= LOWPOWER_TIMER_DURATION;
    2e6a:	3204      	adds	r2, #4
    2e6c:	50ab      	str	r3, [r5, r2]
	durations[TIMER_CONFIG_LOWPOWER_BUTTON].id				= TIMER_CONFIG_LOWPOWER_BUTTON;
    2e6e:	3ac0      	subs	r2, #192	; 0xc0
    2e70:	23e0      	movs	r3, #224	; 0xe0
    2e72:	54ea      	strb	r2, [r5, r3]
	durations[TIMER_CONFIG_LOWPOWER_BUTTON].duration		= LOWPOWER_TIMER_BUTTON_DURATION;
    2e74:	2280      	movs	r2, #128	; 0x80
    2e76:	05d2      	lsls	r2, r2, #23
    2e78:	3304      	adds	r3, #4
    2e7a:	50ea      	str	r2, [r5, r3]
	durations[TIMER_CONFIG_NONE].id							= TIMER_CONFIG_NONE;
    2e7c:	2209      	movs	r2, #9
    2e7e:	3318      	adds	r3, #24
    2e80:	54ea      	strb	r2, [r5, r3]
	durations[TIMER_CONFIG_NONE].duration					= 0;
    2e82:	2200      	movs	r2, #0
    2e84:	3304      	adds	r3, #4
    2e86:	50ea      	str	r2, [r5, r3]
    2e88:	1d2c      	adds	r4, r5, #4
    2e8a:	18ed      	adds	r5, r5, r3
		if (durations[i].duration >= TIMER_CONFIG_MAX_DURATION){
    2e8c:	4b38      	ldr	r3, [pc, #224]	; (2f70 <InitTimers+0x160>)
    2e8e:	469a      	mov	sl, r3
			durations[i].cycles = (uint)(durations[i].duration * CLOCK_SEC_MULT);
    2e90:	4b38      	ldr	r3, [pc, #224]	; (2f74 <InitTimers+0x164>)
    2e92:	4699      	mov	r9, r3
    2e94:	4f38      	ldr	r7, [pc, #224]	; (2f78 <InitTimers+0x168>)
    2e96:	e017      	b.n	2ec8 <InitTimers+0xb8>
    2e98:	1c30      	adds	r0, r6, #0
    2e9a:	4b38      	ldr	r3, [pc, #224]	; (2f7c <InitTimers+0x16c>)
    2e9c:	4798      	blx	r3
    2e9e:	2200      	movs	r2, #0
    2ea0:	4b37      	ldr	r3, [pc, #220]	; (2f80 <InitTimers+0x170>)
    2ea2:	9000      	str	r0, [sp, #0]
    2ea4:	9101      	str	r1, [sp, #4]
    2ea6:	47c8      	blx	r9
    2ea8:	47b8      	blx	r7
    2eaa:	6060      	str	r0, [r4, #4]
			durations[i].length = durations[i].duration * (CLOCK_SEC_MULT / TIMER_LENGTH);
    2eac:	4a35      	ldr	r2, [pc, #212]	; (2f84 <InitTimers+0x174>)
    2eae:	4b36      	ldr	r3, [pc, #216]	; (2f88 <InitTimers+0x178>)
    2eb0:	9800      	ldr	r0, [sp, #0]
    2eb2:	9901      	ldr	r1, [sp, #4]
    2eb4:	47c8      	blx	r9
    2eb6:	47b8      	blx	r7
    2eb8:	60a0      	str	r0, [r4, #8]
			durations[i].overtime = false;
    2eba:	2300      	movs	r3, #0
    2ebc:	7323      	strb	r3, [r4, #12]
			durations[i].count = 0;
    2ebe:	6123      	str	r3, [r4, #16]
			durations[i].countCap = 0;
    2ec0:	6163      	str	r3, [r4, #20]
    2ec2:	341c      	adds	r4, #28
	for (int i = 0; i < TIMER_CONFIG_COUNT; i++){
    2ec4:	42ac      	cmp	r4, r5
    2ec6:	d020      	beq.n	2f0a <InitTimers+0xfa>
		if (durations[i].duration >= TIMER_CONFIG_MAX_DURATION){
    2ec8:	6826      	ldr	r6, [r4, #0]
    2eca:	4928      	ldr	r1, [pc, #160]	; (2f6c <InitTimers+0x15c>)
    2ecc:	1c30      	adds	r0, r6, #0
    2ece:	47d0      	blx	sl
    2ed0:	2800      	cmp	r0, #0
    2ed2:	d0e1      	beq.n	2e98 <InitTimers+0x88>
			durations[i].cycles = TIMER_CONFIG_MAX_DURATION * CLOCK_SEC_MULT;
    2ed4:	4b2d      	ldr	r3, [pc, #180]	; (2f8c <InitTimers+0x17c>)
    2ed6:	6063      	str	r3, [r4, #4]
			durations[i].overtime = true;
    2ed8:	2301      	movs	r3, #1
    2eda:	7323      	strb	r3, [r4, #12]
			durations[i].count = 0;
    2edc:	2300      	movs	r3, #0
    2ede:	6123      	str	r3, [r4, #16]
			durations[i].countCap = (uint)durations[i].duration / TIMER_CONFIG_MAX_DURATION;
    2ee0:	1c30      	adds	r0, r6, #0
    2ee2:	4b2b      	ldr	r3, [pc, #172]	; (2f90 <InitTimers+0x180>)
    2ee4:	4798      	blx	r3
    2ee6:	210a      	movs	r1, #10
    2ee8:	4b2a      	ldr	r3, [pc, #168]	; (2f94 <InitTimers+0x184>)
    2eea:	4798      	blx	r3
    2eec:	0003      	movs	r3, r0
    2eee:	6160      	str	r0, [r4, #20]
			durations[i].length = TIMER_CONFIG_MAX_DURATION * durations[i].countCap * (CLOCK_SEC_MULT / TIMER_LENGTH);
    2ef0:	0080      	lsls	r0, r0, #2
    2ef2:	18c0      	adds	r0, r0, r3
    2ef4:	0040      	lsls	r0, r0, #1
    2ef6:	4b28      	ldr	r3, [pc, #160]	; (2f98 <InitTimers+0x188>)
    2ef8:	4798      	blx	r3
    2efa:	4a22      	ldr	r2, [pc, #136]	; (2f84 <InitTimers+0x174>)
    2efc:	4b22      	ldr	r3, [pc, #136]	; (2f88 <InitTimers+0x178>)
    2efe:	4e1d      	ldr	r6, [pc, #116]	; (2f74 <InitTimers+0x164>)
    2f00:	47b0      	blx	r6
    2f02:	4b1d      	ldr	r3, [pc, #116]	; (2f78 <InitTimers+0x168>)
    2f04:	4798      	blx	r3
    2f06:	60a0      	str	r0, [r4, #8]
    2f08:	e7db      	b.n	2ec2 <InitTimers+0xb2>
	task0.cb = task1.cb = task2.cb = ISR_Timer;
    2f0a:	4c24      	ldr	r4, [pc, #144]	; (2f9c <InitTimers+0x18c>)
    2f0c:	4b24      	ldr	r3, [pc, #144]	; (2fa0 <InitTimers+0x190>)
    2f0e:	60e3      	str	r3, [r4, #12]
    2f10:	4d24      	ldr	r5, [pc, #144]	; (2fa4 <InitTimers+0x194>)
    2f12:	60eb      	str	r3, [r5, #12]
    2f14:	4e24      	ldr	r6, [pc, #144]	; (2fa8 <InitTimers+0x198>)
    2f16:	60f3      	str	r3, [r6, #12]
	task0.mode = task1.mode = task2.mode = TIMER_TASK_REPEAT;
    2f18:	2301      	movs	r3, #1
    2f1a:	7423      	strb	r3, [r4, #16]
    2f1c:	742b      	strb	r3, [r5, #16]
    2f1e:	7433      	strb	r3, [r6, #16]
	task0.interval = task1.interval = task2.interval = 1;
    2f20:	60a3      	str	r3, [r4, #8]
    2f22:	60ab      	str	r3, [r5, #8]
    2f24:	60b3      	str	r3, [r6, #8]
	QUE_InitQueue(&task3, sizeof(struct QueueInst));
    2f26:	2108      	movs	r1, #8
    2f28:	4820      	ldr	r0, [pc, #128]	; (2fac <InitTimers+0x19c>)
    2f2a:	4f21      	ldr	r7, [pc, #132]	; (2fb0 <InitTimers+0x1a0>)
    2f2c:	47b8      	blx	r7
	QUE_InitQueue(&task4, sizeof(struct QueueInst));
    2f2e:	2108      	movs	r1, #8
    2f30:	4820      	ldr	r0, [pc, #128]	; (2fb4 <InitTimers+0x1a4>)
    2f32:	47b8      	blx	r7
	timer_add_task(&TIMER0, &task0);
    2f34:	4f20      	ldr	r7, [pc, #128]	; (2fb8 <InitTimers+0x1a8>)
    2f36:	0031      	movs	r1, r6
    2f38:	0038      	movs	r0, r7
    2f3a:	4e20      	ldr	r6, [pc, #128]	; (2fbc <InitTimers+0x1ac>)
    2f3c:	47b0      	blx	r6
	timer_add_task(&TIMER1, &task1);
    2f3e:	0029      	movs	r1, r5
    2f40:	481f      	ldr	r0, [pc, #124]	; (2fc0 <InitTimers+0x1b0>)
    2f42:	47b0      	blx	r6
	timer_add_task(&TIMER2, &task2);
    2f44:	0021      	movs	r1, r4
    2f46:	481f      	ldr	r0, [pc, #124]	; (2fc4 <InitTimers+0x1b4>)
    2f48:	47b0      	blx	r6
	ConfigTimer(&TIMER0, TIMER_CONFIG_MAIN);
    2f4a:	2100      	movs	r1, #0
    2f4c:	0038      	movs	r0, r7
    2f4e:	4b1e      	ldr	r3, [pc, #120]	; (2fc8 <InitTimers+0x1b8>)
    2f50:	4798      	blx	r3
}
    2f52:	b003      	add	sp, #12
    2f54:	bc0c      	pop	{r2, r3}
    2f56:	4691      	mov	r9, r2
    2f58:	469a      	mov	sl, r3
    2f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f5c:	20000a84 	.word	0x20000a84
    2f60:	40400000 	.word	0x40400000
    2f64:	43340000 	.word	0x43340000
    2f68:	43960000 	.word	0x43960000
    2f6c:	41200000 	.word	0x41200000
    2f70:	0000302d 	.word	0x0000302d
    2f74:	00003bf1 	.word	0x00003bf1
    2f78:	00003085 	.word	0x00003085
    2f7c:	000047f5 	.word	0x000047f5
    2f80:	40ae8480 	.word	0x40ae8480
    2f84:	24924925 	.word	0x24924925
    2f88:	402c9249 	.word	0x402c9249
    2f8c:	00009896 	.word	0x00009896
    2f90:	00003055 	.word	0x00003055
    2f94:	00000eeb 	.word	0x00000eeb
    2f98:	00004785 	.word	0x00004785
    2f9c:	20000c3c 	.word	0x20000c3c
    2fa0:	00002cc1 	.word	0x00002cc1
    2fa4:	20000c28 	.word	0x20000c28
    2fa8:	20000ba0 	.word	0x20000ba0
    2fac:	20000c94 	.word	0x20000c94
    2fb0:	000001b5 	.word	0x000001b5
    2fb4:	20000b80 	.word	0x20000b80
    2fb8:	20000a5c 	.word	0x20000a5c
    2fbc:	00000c01 	.word	0x00000c01
    2fc0:	20000a18 	.word	0x20000a18
    2fc4:	200009dc 	.word	0x200009dc
    2fc8:	00002d99 	.word	0x00002d99

00002fcc <__aeabi_cfrcmple>:
    2fcc:	4684      	mov	ip, r0
    2fce:	1c08      	adds	r0, r1, #0
    2fd0:	4661      	mov	r1, ip
    2fd2:	e7ff      	b.n	2fd4 <__aeabi_cfcmpeq>

00002fd4 <__aeabi_cfcmpeq>:
    2fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2fd6:	f000 f8d9 	bl	318c <__lesf2>
    2fda:	2800      	cmp	r0, #0
    2fdc:	d401      	bmi.n	2fe2 <__aeabi_cfcmpeq+0xe>
    2fde:	2100      	movs	r1, #0
    2fe0:	42c8      	cmn	r0, r1
    2fe2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002fe4 <__aeabi_fcmpeq>:
    2fe4:	b510      	push	{r4, lr}
    2fe6:	f000 f86b 	bl	30c0 <__eqsf2>
    2fea:	4240      	negs	r0, r0
    2fec:	3001      	adds	r0, #1
    2fee:	bd10      	pop	{r4, pc}

00002ff0 <__aeabi_fcmplt>:
    2ff0:	b510      	push	{r4, lr}
    2ff2:	f000 f8cb 	bl	318c <__lesf2>
    2ff6:	2800      	cmp	r0, #0
    2ff8:	db01      	blt.n	2ffe <__aeabi_fcmplt+0xe>
    2ffa:	2000      	movs	r0, #0
    2ffc:	bd10      	pop	{r4, pc}
    2ffe:	2001      	movs	r0, #1
    3000:	bd10      	pop	{r4, pc}
    3002:	46c0      	nop			; (mov r8, r8)

00003004 <__aeabi_fcmple>:
    3004:	b510      	push	{r4, lr}
    3006:	f000 f8c1 	bl	318c <__lesf2>
    300a:	2800      	cmp	r0, #0
    300c:	dd01      	ble.n	3012 <__aeabi_fcmple+0xe>
    300e:	2000      	movs	r0, #0
    3010:	bd10      	pop	{r4, pc}
    3012:	2001      	movs	r0, #1
    3014:	bd10      	pop	{r4, pc}
    3016:	46c0      	nop			; (mov r8, r8)

00003018 <__aeabi_fcmpgt>:
    3018:	b510      	push	{r4, lr}
    301a:	f000 f877 	bl	310c <__gesf2>
    301e:	2800      	cmp	r0, #0
    3020:	dc01      	bgt.n	3026 <__aeabi_fcmpgt+0xe>
    3022:	2000      	movs	r0, #0
    3024:	bd10      	pop	{r4, pc}
    3026:	2001      	movs	r0, #1
    3028:	bd10      	pop	{r4, pc}
    302a:	46c0      	nop			; (mov r8, r8)

0000302c <__aeabi_fcmpge>:
    302c:	b510      	push	{r4, lr}
    302e:	f000 f86d 	bl	310c <__gesf2>
    3032:	2800      	cmp	r0, #0
    3034:	da01      	bge.n	303a <__aeabi_fcmpge+0xe>
    3036:	2000      	movs	r0, #0
    3038:	bd10      	pop	{r4, pc}
    303a:	2001      	movs	r0, #1
    303c:	bd10      	pop	{r4, pc}
    303e:	46c0      	nop			; (mov r8, r8)

00003040 <__ffssi2>:
    3040:	b510      	push	{r4, lr}
    3042:	2300      	movs	r3, #0
    3044:	2800      	cmp	r0, #0
    3046:	d002      	beq.n	304e <__ffssi2+0xe>
    3048:	f001 fc82 	bl	4950 <__ctzsi2>
    304c:	1c43      	adds	r3, r0, #1
    304e:	0018      	movs	r0, r3
    3050:	bd10      	pop	{r4, pc}
    3052:	46c0      	nop			; (mov r8, r8)

00003054 <__aeabi_f2uiz>:
    3054:	219e      	movs	r1, #158	; 0x9e
    3056:	b510      	push	{r4, lr}
    3058:	05c9      	lsls	r1, r1, #23
    305a:	1c04      	adds	r4, r0, #0
    305c:	f7ff ffe6 	bl	302c <__aeabi_fcmpge>
    3060:	2800      	cmp	r0, #0
    3062:	d103      	bne.n	306c <__aeabi_f2uiz+0x18>
    3064:	1c20      	adds	r0, r4, #0
    3066:	f000 fa6f 	bl	3548 <__aeabi_f2iz>
    306a:	bd10      	pop	{r4, pc}
    306c:	219e      	movs	r1, #158	; 0x9e
    306e:	1c20      	adds	r0, r4, #0
    3070:	05c9      	lsls	r1, r1, #23
    3072:	f000 f8cd 	bl	3210 <__aeabi_fsub>
    3076:	f000 fa67 	bl	3548 <__aeabi_f2iz>
    307a:	2380      	movs	r3, #128	; 0x80
    307c:	061b      	lsls	r3, r3, #24
    307e:	469c      	mov	ip, r3
    3080:	4460      	add	r0, ip
    3082:	e7f2      	b.n	306a <__aeabi_f2uiz+0x16>

00003084 <__aeabi_d2uiz>:
    3084:	b570      	push	{r4, r5, r6, lr}
    3086:	2200      	movs	r2, #0
    3088:	4b0c      	ldr	r3, [pc, #48]	; (30bc <__aeabi_d2uiz+0x38>)
    308a:	0004      	movs	r4, r0
    308c:	000d      	movs	r5, r1
    308e:	f001 fc37 	bl	4900 <__aeabi_dcmpge>
    3092:	2800      	cmp	r0, #0
    3094:	d104      	bne.n	30a0 <__aeabi_d2uiz+0x1c>
    3096:	0020      	movs	r0, r4
    3098:	0029      	movs	r1, r5
    309a:	f001 fb3f 	bl	471c <__aeabi_d2iz>
    309e:	bd70      	pop	{r4, r5, r6, pc}
    30a0:	4b06      	ldr	r3, [pc, #24]	; (30bc <__aeabi_d2uiz+0x38>)
    30a2:	2200      	movs	r2, #0
    30a4:	0020      	movs	r0, r4
    30a6:	0029      	movs	r1, r5
    30a8:	f001 f822 	bl	40f0 <__aeabi_dsub>
    30ac:	f001 fb36 	bl	471c <__aeabi_d2iz>
    30b0:	2380      	movs	r3, #128	; 0x80
    30b2:	061b      	lsls	r3, r3, #24
    30b4:	469c      	mov	ip, r3
    30b6:	4460      	add	r0, ip
    30b8:	e7f1      	b.n	309e <__aeabi_d2uiz+0x1a>
    30ba:	46c0      	nop			; (mov r8, r8)
    30bc:	41e00000 	.word	0x41e00000

000030c0 <__eqsf2>:
    30c0:	b570      	push	{r4, r5, r6, lr}
    30c2:	0042      	lsls	r2, r0, #1
    30c4:	0245      	lsls	r5, r0, #9
    30c6:	024e      	lsls	r6, r1, #9
    30c8:	004c      	lsls	r4, r1, #1
    30ca:	0fc3      	lsrs	r3, r0, #31
    30cc:	0a6d      	lsrs	r5, r5, #9
    30ce:	0e12      	lsrs	r2, r2, #24
    30d0:	0a76      	lsrs	r6, r6, #9
    30d2:	0e24      	lsrs	r4, r4, #24
    30d4:	0fc9      	lsrs	r1, r1, #31
    30d6:	2001      	movs	r0, #1
    30d8:	2aff      	cmp	r2, #255	; 0xff
    30da:	d006      	beq.n	30ea <__eqsf2+0x2a>
    30dc:	2cff      	cmp	r4, #255	; 0xff
    30de:	d003      	beq.n	30e8 <__eqsf2+0x28>
    30e0:	42a2      	cmp	r2, r4
    30e2:	d101      	bne.n	30e8 <__eqsf2+0x28>
    30e4:	42b5      	cmp	r5, r6
    30e6:	d006      	beq.n	30f6 <__eqsf2+0x36>
    30e8:	bd70      	pop	{r4, r5, r6, pc}
    30ea:	2d00      	cmp	r5, #0
    30ec:	d1fc      	bne.n	30e8 <__eqsf2+0x28>
    30ee:	2cff      	cmp	r4, #255	; 0xff
    30f0:	d1fa      	bne.n	30e8 <__eqsf2+0x28>
    30f2:	2e00      	cmp	r6, #0
    30f4:	d1f8      	bne.n	30e8 <__eqsf2+0x28>
    30f6:	428b      	cmp	r3, r1
    30f8:	d006      	beq.n	3108 <__eqsf2+0x48>
    30fa:	2001      	movs	r0, #1
    30fc:	2a00      	cmp	r2, #0
    30fe:	d1f3      	bne.n	30e8 <__eqsf2+0x28>
    3100:	0028      	movs	r0, r5
    3102:	1e45      	subs	r5, r0, #1
    3104:	41a8      	sbcs	r0, r5
    3106:	e7ef      	b.n	30e8 <__eqsf2+0x28>
    3108:	2000      	movs	r0, #0
    310a:	e7ed      	b.n	30e8 <__eqsf2+0x28>

0000310c <__gesf2>:
    310c:	b5f0      	push	{r4, r5, r6, r7, lr}
    310e:	0042      	lsls	r2, r0, #1
    3110:	0245      	lsls	r5, r0, #9
    3112:	024c      	lsls	r4, r1, #9
    3114:	0fc3      	lsrs	r3, r0, #31
    3116:	0048      	lsls	r0, r1, #1
    3118:	0a6d      	lsrs	r5, r5, #9
    311a:	0e12      	lsrs	r2, r2, #24
    311c:	0a64      	lsrs	r4, r4, #9
    311e:	0e00      	lsrs	r0, r0, #24
    3120:	0fc9      	lsrs	r1, r1, #31
    3122:	2aff      	cmp	r2, #255	; 0xff
    3124:	d01e      	beq.n	3164 <__gesf2+0x58>
    3126:	28ff      	cmp	r0, #255	; 0xff
    3128:	d021      	beq.n	316e <__gesf2+0x62>
    312a:	2a00      	cmp	r2, #0
    312c:	d10a      	bne.n	3144 <__gesf2+0x38>
    312e:	426e      	negs	r6, r5
    3130:	416e      	adcs	r6, r5
    3132:	b2f6      	uxtb	r6, r6
    3134:	2800      	cmp	r0, #0
    3136:	d10f      	bne.n	3158 <__gesf2+0x4c>
    3138:	2c00      	cmp	r4, #0
    313a:	d10d      	bne.n	3158 <__gesf2+0x4c>
    313c:	2000      	movs	r0, #0
    313e:	2d00      	cmp	r5, #0
    3140:	d009      	beq.n	3156 <__gesf2+0x4a>
    3142:	e005      	b.n	3150 <__gesf2+0x44>
    3144:	2800      	cmp	r0, #0
    3146:	d101      	bne.n	314c <__gesf2+0x40>
    3148:	2c00      	cmp	r4, #0
    314a:	d001      	beq.n	3150 <__gesf2+0x44>
    314c:	428b      	cmp	r3, r1
    314e:	d011      	beq.n	3174 <__gesf2+0x68>
    3150:	2101      	movs	r1, #1
    3152:	4258      	negs	r0, r3
    3154:	4308      	orrs	r0, r1
    3156:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3158:	2e00      	cmp	r6, #0
    315a:	d0f7      	beq.n	314c <__gesf2+0x40>
    315c:	2001      	movs	r0, #1
    315e:	3901      	subs	r1, #1
    3160:	4308      	orrs	r0, r1
    3162:	e7f8      	b.n	3156 <__gesf2+0x4a>
    3164:	2d00      	cmp	r5, #0
    3166:	d0de      	beq.n	3126 <__gesf2+0x1a>
    3168:	2002      	movs	r0, #2
    316a:	4240      	negs	r0, r0
    316c:	e7f3      	b.n	3156 <__gesf2+0x4a>
    316e:	2c00      	cmp	r4, #0
    3170:	d0db      	beq.n	312a <__gesf2+0x1e>
    3172:	e7f9      	b.n	3168 <__gesf2+0x5c>
    3174:	4282      	cmp	r2, r0
    3176:	dceb      	bgt.n	3150 <__gesf2+0x44>
    3178:	db04      	blt.n	3184 <__gesf2+0x78>
    317a:	42a5      	cmp	r5, r4
    317c:	d8e8      	bhi.n	3150 <__gesf2+0x44>
    317e:	2000      	movs	r0, #0
    3180:	42a5      	cmp	r5, r4
    3182:	d2e8      	bcs.n	3156 <__gesf2+0x4a>
    3184:	2101      	movs	r1, #1
    3186:	1e58      	subs	r0, r3, #1
    3188:	4308      	orrs	r0, r1
    318a:	e7e4      	b.n	3156 <__gesf2+0x4a>

0000318c <__lesf2>:
    318c:	b5f0      	push	{r4, r5, r6, r7, lr}
    318e:	0042      	lsls	r2, r0, #1
    3190:	024d      	lsls	r5, r1, #9
    3192:	004c      	lsls	r4, r1, #1
    3194:	0246      	lsls	r6, r0, #9
    3196:	0a76      	lsrs	r6, r6, #9
    3198:	0e12      	lsrs	r2, r2, #24
    319a:	0fc3      	lsrs	r3, r0, #31
    319c:	0a6d      	lsrs	r5, r5, #9
    319e:	0e24      	lsrs	r4, r4, #24
    31a0:	0fc9      	lsrs	r1, r1, #31
    31a2:	2aff      	cmp	r2, #255	; 0xff
    31a4:	d016      	beq.n	31d4 <__lesf2+0x48>
    31a6:	2cff      	cmp	r4, #255	; 0xff
    31a8:	d018      	beq.n	31dc <__lesf2+0x50>
    31aa:	2a00      	cmp	r2, #0
    31ac:	d10a      	bne.n	31c4 <__lesf2+0x38>
    31ae:	4270      	negs	r0, r6
    31b0:	4170      	adcs	r0, r6
    31b2:	b2c0      	uxtb	r0, r0
    31b4:	2c00      	cmp	r4, #0
    31b6:	d015      	beq.n	31e4 <__lesf2+0x58>
    31b8:	2800      	cmp	r0, #0
    31ba:	d005      	beq.n	31c8 <__lesf2+0x3c>
    31bc:	2001      	movs	r0, #1
    31be:	3901      	subs	r1, #1
    31c0:	4308      	orrs	r0, r1
    31c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31c4:	2c00      	cmp	r4, #0
    31c6:	d013      	beq.n	31f0 <__lesf2+0x64>
    31c8:	4299      	cmp	r1, r3
    31ca:	d014      	beq.n	31f6 <__lesf2+0x6a>
    31cc:	2001      	movs	r0, #1
    31ce:	425b      	negs	r3, r3
    31d0:	4318      	orrs	r0, r3
    31d2:	e7f6      	b.n	31c2 <__lesf2+0x36>
    31d4:	2002      	movs	r0, #2
    31d6:	2e00      	cmp	r6, #0
    31d8:	d1f3      	bne.n	31c2 <__lesf2+0x36>
    31da:	e7e4      	b.n	31a6 <__lesf2+0x1a>
    31dc:	2002      	movs	r0, #2
    31de:	2d00      	cmp	r5, #0
    31e0:	d1ef      	bne.n	31c2 <__lesf2+0x36>
    31e2:	e7e2      	b.n	31aa <__lesf2+0x1e>
    31e4:	2d00      	cmp	r5, #0
    31e6:	d1e7      	bne.n	31b8 <__lesf2+0x2c>
    31e8:	2000      	movs	r0, #0
    31ea:	2e00      	cmp	r6, #0
    31ec:	d0e9      	beq.n	31c2 <__lesf2+0x36>
    31ee:	e7ed      	b.n	31cc <__lesf2+0x40>
    31f0:	2d00      	cmp	r5, #0
    31f2:	d1e9      	bne.n	31c8 <__lesf2+0x3c>
    31f4:	e7ea      	b.n	31cc <__lesf2+0x40>
    31f6:	42a2      	cmp	r2, r4
    31f8:	dc06      	bgt.n	3208 <__lesf2+0x7c>
    31fa:	dbdf      	blt.n	31bc <__lesf2+0x30>
    31fc:	42ae      	cmp	r6, r5
    31fe:	d803      	bhi.n	3208 <__lesf2+0x7c>
    3200:	2000      	movs	r0, #0
    3202:	42ae      	cmp	r6, r5
    3204:	d3da      	bcc.n	31bc <__lesf2+0x30>
    3206:	e7dc      	b.n	31c2 <__lesf2+0x36>
    3208:	2001      	movs	r0, #1
    320a:	4249      	negs	r1, r1
    320c:	4308      	orrs	r0, r1
    320e:	e7d8      	b.n	31c2 <__lesf2+0x36>

00003210 <__aeabi_fsub>:
    3210:	b5f0      	push	{r4, r5, r6, r7, lr}
    3212:	464f      	mov	r7, r9
    3214:	46d6      	mov	lr, sl
    3216:	4646      	mov	r6, r8
    3218:	0044      	lsls	r4, r0, #1
    321a:	b5c0      	push	{r6, r7, lr}
    321c:	0fc2      	lsrs	r2, r0, #31
    321e:	0247      	lsls	r7, r0, #9
    3220:	0248      	lsls	r0, r1, #9
    3222:	0a40      	lsrs	r0, r0, #9
    3224:	4684      	mov	ip, r0
    3226:	4666      	mov	r6, ip
    3228:	0a7b      	lsrs	r3, r7, #9
    322a:	0048      	lsls	r0, r1, #1
    322c:	0fc9      	lsrs	r1, r1, #31
    322e:	469a      	mov	sl, r3
    3230:	0e24      	lsrs	r4, r4, #24
    3232:	0015      	movs	r5, r2
    3234:	00db      	lsls	r3, r3, #3
    3236:	0e00      	lsrs	r0, r0, #24
    3238:	4689      	mov	r9, r1
    323a:	00f6      	lsls	r6, r6, #3
    323c:	28ff      	cmp	r0, #255	; 0xff
    323e:	d100      	bne.n	3242 <__aeabi_fsub+0x32>
    3240:	e08f      	b.n	3362 <__aeabi_fsub+0x152>
    3242:	2101      	movs	r1, #1
    3244:	464f      	mov	r7, r9
    3246:	404f      	eors	r7, r1
    3248:	0039      	movs	r1, r7
    324a:	4291      	cmp	r1, r2
    324c:	d066      	beq.n	331c <__aeabi_fsub+0x10c>
    324e:	1a22      	subs	r2, r4, r0
    3250:	2a00      	cmp	r2, #0
    3252:	dc00      	bgt.n	3256 <__aeabi_fsub+0x46>
    3254:	e09d      	b.n	3392 <__aeabi_fsub+0x182>
    3256:	2800      	cmp	r0, #0
    3258:	d13d      	bne.n	32d6 <__aeabi_fsub+0xc6>
    325a:	2e00      	cmp	r6, #0
    325c:	d100      	bne.n	3260 <__aeabi_fsub+0x50>
    325e:	e08b      	b.n	3378 <__aeabi_fsub+0x168>
    3260:	1e51      	subs	r1, r2, #1
    3262:	2900      	cmp	r1, #0
    3264:	d000      	beq.n	3268 <__aeabi_fsub+0x58>
    3266:	e0b5      	b.n	33d4 <__aeabi_fsub+0x1c4>
    3268:	2401      	movs	r4, #1
    326a:	1b9b      	subs	r3, r3, r6
    326c:	015a      	lsls	r2, r3, #5
    326e:	d544      	bpl.n	32fa <__aeabi_fsub+0xea>
    3270:	019b      	lsls	r3, r3, #6
    3272:	099f      	lsrs	r7, r3, #6
    3274:	0038      	movs	r0, r7
    3276:	f001 fb4d 	bl	4914 <__clzsi2>
    327a:	3805      	subs	r0, #5
    327c:	4087      	lsls	r7, r0
    327e:	4284      	cmp	r4, r0
    3280:	dd00      	ble.n	3284 <__aeabi_fsub+0x74>
    3282:	e096      	b.n	33b2 <__aeabi_fsub+0x1a2>
    3284:	1b04      	subs	r4, r0, r4
    3286:	003a      	movs	r2, r7
    3288:	2020      	movs	r0, #32
    328a:	3401      	adds	r4, #1
    328c:	40e2      	lsrs	r2, r4
    328e:	1b04      	subs	r4, r0, r4
    3290:	40a7      	lsls	r7, r4
    3292:	003b      	movs	r3, r7
    3294:	1e5f      	subs	r7, r3, #1
    3296:	41bb      	sbcs	r3, r7
    3298:	2400      	movs	r4, #0
    329a:	4313      	orrs	r3, r2
    329c:	075a      	lsls	r2, r3, #29
    329e:	d004      	beq.n	32aa <__aeabi_fsub+0x9a>
    32a0:	220f      	movs	r2, #15
    32a2:	401a      	ands	r2, r3
    32a4:	2a04      	cmp	r2, #4
    32a6:	d000      	beq.n	32aa <__aeabi_fsub+0x9a>
    32a8:	3304      	adds	r3, #4
    32aa:	015a      	lsls	r2, r3, #5
    32ac:	d527      	bpl.n	32fe <__aeabi_fsub+0xee>
    32ae:	3401      	adds	r4, #1
    32b0:	2cff      	cmp	r4, #255	; 0xff
    32b2:	d100      	bne.n	32b6 <__aeabi_fsub+0xa6>
    32b4:	e079      	b.n	33aa <__aeabi_fsub+0x19a>
    32b6:	2201      	movs	r2, #1
    32b8:	019b      	lsls	r3, r3, #6
    32ba:	0a5b      	lsrs	r3, r3, #9
    32bc:	b2e4      	uxtb	r4, r4
    32be:	402a      	ands	r2, r5
    32c0:	025b      	lsls	r3, r3, #9
    32c2:	05e4      	lsls	r4, r4, #23
    32c4:	0a58      	lsrs	r0, r3, #9
    32c6:	07d2      	lsls	r2, r2, #31
    32c8:	4320      	orrs	r0, r4
    32ca:	4310      	orrs	r0, r2
    32cc:	bc1c      	pop	{r2, r3, r4}
    32ce:	4690      	mov	r8, r2
    32d0:	4699      	mov	r9, r3
    32d2:	46a2      	mov	sl, r4
    32d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32d6:	2cff      	cmp	r4, #255	; 0xff
    32d8:	d0e0      	beq.n	329c <__aeabi_fsub+0x8c>
    32da:	2180      	movs	r1, #128	; 0x80
    32dc:	04c9      	lsls	r1, r1, #19
    32de:	430e      	orrs	r6, r1
    32e0:	2a1b      	cmp	r2, #27
    32e2:	dc7b      	bgt.n	33dc <__aeabi_fsub+0x1cc>
    32e4:	0031      	movs	r1, r6
    32e6:	2020      	movs	r0, #32
    32e8:	40d1      	lsrs	r1, r2
    32ea:	1a82      	subs	r2, r0, r2
    32ec:	4096      	lsls	r6, r2
    32ee:	1e72      	subs	r2, r6, #1
    32f0:	4196      	sbcs	r6, r2
    32f2:	430e      	orrs	r6, r1
    32f4:	1b9b      	subs	r3, r3, r6
    32f6:	015a      	lsls	r2, r3, #5
    32f8:	d4ba      	bmi.n	3270 <__aeabi_fsub+0x60>
    32fa:	075a      	lsls	r2, r3, #29
    32fc:	d1d0      	bne.n	32a0 <__aeabi_fsub+0x90>
    32fe:	2201      	movs	r2, #1
    3300:	08df      	lsrs	r7, r3, #3
    3302:	402a      	ands	r2, r5
    3304:	2cff      	cmp	r4, #255	; 0xff
    3306:	d133      	bne.n	3370 <__aeabi_fsub+0x160>
    3308:	2f00      	cmp	r7, #0
    330a:	d100      	bne.n	330e <__aeabi_fsub+0xfe>
    330c:	e0a8      	b.n	3460 <__aeabi_fsub+0x250>
    330e:	2380      	movs	r3, #128	; 0x80
    3310:	03db      	lsls	r3, r3, #15
    3312:	433b      	orrs	r3, r7
    3314:	025b      	lsls	r3, r3, #9
    3316:	0a5b      	lsrs	r3, r3, #9
    3318:	24ff      	movs	r4, #255	; 0xff
    331a:	e7d1      	b.n	32c0 <__aeabi_fsub+0xb0>
    331c:	1a21      	subs	r1, r4, r0
    331e:	2900      	cmp	r1, #0
    3320:	dd4c      	ble.n	33bc <__aeabi_fsub+0x1ac>
    3322:	2800      	cmp	r0, #0
    3324:	d02a      	beq.n	337c <__aeabi_fsub+0x16c>
    3326:	2cff      	cmp	r4, #255	; 0xff
    3328:	d0b8      	beq.n	329c <__aeabi_fsub+0x8c>
    332a:	2080      	movs	r0, #128	; 0x80
    332c:	04c0      	lsls	r0, r0, #19
    332e:	4306      	orrs	r6, r0
    3330:	291b      	cmp	r1, #27
    3332:	dd00      	ble.n	3336 <__aeabi_fsub+0x126>
    3334:	e0af      	b.n	3496 <__aeabi_fsub+0x286>
    3336:	0030      	movs	r0, r6
    3338:	2720      	movs	r7, #32
    333a:	40c8      	lsrs	r0, r1
    333c:	1a79      	subs	r1, r7, r1
    333e:	408e      	lsls	r6, r1
    3340:	1e71      	subs	r1, r6, #1
    3342:	418e      	sbcs	r6, r1
    3344:	4306      	orrs	r6, r0
    3346:	199b      	adds	r3, r3, r6
    3348:	0159      	lsls	r1, r3, #5
    334a:	d5d6      	bpl.n	32fa <__aeabi_fsub+0xea>
    334c:	3401      	adds	r4, #1
    334e:	2cff      	cmp	r4, #255	; 0xff
    3350:	d100      	bne.n	3354 <__aeabi_fsub+0x144>
    3352:	e085      	b.n	3460 <__aeabi_fsub+0x250>
    3354:	2201      	movs	r2, #1
    3356:	497a      	ldr	r1, [pc, #488]	; (3540 <__aeabi_fsub+0x330>)
    3358:	401a      	ands	r2, r3
    335a:	085b      	lsrs	r3, r3, #1
    335c:	400b      	ands	r3, r1
    335e:	4313      	orrs	r3, r2
    3360:	e79c      	b.n	329c <__aeabi_fsub+0x8c>
    3362:	2e00      	cmp	r6, #0
    3364:	d000      	beq.n	3368 <__aeabi_fsub+0x158>
    3366:	e770      	b.n	324a <__aeabi_fsub+0x3a>
    3368:	e76b      	b.n	3242 <__aeabi_fsub+0x32>
    336a:	1e3b      	subs	r3, r7, #0
    336c:	d1c5      	bne.n	32fa <__aeabi_fsub+0xea>
    336e:	2200      	movs	r2, #0
    3370:	027b      	lsls	r3, r7, #9
    3372:	0a5b      	lsrs	r3, r3, #9
    3374:	b2e4      	uxtb	r4, r4
    3376:	e7a3      	b.n	32c0 <__aeabi_fsub+0xb0>
    3378:	0014      	movs	r4, r2
    337a:	e78f      	b.n	329c <__aeabi_fsub+0x8c>
    337c:	2e00      	cmp	r6, #0
    337e:	d04d      	beq.n	341c <__aeabi_fsub+0x20c>
    3380:	1e48      	subs	r0, r1, #1
    3382:	2800      	cmp	r0, #0
    3384:	d157      	bne.n	3436 <__aeabi_fsub+0x226>
    3386:	199b      	adds	r3, r3, r6
    3388:	2401      	movs	r4, #1
    338a:	015a      	lsls	r2, r3, #5
    338c:	d5b5      	bpl.n	32fa <__aeabi_fsub+0xea>
    338e:	2402      	movs	r4, #2
    3390:	e7e0      	b.n	3354 <__aeabi_fsub+0x144>
    3392:	2a00      	cmp	r2, #0
    3394:	d125      	bne.n	33e2 <__aeabi_fsub+0x1d2>
    3396:	1c62      	adds	r2, r4, #1
    3398:	b2d2      	uxtb	r2, r2
    339a:	2a01      	cmp	r2, #1
    339c:	dd72      	ble.n	3484 <__aeabi_fsub+0x274>
    339e:	1b9f      	subs	r7, r3, r6
    33a0:	017a      	lsls	r2, r7, #5
    33a2:	d535      	bpl.n	3410 <__aeabi_fsub+0x200>
    33a4:	1af7      	subs	r7, r6, r3
    33a6:	000d      	movs	r5, r1
    33a8:	e764      	b.n	3274 <__aeabi_fsub+0x64>
    33aa:	2201      	movs	r2, #1
    33ac:	2300      	movs	r3, #0
    33ae:	402a      	ands	r2, r5
    33b0:	e786      	b.n	32c0 <__aeabi_fsub+0xb0>
    33b2:	003b      	movs	r3, r7
    33b4:	4a63      	ldr	r2, [pc, #396]	; (3544 <__aeabi_fsub+0x334>)
    33b6:	1a24      	subs	r4, r4, r0
    33b8:	4013      	ands	r3, r2
    33ba:	e76f      	b.n	329c <__aeabi_fsub+0x8c>
    33bc:	2900      	cmp	r1, #0
    33be:	d16c      	bne.n	349a <__aeabi_fsub+0x28a>
    33c0:	1c61      	adds	r1, r4, #1
    33c2:	b2c8      	uxtb	r0, r1
    33c4:	2801      	cmp	r0, #1
    33c6:	dd4e      	ble.n	3466 <__aeabi_fsub+0x256>
    33c8:	29ff      	cmp	r1, #255	; 0xff
    33ca:	d049      	beq.n	3460 <__aeabi_fsub+0x250>
    33cc:	199b      	adds	r3, r3, r6
    33ce:	085b      	lsrs	r3, r3, #1
    33d0:	000c      	movs	r4, r1
    33d2:	e763      	b.n	329c <__aeabi_fsub+0x8c>
    33d4:	2aff      	cmp	r2, #255	; 0xff
    33d6:	d041      	beq.n	345c <__aeabi_fsub+0x24c>
    33d8:	000a      	movs	r2, r1
    33da:	e781      	b.n	32e0 <__aeabi_fsub+0xd0>
    33dc:	2601      	movs	r6, #1
    33de:	1b9b      	subs	r3, r3, r6
    33e0:	e789      	b.n	32f6 <__aeabi_fsub+0xe6>
    33e2:	2c00      	cmp	r4, #0
    33e4:	d01c      	beq.n	3420 <__aeabi_fsub+0x210>
    33e6:	28ff      	cmp	r0, #255	; 0xff
    33e8:	d021      	beq.n	342e <__aeabi_fsub+0x21e>
    33ea:	2480      	movs	r4, #128	; 0x80
    33ec:	04e4      	lsls	r4, r4, #19
    33ee:	4252      	negs	r2, r2
    33f0:	4323      	orrs	r3, r4
    33f2:	2a1b      	cmp	r2, #27
    33f4:	dd00      	ble.n	33f8 <__aeabi_fsub+0x1e8>
    33f6:	e096      	b.n	3526 <__aeabi_fsub+0x316>
    33f8:	001c      	movs	r4, r3
    33fa:	2520      	movs	r5, #32
    33fc:	40d4      	lsrs	r4, r2
    33fe:	1aaa      	subs	r2, r5, r2
    3400:	4093      	lsls	r3, r2
    3402:	1e5a      	subs	r2, r3, #1
    3404:	4193      	sbcs	r3, r2
    3406:	4323      	orrs	r3, r4
    3408:	1af3      	subs	r3, r6, r3
    340a:	0004      	movs	r4, r0
    340c:	000d      	movs	r5, r1
    340e:	e72d      	b.n	326c <__aeabi_fsub+0x5c>
    3410:	2f00      	cmp	r7, #0
    3412:	d000      	beq.n	3416 <__aeabi_fsub+0x206>
    3414:	e72e      	b.n	3274 <__aeabi_fsub+0x64>
    3416:	2200      	movs	r2, #0
    3418:	2400      	movs	r4, #0
    341a:	e7a9      	b.n	3370 <__aeabi_fsub+0x160>
    341c:	000c      	movs	r4, r1
    341e:	e73d      	b.n	329c <__aeabi_fsub+0x8c>
    3420:	2b00      	cmp	r3, #0
    3422:	d058      	beq.n	34d6 <__aeabi_fsub+0x2c6>
    3424:	43d2      	mvns	r2, r2
    3426:	2a00      	cmp	r2, #0
    3428:	d0ee      	beq.n	3408 <__aeabi_fsub+0x1f8>
    342a:	28ff      	cmp	r0, #255	; 0xff
    342c:	d1e1      	bne.n	33f2 <__aeabi_fsub+0x1e2>
    342e:	0033      	movs	r3, r6
    3430:	24ff      	movs	r4, #255	; 0xff
    3432:	000d      	movs	r5, r1
    3434:	e732      	b.n	329c <__aeabi_fsub+0x8c>
    3436:	29ff      	cmp	r1, #255	; 0xff
    3438:	d010      	beq.n	345c <__aeabi_fsub+0x24c>
    343a:	0001      	movs	r1, r0
    343c:	e778      	b.n	3330 <__aeabi_fsub+0x120>
    343e:	2b00      	cmp	r3, #0
    3440:	d06e      	beq.n	3520 <__aeabi_fsub+0x310>
    3442:	24ff      	movs	r4, #255	; 0xff
    3444:	2e00      	cmp	r6, #0
    3446:	d100      	bne.n	344a <__aeabi_fsub+0x23a>
    3448:	e728      	b.n	329c <__aeabi_fsub+0x8c>
    344a:	2280      	movs	r2, #128	; 0x80
    344c:	4651      	mov	r1, sl
    344e:	03d2      	lsls	r2, r2, #15
    3450:	4211      	tst	r1, r2
    3452:	d003      	beq.n	345c <__aeabi_fsub+0x24c>
    3454:	4661      	mov	r1, ip
    3456:	4211      	tst	r1, r2
    3458:	d100      	bne.n	345c <__aeabi_fsub+0x24c>
    345a:	0033      	movs	r3, r6
    345c:	24ff      	movs	r4, #255	; 0xff
    345e:	e71d      	b.n	329c <__aeabi_fsub+0x8c>
    3460:	24ff      	movs	r4, #255	; 0xff
    3462:	2300      	movs	r3, #0
    3464:	e72c      	b.n	32c0 <__aeabi_fsub+0xb0>
    3466:	2c00      	cmp	r4, #0
    3468:	d1e9      	bne.n	343e <__aeabi_fsub+0x22e>
    346a:	2b00      	cmp	r3, #0
    346c:	d063      	beq.n	3536 <__aeabi_fsub+0x326>
    346e:	2e00      	cmp	r6, #0
    3470:	d100      	bne.n	3474 <__aeabi_fsub+0x264>
    3472:	e713      	b.n	329c <__aeabi_fsub+0x8c>
    3474:	199b      	adds	r3, r3, r6
    3476:	015a      	lsls	r2, r3, #5
    3478:	d400      	bmi.n	347c <__aeabi_fsub+0x26c>
    347a:	e73e      	b.n	32fa <__aeabi_fsub+0xea>
    347c:	4a31      	ldr	r2, [pc, #196]	; (3544 <__aeabi_fsub+0x334>)
    347e:	000c      	movs	r4, r1
    3480:	4013      	ands	r3, r2
    3482:	e70b      	b.n	329c <__aeabi_fsub+0x8c>
    3484:	2c00      	cmp	r4, #0
    3486:	d11e      	bne.n	34c6 <__aeabi_fsub+0x2b6>
    3488:	2b00      	cmp	r3, #0
    348a:	d12f      	bne.n	34ec <__aeabi_fsub+0x2dc>
    348c:	2e00      	cmp	r6, #0
    348e:	d04f      	beq.n	3530 <__aeabi_fsub+0x320>
    3490:	0033      	movs	r3, r6
    3492:	000d      	movs	r5, r1
    3494:	e702      	b.n	329c <__aeabi_fsub+0x8c>
    3496:	2601      	movs	r6, #1
    3498:	e755      	b.n	3346 <__aeabi_fsub+0x136>
    349a:	2c00      	cmp	r4, #0
    349c:	d11f      	bne.n	34de <__aeabi_fsub+0x2ce>
    349e:	2b00      	cmp	r3, #0
    34a0:	d043      	beq.n	352a <__aeabi_fsub+0x31a>
    34a2:	43c9      	mvns	r1, r1
    34a4:	2900      	cmp	r1, #0
    34a6:	d00b      	beq.n	34c0 <__aeabi_fsub+0x2b0>
    34a8:	28ff      	cmp	r0, #255	; 0xff
    34aa:	d039      	beq.n	3520 <__aeabi_fsub+0x310>
    34ac:	291b      	cmp	r1, #27
    34ae:	dc44      	bgt.n	353a <__aeabi_fsub+0x32a>
    34b0:	001c      	movs	r4, r3
    34b2:	2720      	movs	r7, #32
    34b4:	40cc      	lsrs	r4, r1
    34b6:	1a79      	subs	r1, r7, r1
    34b8:	408b      	lsls	r3, r1
    34ba:	1e59      	subs	r1, r3, #1
    34bc:	418b      	sbcs	r3, r1
    34be:	4323      	orrs	r3, r4
    34c0:	199b      	adds	r3, r3, r6
    34c2:	0004      	movs	r4, r0
    34c4:	e740      	b.n	3348 <__aeabi_fsub+0x138>
    34c6:	2b00      	cmp	r3, #0
    34c8:	d11a      	bne.n	3500 <__aeabi_fsub+0x2f0>
    34ca:	2e00      	cmp	r6, #0
    34cc:	d124      	bne.n	3518 <__aeabi_fsub+0x308>
    34ce:	2780      	movs	r7, #128	; 0x80
    34d0:	2200      	movs	r2, #0
    34d2:	03ff      	lsls	r7, r7, #15
    34d4:	e71b      	b.n	330e <__aeabi_fsub+0xfe>
    34d6:	0033      	movs	r3, r6
    34d8:	0004      	movs	r4, r0
    34da:	000d      	movs	r5, r1
    34dc:	e6de      	b.n	329c <__aeabi_fsub+0x8c>
    34de:	28ff      	cmp	r0, #255	; 0xff
    34e0:	d01e      	beq.n	3520 <__aeabi_fsub+0x310>
    34e2:	2480      	movs	r4, #128	; 0x80
    34e4:	04e4      	lsls	r4, r4, #19
    34e6:	4249      	negs	r1, r1
    34e8:	4323      	orrs	r3, r4
    34ea:	e7df      	b.n	34ac <__aeabi_fsub+0x29c>
    34ec:	2e00      	cmp	r6, #0
    34ee:	d100      	bne.n	34f2 <__aeabi_fsub+0x2e2>
    34f0:	e6d4      	b.n	329c <__aeabi_fsub+0x8c>
    34f2:	1b9f      	subs	r7, r3, r6
    34f4:	017a      	lsls	r2, r7, #5
    34f6:	d400      	bmi.n	34fa <__aeabi_fsub+0x2ea>
    34f8:	e737      	b.n	336a <__aeabi_fsub+0x15a>
    34fa:	1af3      	subs	r3, r6, r3
    34fc:	000d      	movs	r5, r1
    34fe:	e6cd      	b.n	329c <__aeabi_fsub+0x8c>
    3500:	24ff      	movs	r4, #255	; 0xff
    3502:	2e00      	cmp	r6, #0
    3504:	d100      	bne.n	3508 <__aeabi_fsub+0x2f8>
    3506:	e6c9      	b.n	329c <__aeabi_fsub+0x8c>
    3508:	2280      	movs	r2, #128	; 0x80
    350a:	4650      	mov	r0, sl
    350c:	03d2      	lsls	r2, r2, #15
    350e:	4210      	tst	r0, r2
    3510:	d0a4      	beq.n	345c <__aeabi_fsub+0x24c>
    3512:	4660      	mov	r0, ip
    3514:	4210      	tst	r0, r2
    3516:	d1a1      	bne.n	345c <__aeabi_fsub+0x24c>
    3518:	0033      	movs	r3, r6
    351a:	000d      	movs	r5, r1
    351c:	24ff      	movs	r4, #255	; 0xff
    351e:	e6bd      	b.n	329c <__aeabi_fsub+0x8c>
    3520:	0033      	movs	r3, r6
    3522:	24ff      	movs	r4, #255	; 0xff
    3524:	e6ba      	b.n	329c <__aeabi_fsub+0x8c>
    3526:	2301      	movs	r3, #1
    3528:	e76e      	b.n	3408 <__aeabi_fsub+0x1f8>
    352a:	0033      	movs	r3, r6
    352c:	0004      	movs	r4, r0
    352e:	e6b5      	b.n	329c <__aeabi_fsub+0x8c>
    3530:	2700      	movs	r7, #0
    3532:	2200      	movs	r2, #0
    3534:	e71c      	b.n	3370 <__aeabi_fsub+0x160>
    3536:	0033      	movs	r3, r6
    3538:	e6b0      	b.n	329c <__aeabi_fsub+0x8c>
    353a:	2301      	movs	r3, #1
    353c:	e7c0      	b.n	34c0 <__aeabi_fsub+0x2b0>
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	7dffffff 	.word	0x7dffffff
    3544:	fbffffff 	.word	0xfbffffff

00003548 <__aeabi_f2iz>:
    3548:	0241      	lsls	r1, r0, #9
    354a:	0043      	lsls	r3, r0, #1
    354c:	0fc2      	lsrs	r2, r0, #31
    354e:	0a49      	lsrs	r1, r1, #9
    3550:	0e1b      	lsrs	r3, r3, #24
    3552:	2000      	movs	r0, #0
    3554:	2b7e      	cmp	r3, #126	; 0x7e
    3556:	dd0d      	ble.n	3574 <__aeabi_f2iz+0x2c>
    3558:	2b9d      	cmp	r3, #157	; 0x9d
    355a:	dc0c      	bgt.n	3576 <__aeabi_f2iz+0x2e>
    355c:	2080      	movs	r0, #128	; 0x80
    355e:	0400      	lsls	r0, r0, #16
    3560:	4301      	orrs	r1, r0
    3562:	2b95      	cmp	r3, #149	; 0x95
    3564:	dc0a      	bgt.n	357c <__aeabi_f2iz+0x34>
    3566:	2096      	movs	r0, #150	; 0x96
    3568:	1ac3      	subs	r3, r0, r3
    356a:	40d9      	lsrs	r1, r3
    356c:	4248      	negs	r0, r1
    356e:	2a00      	cmp	r2, #0
    3570:	d100      	bne.n	3574 <__aeabi_f2iz+0x2c>
    3572:	0008      	movs	r0, r1
    3574:	4770      	bx	lr
    3576:	4b03      	ldr	r3, [pc, #12]	; (3584 <__aeabi_f2iz+0x3c>)
    3578:	18d0      	adds	r0, r2, r3
    357a:	e7fb      	b.n	3574 <__aeabi_f2iz+0x2c>
    357c:	3b96      	subs	r3, #150	; 0x96
    357e:	4099      	lsls	r1, r3
    3580:	e7f4      	b.n	356c <__aeabi_f2iz+0x24>
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	7fffffff 	.word	0x7fffffff

00003588 <__aeabi_ddiv>:
    3588:	b5f0      	push	{r4, r5, r6, r7, lr}
    358a:	4657      	mov	r7, sl
    358c:	4645      	mov	r5, r8
    358e:	46de      	mov	lr, fp
    3590:	464e      	mov	r6, r9
    3592:	b5e0      	push	{r5, r6, r7, lr}
    3594:	004c      	lsls	r4, r1, #1
    3596:	030e      	lsls	r6, r1, #12
    3598:	b087      	sub	sp, #28
    359a:	4683      	mov	fp, r0
    359c:	4692      	mov	sl, r2
    359e:	001d      	movs	r5, r3
    35a0:	4680      	mov	r8, r0
    35a2:	0b36      	lsrs	r6, r6, #12
    35a4:	0d64      	lsrs	r4, r4, #21
    35a6:	0fcf      	lsrs	r7, r1, #31
    35a8:	2c00      	cmp	r4, #0
    35aa:	d04f      	beq.n	364c <__aeabi_ddiv+0xc4>
    35ac:	4b6f      	ldr	r3, [pc, #444]	; (376c <__aeabi_ddiv+0x1e4>)
    35ae:	429c      	cmp	r4, r3
    35b0:	d035      	beq.n	361e <__aeabi_ddiv+0x96>
    35b2:	2380      	movs	r3, #128	; 0x80
    35b4:	0f42      	lsrs	r2, r0, #29
    35b6:	041b      	lsls	r3, r3, #16
    35b8:	00f6      	lsls	r6, r6, #3
    35ba:	4313      	orrs	r3, r2
    35bc:	4333      	orrs	r3, r6
    35be:	4699      	mov	r9, r3
    35c0:	00c3      	lsls	r3, r0, #3
    35c2:	4698      	mov	r8, r3
    35c4:	4b6a      	ldr	r3, [pc, #424]	; (3770 <__aeabi_ddiv+0x1e8>)
    35c6:	2600      	movs	r6, #0
    35c8:	469c      	mov	ip, r3
    35ca:	2300      	movs	r3, #0
    35cc:	4464      	add	r4, ip
    35ce:	9303      	str	r3, [sp, #12]
    35d0:	032b      	lsls	r3, r5, #12
    35d2:	0b1b      	lsrs	r3, r3, #12
    35d4:	469b      	mov	fp, r3
    35d6:	006b      	lsls	r3, r5, #1
    35d8:	0fed      	lsrs	r5, r5, #31
    35da:	4650      	mov	r0, sl
    35dc:	0d5b      	lsrs	r3, r3, #21
    35de:	9501      	str	r5, [sp, #4]
    35e0:	d05e      	beq.n	36a0 <__aeabi_ddiv+0x118>
    35e2:	4a62      	ldr	r2, [pc, #392]	; (376c <__aeabi_ddiv+0x1e4>)
    35e4:	4293      	cmp	r3, r2
    35e6:	d053      	beq.n	3690 <__aeabi_ddiv+0x108>
    35e8:	465a      	mov	r2, fp
    35ea:	00d1      	lsls	r1, r2, #3
    35ec:	2280      	movs	r2, #128	; 0x80
    35ee:	0f40      	lsrs	r0, r0, #29
    35f0:	0412      	lsls	r2, r2, #16
    35f2:	4302      	orrs	r2, r0
    35f4:	430a      	orrs	r2, r1
    35f6:	4693      	mov	fp, r2
    35f8:	4652      	mov	r2, sl
    35fa:	00d1      	lsls	r1, r2, #3
    35fc:	4a5c      	ldr	r2, [pc, #368]	; (3770 <__aeabi_ddiv+0x1e8>)
    35fe:	4694      	mov	ip, r2
    3600:	2200      	movs	r2, #0
    3602:	4463      	add	r3, ip
    3604:	0038      	movs	r0, r7
    3606:	4068      	eors	r0, r5
    3608:	4684      	mov	ip, r0
    360a:	9002      	str	r0, [sp, #8]
    360c:	1ae4      	subs	r4, r4, r3
    360e:	4316      	orrs	r6, r2
    3610:	2e0f      	cmp	r6, #15
    3612:	d900      	bls.n	3616 <__aeabi_ddiv+0x8e>
    3614:	e0b4      	b.n	3780 <__aeabi_ddiv+0x1f8>
    3616:	4b57      	ldr	r3, [pc, #348]	; (3774 <__aeabi_ddiv+0x1ec>)
    3618:	00b6      	lsls	r6, r6, #2
    361a:	599b      	ldr	r3, [r3, r6]
    361c:	469f      	mov	pc, r3
    361e:	0003      	movs	r3, r0
    3620:	4333      	orrs	r3, r6
    3622:	4699      	mov	r9, r3
    3624:	d16c      	bne.n	3700 <__aeabi_ddiv+0x178>
    3626:	2300      	movs	r3, #0
    3628:	4698      	mov	r8, r3
    362a:	3302      	adds	r3, #2
    362c:	2608      	movs	r6, #8
    362e:	9303      	str	r3, [sp, #12]
    3630:	e7ce      	b.n	35d0 <__aeabi_ddiv+0x48>
    3632:	46cb      	mov	fp, r9
    3634:	4641      	mov	r1, r8
    3636:	9a03      	ldr	r2, [sp, #12]
    3638:	9701      	str	r7, [sp, #4]
    363a:	2a02      	cmp	r2, #2
    363c:	d165      	bne.n	370a <__aeabi_ddiv+0x182>
    363e:	9b01      	ldr	r3, [sp, #4]
    3640:	4c4a      	ldr	r4, [pc, #296]	; (376c <__aeabi_ddiv+0x1e4>)
    3642:	469c      	mov	ip, r3
    3644:	2300      	movs	r3, #0
    3646:	2200      	movs	r2, #0
    3648:	4698      	mov	r8, r3
    364a:	e06b      	b.n	3724 <__aeabi_ddiv+0x19c>
    364c:	0003      	movs	r3, r0
    364e:	4333      	orrs	r3, r6
    3650:	4699      	mov	r9, r3
    3652:	d04e      	beq.n	36f2 <__aeabi_ddiv+0x16a>
    3654:	2e00      	cmp	r6, #0
    3656:	d100      	bne.n	365a <__aeabi_ddiv+0xd2>
    3658:	e1bc      	b.n	39d4 <__aeabi_ddiv+0x44c>
    365a:	0030      	movs	r0, r6
    365c:	f001 f95a 	bl	4914 <__clzsi2>
    3660:	0003      	movs	r3, r0
    3662:	3b0b      	subs	r3, #11
    3664:	2b1c      	cmp	r3, #28
    3666:	dd00      	ble.n	366a <__aeabi_ddiv+0xe2>
    3668:	e1ac      	b.n	39c4 <__aeabi_ddiv+0x43c>
    366a:	221d      	movs	r2, #29
    366c:	1ad3      	subs	r3, r2, r3
    366e:	465a      	mov	r2, fp
    3670:	0001      	movs	r1, r0
    3672:	40da      	lsrs	r2, r3
    3674:	3908      	subs	r1, #8
    3676:	408e      	lsls	r6, r1
    3678:	0013      	movs	r3, r2
    367a:	4333      	orrs	r3, r6
    367c:	4699      	mov	r9, r3
    367e:	465b      	mov	r3, fp
    3680:	408b      	lsls	r3, r1
    3682:	4698      	mov	r8, r3
    3684:	2300      	movs	r3, #0
    3686:	4c3c      	ldr	r4, [pc, #240]	; (3778 <__aeabi_ddiv+0x1f0>)
    3688:	2600      	movs	r6, #0
    368a:	1a24      	subs	r4, r4, r0
    368c:	9303      	str	r3, [sp, #12]
    368e:	e79f      	b.n	35d0 <__aeabi_ddiv+0x48>
    3690:	4651      	mov	r1, sl
    3692:	465a      	mov	r2, fp
    3694:	4311      	orrs	r1, r2
    3696:	d129      	bne.n	36ec <__aeabi_ddiv+0x164>
    3698:	2200      	movs	r2, #0
    369a:	4693      	mov	fp, r2
    369c:	3202      	adds	r2, #2
    369e:	e7b1      	b.n	3604 <__aeabi_ddiv+0x7c>
    36a0:	4659      	mov	r1, fp
    36a2:	4301      	orrs	r1, r0
    36a4:	d01e      	beq.n	36e4 <__aeabi_ddiv+0x15c>
    36a6:	465b      	mov	r3, fp
    36a8:	2b00      	cmp	r3, #0
    36aa:	d100      	bne.n	36ae <__aeabi_ddiv+0x126>
    36ac:	e19e      	b.n	39ec <__aeabi_ddiv+0x464>
    36ae:	4658      	mov	r0, fp
    36b0:	f001 f930 	bl	4914 <__clzsi2>
    36b4:	0003      	movs	r3, r0
    36b6:	3b0b      	subs	r3, #11
    36b8:	2b1c      	cmp	r3, #28
    36ba:	dd00      	ble.n	36be <__aeabi_ddiv+0x136>
    36bc:	e18f      	b.n	39de <__aeabi_ddiv+0x456>
    36be:	0002      	movs	r2, r0
    36c0:	4659      	mov	r1, fp
    36c2:	3a08      	subs	r2, #8
    36c4:	4091      	lsls	r1, r2
    36c6:	468b      	mov	fp, r1
    36c8:	211d      	movs	r1, #29
    36ca:	1acb      	subs	r3, r1, r3
    36cc:	4651      	mov	r1, sl
    36ce:	40d9      	lsrs	r1, r3
    36d0:	000b      	movs	r3, r1
    36d2:	4659      	mov	r1, fp
    36d4:	430b      	orrs	r3, r1
    36d6:	4651      	mov	r1, sl
    36d8:	469b      	mov	fp, r3
    36da:	4091      	lsls	r1, r2
    36dc:	4b26      	ldr	r3, [pc, #152]	; (3778 <__aeabi_ddiv+0x1f0>)
    36de:	2200      	movs	r2, #0
    36e0:	1a1b      	subs	r3, r3, r0
    36e2:	e78f      	b.n	3604 <__aeabi_ddiv+0x7c>
    36e4:	2300      	movs	r3, #0
    36e6:	2201      	movs	r2, #1
    36e8:	469b      	mov	fp, r3
    36ea:	e78b      	b.n	3604 <__aeabi_ddiv+0x7c>
    36ec:	4651      	mov	r1, sl
    36ee:	2203      	movs	r2, #3
    36f0:	e788      	b.n	3604 <__aeabi_ddiv+0x7c>
    36f2:	2300      	movs	r3, #0
    36f4:	4698      	mov	r8, r3
    36f6:	3301      	adds	r3, #1
    36f8:	2604      	movs	r6, #4
    36fa:	2400      	movs	r4, #0
    36fc:	9303      	str	r3, [sp, #12]
    36fe:	e767      	b.n	35d0 <__aeabi_ddiv+0x48>
    3700:	2303      	movs	r3, #3
    3702:	46b1      	mov	r9, r6
    3704:	9303      	str	r3, [sp, #12]
    3706:	260c      	movs	r6, #12
    3708:	e762      	b.n	35d0 <__aeabi_ddiv+0x48>
    370a:	2a03      	cmp	r2, #3
    370c:	d100      	bne.n	3710 <__aeabi_ddiv+0x188>
    370e:	e25c      	b.n	3bca <__aeabi_ddiv+0x642>
    3710:	9b01      	ldr	r3, [sp, #4]
    3712:	2a01      	cmp	r2, #1
    3714:	d000      	beq.n	3718 <__aeabi_ddiv+0x190>
    3716:	e1e4      	b.n	3ae2 <__aeabi_ddiv+0x55a>
    3718:	4013      	ands	r3, r2
    371a:	469c      	mov	ip, r3
    371c:	2300      	movs	r3, #0
    371e:	2400      	movs	r4, #0
    3720:	2200      	movs	r2, #0
    3722:	4698      	mov	r8, r3
    3724:	2100      	movs	r1, #0
    3726:	0312      	lsls	r2, r2, #12
    3728:	0b13      	lsrs	r3, r2, #12
    372a:	0d0a      	lsrs	r2, r1, #20
    372c:	0512      	lsls	r2, r2, #20
    372e:	431a      	orrs	r2, r3
    3730:	0523      	lsls	r3, r4, #20
    3732:	4c12      	ldr	r4, [pc, #72]	; (377c <__aeabi_ddiv+0x1f4>)
    3734:	4640      	mov	r0, r8
    3736:	4022      	ands	r2, r4
    3738:	4313      	orrs	r3, r2
    373a:	4662      	mov	r2, ip
    373c:	005b      	lsls	r3, r3, #1
    373e:	07d2      	lsls	r2, r2, #31
    3740:	085b      	lsrs	r3, r3, #1
    3742:	4313      	orrs	r3, r2
    3744:	0019      	movs	r1, r3
    3746:	b007      	add	sp, #28
    3748:	bc3c      	pop	{r2, r3, r4, r5}
    374a:	4690      	mov	r8, r2
    374c:	4699      	mov	r9, r3
    374e:	46a2      	mov	sl, r4
    3750:	46ab      	mov	fp, r5
    3752:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3754:	2300      	movs	r3, #0
    3756:	2280      	movs	r2, #128	; 0x80
    3758:	469c      	mov	ip, r3
    375a:	0312      	lsls	r2, r2, #12
    375c:	4698      	mov	r8, r3
    375e:	4c03      	ldr	r4, [pc, #12]	; (376c <__aeabi_ddiv+0x1e4>)
    3760:	e7e0      	b.n	3724 <__aeabi_ddiv+0x19c>
    3762:	2300      	movs	r3, #0
    3764:	4c01      	ldr	r4, [pc, #4]	; (376c <__aeabi_ddiv+0x1e4>)
    3766:	2200      	movs	r2, #0
    3768:	4698      	mov	r8, r3
    376a:	e7db      	b.n	3724 <__aeabi_ddiv+0x19c>
    376c:	000007ff 	.word	0x000007ff
    3770:	fffffc01 	.word	0xfffffc01
    3774:	000058a0 	.word	0x000058a0
    3778:	fffffc0d 	.word	0xfffffc0d
    377c:	800fffff 	.word	0x800fffff
    3780:	45d9      	cmp	r9, fp
    3782:	d900      	bls.n	3786 <__aeabi_ddiv+0x1fe>
    3784:	e139      	b.n	39fa <__aeabi_ddiv+0x472>
    3786:	d100      	bne.n	378a <__aeabi_ddiv+0x202>
    3788:	e134      	b.n	39f4 <__aeabi_ddiv+0x46c>
    378a:	2300      	movs	r3, #0
    378c:	4646      	mov	r6, r8
    378e:	464d      	mov	r5, r9
    3790:	469a      	mov	sl, r3
    3792:	3c01      	subs	r4, #1
    3794:	465b      	mov	r3, fp
    3796:	0e0a      	lsrs	r2, r1, #24
    3798:	021b      	lsls	r3, r3, #8
    379a:	431a      	orrs	r2, r3
    379c:	020b      	lsls	r3, r1, #8
    379e:	0c17      	lsrs	r7, r2, #16
    37a0:	9303      	str	r3, [sp, #12]
    37a2:	0413      	lsls	r3, r2, #16
    37a4:	0c1b      	lsrs	r3, r3, #16
    37a6:	0039      	movs	r1, r7
    37a8:	0028      	movs	r0, r5
    37aa:	4690      	mov	r8, r2
    37ac:	9301      	str	r3, [sp, #4]
    37ae:	f7fd fb9c 	bl	eea <__aeabi_uidiv>
    37b2:	0002      	movs	r2, r0
    37b4:	9b01      	ldr	r3, [sp, #4]
    37b6:	4683      	mov	fp, r0
    37b8:	435a      	muls	r2, r3
    37ba:	0028      	movs	r0, r5
    37bc:	0039      	movs	r1, r7
    37be:	4691      	mov	r9, r2
    37c0:	f7fd fbae 	bl	f20 <__aeabi_uidivmod>
    37c4:	0c35      	lsrs	r5, r6, #16
    37c6:	0409      	lsls	r1, r1, #16
    37c8:	430d      	orrs	r5, r1
    37ca:	45a9      	cmp	r9, r5
    37cc:	d90d      	bls.n	37ea <__aeabi_ddiv+0x262>
    37ce:	465b      	mov	r3, fp
    37d0:	4445      	add	r5, r8
    37d2:	3b01      	subs	r3, #1
    37d4:	45a8      	cmp	r8, r5
    37d6:	d900      	bls.n	37da <__aeabi_ddiv+0x252>
    37d8:	e13a      	b.n	3a50 <__aeabi_ddiv+0x4c8>
    37da:	45a9      	cmp	r9, r5
    37dc:	d800      	bhi.n	37e0 <__aeabi_ddiv+0x258>
    37de:	e137      	b.n	3a50 <__aeabi_ddiv+0x4c8>
    37e0:	2302      	movs	r3, #2
    37e2:	425b      	negs	r3, r3
    37e4:	469c      	mov	ip, r3
    37e6:	4445      	add	r5, r8
    37e8:	44e3      	add	fp, ip
    37ea:	464b      	mov	r3, r9
    37ec:	1aeb      	subs	r3, r5, r3
    37ee:	0039      	movs	r1, r7
    37f0:	0018      	movs	r0, r3
    37f2:	9304      	str	r3, [sp, #16]
    37f4:	f7fd fb79 	bl	eea <__aeabi_uidiv>
    37f8:	9b01      	ldr	r3, [sp, #4]
    37fa:	0005      	movs	r5, r0
    37fc:	4343      	muls	r3, r0
    37fe:	0039      	movs	r1, r7
    3800:	9804      	ldr	r0, [sp, #16]
    3802:	4699      	mov	r9, r3
    3804:	f7fd fb8c 	bl	f20 <__aeabi_uidivmod>
    3808:	0433      	lsls	r3, r6, #16
    380a:	0409      	lsls	r1, r1, #16
    380c:	0c1b      	lsrs	r3, r3, #16
    380e:	430b      	orrs	r3, r1
    3810:	4599      	cmp	r9, r3
    3812:	d909      	bls.n	3828 <__aeabi_ddiv+0x2a0>
    3814:	4443      	add	r3, r8
    3816:	1e6a      	subs	r2, r5, #1
    3818:	4598      	cmp	r8, r3
    381a:	d900      	bls.n	381e <__aeabi_ddiv+0x296>
    381c:	e11a      	b.n	3a54 <__aeabi_ddiv+0x4cc>
    381e:	4599      	cmp	r9, r3
    3820:	d800      	bhi.n	3824 <__aeabi_ddiv+0x29c>
    3822:	e117      	b.n	3a54 <__aeabi_ddiv+0x4cc>
    3824:	3d02      	subs	r5, #2
    3826:	4443      	add	r3, r8
    3828:	464a      	mov	r2, r9
    382a:	1a9b      	subs	r3, r3, r2
    382c:	465a      	mov	r2, fp
    382e:	0412      	lsls	r2, r2, #16
    3830:	432a      	orrs	r2, r5
    3832:	9903      	ldr	r1, [sp, #12]
    3834:	4693      	mov	fp, r2
    3836:	0c10      	lsrs	r0, r2, #16
    3838:	0c0a      	lsrs	r2, r1, #16
    383a:	4691      	mov	r9, r2
    383c:	0409      	lsls	r1, r1, #16
    383e:	465a      	mov	r2, fp
    3840:	0c09      	lsrs	r1, r1, #16
    3842:	464e      	mov	r6, r9
    3844:	000d      	movs	r5, r1
    3846:	0412      	lsls	r2, r2, #16
    3848:	0c12      	lsrs	r2, r2, #16
    384a:	4345      	muls	r5, r0
    384c:	9105      	str	r1, [sp, #20]
    384e:	4351      	muls	r1, r2
    3850:	4372      	muls	r2, r6
    3852:	4370      	muls	r0, r6
    3854:	1952      	adds	r2, r2, r5
    3856:	0c0e      	lsrs	r6, r1, #16
    3858:	18b2      	adds	r2, r6, r2
    385a:	4295      	cmp	r5, r2
    385c:	d903      	bls.n	3866 <__aeabi_ddiv+0x2de>
    385e:	2580      	movs	r5, #128	; 0x80
    3860:	026d      	lsls	r5, r5, #9
    3862:	46ac      	mov	ip, r5
    3864:	4460      	add	r0, ip
    3866:	0c15      	lsrs	r5, r2, #16
    3868:	0409      	lsls	r1, r1, #16
    386a:	0412      	lsls	r2, r2, #16
    386c:	0c09      	lsrs	r1, r1, #16
    386e:	1828      	adds	r0, r5, r0
    3870:	1852      	adds	r2, r2, r1
    3872:	4283      	cmp	r3, r0
    3874:	d200      	bcs.n	3878 <__aeabi_ddiv+0x2f0>
    3876:	e0ce      	b.n	3a16 <__aeabi_ddiv+0x48e>
    3878:	d100      	bne.n	387c <__aeabi_ddiv+0x2f4>
    387a:	e0c8      	b.n	3a0e <__aeabi_ddiv+0x486>
    387c:	1a1d      	subs	r5, r3, r0
    387e:	4653      	mov	r3, sl
    3880:	1a9e      	subs	r6, r3, r2
    3882:	45b2      	cmp	sl, r6
    3884:	4192      	sbcs	r2, r2
    3886:	4252      	negs	r2, r2
    3888:	1aab      	subs	r3, r5, r2
    388a:	469a      	mov	sl, r3
    388c:	4598      	cmp	r8, r3
    388e:	d100      	bne.n	3892 <__aeabi_ddiv+0x30a>
    3890:	e117      	b.n	3ac2 <__aeabi_ddiv+0x53a>
    3892:	0039      	movs	r1, r7
    3894:	0018      	movs	r0, r3
    3896:	f7fd fb28 	bl	eea <__aeabi_uidiv>
    389a:	9b01      	ldr	r3, [sp, #4]
    389c:	0005      	movs	r5, r0
    389e:	4343      	muls	r3, r0
    38a0:	0039      	movs	r1, r7
    38a2:	4650      	mov	r0, sl
    38a4:	9304      	str	r3, [sp, #16]
    38a6:	f7fd fb3b 	bl	f20 <__aeabi_uidivmod>
    38aa:	9804      	ldr	r0, [sp, #16]
    38ac:	040b      	lsls	r3, r1, #16
    38ae:	0c31      	lsrs	r1, r6, #16
    38b0:	4319      	orrs	r1, r3
    38b2:	4288      	cmp	r0, r1
    38b4:	d909      	bls.n	38ca <__aeabi_ddiv+0x342>
    38b6:	4441      	add	r1, r8
    38b8:	1e6b      	subs	r3, r5, #1
    38ba:	4588      	cmp	r8, r1
    38bc:	d900      	bls.n	38c0 <__aeabi_ddiv+0x338>
    38be:	e107      	b.n	3ad0 <__aeabi_ddiv+0x548>
    38c0:	4288      	cmp	r0, r1
    38c2:	d800      	bhi.n	38c6 <__aeabi_ddiv+0x33e>
    38c4:	e104      	b.n	3ad0 <__aeabi_ddiv+0x548>
    38c6:	3d02      	subs	r5, #2
    38c8:	4441      	add	r1, r8
    38ca:	9b04      	ldr	r3, [sp, #16]
    38cc:	1acb      	subs	r3, r1, r3
    38ce:	0018      	movs	r0, r3
    38d0:	0039      	movs	r1, r7
    38d2:	9304      	str	r3, [sp, #16]
    38d4:	f7fd fb09 	bl	eea <__aeabi_uidiv>
    38d8:	9b01      	ldr	r3, [sp, #4]
    38da:	4682      	mov	sl, r0
    38dc:	4343      	muls	r3, r0
    38de:	0039      	movs	r1, r7
    38e0:	9804      	ldr	r0, [sp, #16]
    38e2:	9301      	str	r3, [sp, #4]
    38e4:	f7fd fb1c 	bl	f20 <__aeabi_uidivmod>
    38e8:	9801      	ldr	r0, [sp, #4]
    38ea:	040b      	lsls	r3, r1, #16
    38ec:	0431      	lsls	r1, r6, #16
    38ee:	0c09      	lsrs	r1, r1, #16
    38f0:	4319      	orrs	r1, r3
    38f2:	4288      	cmp	r0, r1
    38f4:	d90d      	bls.n	3912 <__aeabi_ddiv+0x38a>
    38f6:	4653      	mov	r3, sl
    38f8:	4441      	add	r1, r8
    38fa:	3b01      	subs	r3, #1
    38fc:	4588      	cmp	r8, r1
    38fe:	d900      	bls.n	3902 <__aeabi_ddiv+0x37a>
    3900:	e0e8      	b.n	3ad4 <__aeabi_ddiv+0x54c>
    3902:	4288      	cmp	r0, r1
    3904:	d800      	bhi.n	3908 <__aeabi_ddiv+0x380>
    3906:	e0e5      	b.n	3ad4 <__aeabi_ddiv+0x54c>
    3908:	2302      	movs	r3, #2
    390a:	425b      	negs	r3, r3
    390c:	469c      	mov	ip, r3
    390e:	4441      	add	r1, r8
    3910:	44e2      	add	sl, ip
    3912:	9b01      	ldr	r3, [sp, #4]
    3914:	042d      	lsls	r5, r5, #16
    3916:	1ace      	subs	r6, r1, r3
    3918:	4651      	mov	r1, sl
    391a:	4329      	orrs	r1, r5
    391c:	9d05      	ldr	r5, [sp, #20]
    391e:	464f      	mov	r7, r9
    3920:	002a      	movs	r2, r5
    3922:	040b      	lsls	r3, r1, #16
    3924:	0c08      	lsrs	r0, r1, #16
    3926:	0c1b      	lsrs	r3, r3, #16
    3928:	435a      	muls	r2, r3
    392a:	4345      	muls	r5, r0
    392c:	437b      	muls	r3, r7
    392e:	4378      	muls	r0, r7
    3930:	195b      	adds	r3, r3, r5
    3932:	0c17      	lsrs	r7, r2, #16
    3934:	18fb      	adds	r3, r7, r3
    3936:	429d      	cmp	r5, r3
    3938:	d903      	bls.n	3942 <__aeabi_ddiv+0x3ba>
    393a:	2580      	movs	r5, #128	; 0x80
    393c:	026d      	lsls	r5, r5, #9
    393e:	46ac      	mov	ip, r5
    3940:	4460      	add	r0, ip
    3942:	0c1d      	lsrs	r5, r3, #16
    3944:	0412      	lsls	r2, r2, #16
    3946:	041b      	lsls	r3, r3, #16
    3948:	0c12      	lsrs	r2, r2, #16
    394a:	1828      	adds	r0, r5, r0
    394c:	189b      	adds	r3, r3, r2
    394e:	4286      	cmp	r6, r0
    3950:	d200      	bcs.n	3954 <__aeabi_ddiv+0x3cc>
    3952:	e093      	b.n	3a7c <__aeabi_ddiv+0x4f4>
    3954:	d100      	bne.n	3958 <__aeabi_ddiv+0x3d0>
    3956:	e08e      	b.n	3a76 <__aeabi_ddiv+0x4ee>
    3958:	2301      	movs	r3, #1
    395a:	4319      	orrs	r1, r3
    395c:	4ba0      	ldr	r3, [pc, #640]	; (3be0 <__aeabi_ddiv+0x658>)
    395e:	18e3      	adds	r3, r4, r3
    3960:	2b00      	cmp	r3, #0
    3962:	dc00      	bgt.n	3966 <__aeabi_ddiv+0x3de>
    3964:	e099      	b.n	3a9a <__aeabi_ddiv+0x512>
    3966:	074a      	lsls	r2, r1, #29
    3968:	d000      	beq.n	396c <__aeabi_ddiv+0x3e4>
    396a:	e09e      	b.n	3aaa <__aeabi_ddiv+0x522>
    396c:	465a      	mov	r2, fp
    396e:	01d2      	lsls	r2, r2, #7
    3970:	d506      	bpl.n	3980 <__aeabi_ddiv+0x3f8>
    3972:	465a      	mov	r2, fp
    3974:	4b9b      	ldr	r3, [pc, #620]	; (3be4 <__aeabi_ddiv+0x65c>)
    3976:	401a      	ands	r2, r3
    3978:	2380      	movs	r3, #128	; 0x80
    397a:	4693      	mov	fp, r2
    397c:	00db      	lsls	r3, r3, #3
    397e:	18e3      	adds	r3, r4, r3
    3980:	4a99      	ldr	r2, [pc, #612]	; (3be8 <__aeabi_ddiv+0x660>)
    3982:	4293      	cmp	r3, r2
    3984:	dd68      	ble.n	3a58 <__aeabi_ddiv+0x4d0>
    3986:	2301      	movs	r3, #1
    3988:	9a02      	ldr	r2, [sp, #8]
    398a:	4c98      	ldr	r4, [pc, #608]	; (3bec <__aeabi_ddiv+0x664>)
    398c:	401a      	ands	r2, r3
    398e:	2300      	movs	r3, #0
    3990:	4694      	mov	ip, r2
    3992:	4698      	mov	r8, r3
    3994:	2200      	movs	r2, #0
    3996:	e6c5      	b.n	3724 <__aeabi_ddiv+0x19c>
    3998:	2280      	movs	r2, #128	; 0x80
    399a:	464b      	mov	r3, r9
    399c:	0312      	lsls	r2, r2, #12
    399e:	4213      	tst	r3, r2
    39a0:	d00a      	beq.n	39b8 <__aeabi_ddiv+0x430>
    39a2:	465b      	mov	r3, fp
    39a4:	4213      	tst	r3, r2
    39a6:	d106      	bne.n	39b6 <__aeabi_ddiv+0x42e>
    39a8:	431a      	orrs	r2, r3
    39aa:	0312      	lsls	r2, r2, #12
    39ac:	0b12      	lsrs	r2, r2, #12
    39ae:	46ac      	mov	ip, r5
    39b0:	4688      	mov	r8, r1
    39b2:	4c8e      	ldr	r4, [pc, #568]	; (3bec <__aeabi_ddiv+0x664>)
    39b4:	e6b6      	b.n	3724 <__aeabi_ddiv+0x19c>
    39b6:	464b      	mov	r3, r9
    39b8:	431a      	orrs	r2, r3
    39ba:	0312      	lsls	r2, r2, #12
    39bc:	0b12      	lsrs	r2, r2, #12
    39be:	46bc      	mov	ip, r7
    39c0:	4c8a      	ldr	r4, [pc, #552]	; (3bec <__aeabi_ddiv+0x664>)
    39c2:	e6af      	b.n	3724 <__aeabi_ddiv+0x19c>
    39c4:	0003      	movs	r3, r0
    39c6:	465a      	mov	r2, fp
    39c8:	3b28      	subs	r3, #40	; 0x28
    39ca:	409a      	lsls	r2, r3
    39cc:	2300      	movs	r3, #0
    39ce:	4691      	mov	r9, r2
    39d0:	4698      	mov	r8, r3
    39d2:	e657      	b.n	3684 <__aeabi_ddiv+0xfc>
    39d4:	4658      	mov	r0, fp
    39d6:	f000 ff9d 	bl	4914 <__clzsi2>
    39da:	3020      	adds	r0, #32
    39dc:	e640      	b.n	3660 <__aeabi_ddiv+0xd8>
    39de:	0003      	movs	r3, r0
    39e0:	4652      	mov	r2, sl
    39e2:	3b28      	subs	r3, #40	; 0x28
    39e4:	409a      	lsls	r2, r3
    39e6:	2100      	movs	r1, #0
    39e8:	4693      	mov	fp, r2
    39ea:	e677      	b.n	36dc <__aeabi_ddiv+0x154>
    39ec:	f000 ff92 	bl	4914 <__clzsi2>
    39f0:	3020      	adds	r0, #32
    39f2:	e65f      	b.n	36b4 <__aeabi_ddiv+0x12c>
    39f4:	4588      	cmp	r8, r1
    39f6:	d200      	bcs.n	39fa <__aeabi_ddiv+0x472>
    39f8:	e6c7      	b.n	378a <__aeabi_ddiv+0x202>
    39fa:	464b      	mov	r3, r9
    39fc:	07de      	lsls	r6, r3, #31
    39fe:	085d      	lsrs	r5, r3, #1
    3a00:	4643      	mov	r3, r8
    3a02:	085b      	lsrs	r3, r3, #1
    3a04:	431e      	orrs	r6, r3
    3a06:	4643      	mov	r3, r8
    3a08:	07db      	lsls	r3, r3, #31
    3a0a:	469a      	mov	sl, r3
    3a0c:	e6c2      	b.n	3794 <__aeabi_ddiv+0x20c>
    3a0e:	2500      	movs	r5, #0
    3a10:	4592      	cmp	sl, r2
    3a12:	d300      	bcc.n	3a16 <__aeabi_ddiv+0x48e>
    3a14:	e733      	b.n	387e <__aeabi_ddiv+0x2f6>
    3a16:	9e03      	ldr	r6, [sp, #12]
    3a18:	4659      	mov	r1, fp
    3a1a:	46b4      	mov	ip, r6
    3a1c:	44e2      	add	sl, ip
    3a1e:	45b2      	cmp	sl, r6
    3a20:	41ad      	sbcs	r5, r5
    3a22:	426d      	negs	r5, r5
    3a24:	4445      	add	r5, r8
    3a26:	18eb      	adds	r3, r5, r3
    3a28:	3901      	subs	r1, #1
    3a2a:	4598      	cmp	r8, r3
    3a2c:	d207      	bcs.n	3a3e <__aeabi_ddiv+0x4b6>
    3a2e:	4298      	cmp	r0, r3
    3a30:	d900      	bls.n	3a34 <__aeabi_ddiv+0x4ac>
    3a32:	e07f      	b.n	3b34 <__aeabi_ddiv+0x5ac>
    3a34:	d100      	bne.n	3a38 <__aeabi_ddiv+0x4b0>
    3a36:	e0bc      	b.n	3bb2 <__aeabi_ddiv+0x62a>
    3a38:	1a1d      	subs	r5, r3, r0
    3a3a:	468b      	mov	fp, r1
    3a3c:	e71f      	b.n	387e <__aeabi_ddiv+0x2f6>
    3a3e:	4598      	cmp	r8, r3
    3a40:	d1fa      	bne.n	3a38 <__aeabi_ddiv+0x4b0>
    3a42:	9d03      	ldr	r5, [sp, #12]
    3a44:	4555      	cmp	r5, sl
    3a46:	d9f2      	bls.n	3a2e <__aeabi_ddiv+0x4a6>
    3a48:	4643      	mov	r3, r8
    3a4a:	468b      	mov	fp, r1
    3a4c:	1a1d      	subs	r5, r3, r0
    3a4e:	e716      	b.n	387e <__aeabi_ddiv+0x2f6>
    3a50:	469b      	mov	fp, r3
    3a52:	e6ca      	b.n	37ea <__aeabi_ddiv+0x262>
    3a54:	0015      	movs	r5, r2
    3a56:	e6e7      	b.n	3828 <__aeabi_ddiv+0x2a0>
    3a58:	465a      	mov	r2, fp
    3a5a:	08c9      	lsrs	r1, r1, #3
    3a5c:	0752      	lsls	r2, r2, #29
    3a5e:	430a      	orrs	r2, r1
    3a60:	055b      	lsls	r3, r3, #21
    3a62:	4690      	mov	r8, r2
    3a64:	0d5c      	lsrs	r4, r3, #21
    3a66:	465a      	mov	r2, fp
    3a68:	2301      	movs	r3, #1
    3a6a:	9902      	ldr	r1, [sp, #8]
    3a6c:	0252      	lsls	r2, r2, #9
    3a6e:	4019      	ands	r1, r3
    3a70:	0b12      	lsrs	r2, r2, #12
    3a72:	468c      	mov	ip, r1
    3a74:	e656      	b.n	3724 <__aeabi_ddiv+0x19c>
    3a76:	2b00      	cmp	r3, #0
    3a78:	d100      	bne.n	3a7c <__aeabi_ddiv+0x4f4>
    3a7a:	e76f      	b.n	395c <__aeabi_ddiv+0x3d4>
    3a7c:	4446      	add	r6, r8
    3a7e:	1e4a      	subs	r2, r1, #1
    3a80:	45b0      	cmp	r8, r6
    3a82:	d929      	bls.n	3ad8 <__aeabi_ddiv+0x550>
    3a84:	0011      	movs	r1, r2
    3a86:	4286      	cmp	r6, r0
    3a88:	d000      	beq.n	3a8c <__aeabi_ddiv+0x504>
    3a8a:	e765      	b.n	3958 <__aeabi_ddiv+0x3d0>
    3a8c:	9a03      	ldr	r2, [sp, #12]
    3a8e:	4293      	cmp	r3, r2
    3a90:	d000      	beq.n	3a94 <__aeabi_ddiv+0x50c>
    3a92:	e761      	b.n	3958 <__aeabi_ddiv+0x3d0>
    3a94:	e762      	b.n	395c <__aeabi_ddiv+0x3d4>
    3a96:	2101      	movs	r1, #1
    3a98:	4249      	negs	r1, r1
    3a9a:	2001      	movs	r0, #1
    3a9c:	1ac2      	subs	r2, r0, r3
    3a9e:	2a38      	cmp	r2, #56	; 0x38
    3aa0:	dd21      	ble.n	3ae6 <__aeabi_ddiv+0x55e>
    3aa2:	9b02      	ldr	r3, [sp, #8]
    3aa4:	4003      	ands	r3, r0
    3aa6:	469c      	mov	ip, r3
    3aa8:	e638      	b.n	371c <__aeabi_ddiv+0x194>
    3aaa:	220f      	movs	r2, #15
    3aac:	400a      	ands	r2, r1
    3aae:	2a04      	cmp	r2, #4
    3ab0:	d100      	bne.n	3ab4 <__aeabi_ddiv+0x52c>
    3ab2:	e75b      	b.n	396c <__aeabi_ddiv+0x3e4>
    3ab4:	000a      	movs	r2, r1
    3ab6:	1d11      	adds	r1, r2, #4
    3ab8:	4291      	cmp	r1, r2
    3aba:	4192      	sbcs	r2, r2
    3abc:	4252      	negs	r2, r2
    3abe:	4493      	add	fp, r2
    3ac0:	e754      	b.n	396c <__aeabi_ddiv+0x3e4>
    3ac2:	4b47      	ldr	r3, [pc, #284]	; (3be0 <__aeabi_ddiv+0x658>)
    3ac4:	18e3      	adds	r3, r4, r3
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	dde5      	ble.n	3a96 <__aeabi_ddiv+0x50e>
    3aca:	2201      	movs	r2, #1
    3acc:	4252      	negs	r2, r2
    3ace:	e7f2      	b.n	3ab6 <__aeabi_ddiv+0x52e>
    3ad0:	001d      	movs	r5, r3
    3ad2:	e6fa      	b.n	38ca <__aeabi_ddiv+0x342>
    3ad4:	469a      	mov	sl, r3
    3ad6:	e71c      	b.n	3912 <__aeabi_ddiv+0x38a>
    3ad8:	42b0      	cmp	r0, r6
    3ada:	d839      	bhi.n	3b50 <__aeabi_ddiv+0x5c8>
    3adc:	d06e      	beq.n	3bbc <__aeabi_ddiv+0x634>
    3ade:	0011      	movs	r1, r2
    3ae0:	e73a      	b.n	3958 <__aeabi_ddiv+0x3d0>
    3ae2:	9302      	str	r3, [sp, #8]
    3ae4:	e73a      	b.n	395c <__aeabi_ddiv+0x3d4>
    3ae6:	2a1f      	cmp	r2, #31
    3ae8:	dc3c      	bgt.n	3b64 <__aeabi_ddiv+0x5dc>
    3aea:	2320      	movs	r3, #32
    3aec:	1a9b      	subs	r3, r3, r2
    3aee:	000c      	movs	r4, r1
    3af0:	4658      	mov	r0, fp
    3af2:	4099      	lsls	r1, r3
    3af4:	4098      	lsls	r0, r3
    3af6:	1e4b      	subs	r3, r1, #1
    3af8:	4199      	sbcs	r1, r3
    3afa:	465b      	mov	r3, fp
    3afc:	40d4      	lsrs	r4, r2
    3afe:	40d3      	lsrs	r3, r2
    3b00:	4320      	orrs	r0, r4
    3b02:	4308      	orrs	r0, r1
    3b04:	001a      	movs	r2, r3
    3b06:	0743      	lsls	r3, r0, #29
    3b08:	d009      	beq.n	3b1e <__aeabi_ddiv+0x596>
    3b0a:	230f      	movs	r3, #15
    3b0c:	4003      	ands	r3, r0
    3b0e:	2b04      	cmp	r3, #4
    3b10:	d005      	beq.n	3b1e <__aeabi_ddiv+0x596>
    3b12:	0001      	movs	r1, r0
    3b14:	1d08      	adds	r0, r1, #4
    3b16:	4288      	cmp	r0, r1
    3b18:	419b      	sbcs	r3, r3
    3b1a:	425b      	negs	r3, r3
    3b1c:	18d2      	adds	r2, r2, r3
    3b1e:	0213      	lsls	r3, r2, #8
    3b20:	d53a      	bpl.n	3b98 <__aeabi_ddiv+0x610>
    3b22:	2301      	movs	r3, #1
    3b24:	9a02      	ldr	r2, [sp, #8]
    3b26:	2401      	movs	r4, #1
    3b28:	401a      	ands	r2, r3
    3b2a:	2300      	movs	r3, #0
    3b2c:	4694      	mov	ip, r2
    3b2e:	4698      	mov	r8, r3
    3b30:	2200      	movs	r2, #0
    3b32:	e5f7      	b.n	3724 <__aeabi_ddiv+0x19c>
    3b34:	2102      	movs	r1, #2
    3b36:	4249      	negs	r1, r1
    3b38:	468c      	mov	ip, r1
    3b3a:	9d03      	ldr	r5, [sp, #12]
    3b3c:	44e3      	add	fp, ip
    3b3e:	46ac      	mov	ip, r5
    3b40:	44e2      	add	sl, ip
    3b42:	45aa      	cmp	sl, r5
    3b44:	41ad      	sbcs	r5, r5
    3b46:	426d      	negs	r5, r5
    3b48:	4445      	add	r5, r8
    3b4a:	18ed      	adds	r5, r5, r3
    3b4c:	1a2d      	subs	r5, r5, r0
    3b4e:	e696      	b.n	387e <__aeabi_ddiv+0x2f6>
    3b50:	1e8a      	subs	r2, r1, #2
    3b52:	9903      	ldr	r1, [sp, #12]
    3b54:	004d      	lsls	r5, r1, #1
    3b56:	428d      	cmp	r5, r1
    3b58:	4189      	sbcs	r1, r1
    3b5a:	4249      	negs	r1, r1
    3b5c:	4441      	add	r1, r8
    3b5e:	1876      	adds	r6, r6, r1
    3b60:	9503      	str	r5, [sp, #12]
    3b62:	e78f      	b.n	3a84 <__aeabi_ddiv+0x4fc>
    3b64:	201f      	movs	r0, #31
    3b66:	4240      	negs	r0, r0
    3b68:	1ac3      	subs	r3, r0, r3
    3b6a:	4658      	mov	r0, fp
    3b6c:	40d8      	lsrs	r0, r3
    3b6e:	0003      	movs	r3, r0
    3b70:	2a20      	cmp	r2, #32
    3b72:	d028      	beq.n	3bc6 <__aeabi_ddiv+0x63e>
    3b74:	2040      	movs	r0, #64	; 0x40
    3b76:	465d      	mov	r5, fp
    3b78:	1a82      	subs	r2, r0, r2
    3b7a:	4095      	lsls	r5, r2
    3b7c:	4329      	orrs	r1, r5
    3b7e:	1e4a      	subs	r2, r1, #1
    3b80:	4191      	sbcs	r1, r2
    3b82:	4319      	orrs	r1, r3
    3b84:	2307      	movs	r3, #7
    3b86:	2200      	movs	r2, #0
    3b88:	400b      	ands	r3, r1
    3b8a:	d009      	beq.n	3ba0 <__aeabi_ddiv+0x618>
    3b8c:	230f      	movs	r3, #15
    3b8e:	2200      	movs	r2, #0
    3b90:	400b      	ands	r3, r1
    3b92:	0008      	movs	r0, r1
    3b94:	2b04      	cmp	r3, #4
    3b96:	d1bd      	bne.n	3b14 <__aeabi_ddiv+0x58c>
    3b98:	0001      	movs	r1, r0
    3b9a:	0753      	lsls	r3, r2, #29
    3b9c:	0252      	lsls	r2, r2, #9
    3b9e:	0b12      	lsrs	r2, r2, #12
    3ba0:	08c9      	lsrs	r1, r1, #3
    3ba2:	4319      	orrs	r1, r3
    3ba4:	2301      	movs	r3, #1
    3ba6:	4688      	mov	r8, r1
    3ba8:	9902      	ldr	r1, [sp, #8]
    3baa:	2400      	movs	r4, #0
    3bac:	4019      	ands	r1, r3
    3bae:	468c      	mov	ip, r1
    3bb0:	e5b8      	b.n	3724 <__aeabi_ddiv+0x19c>
    3bb2:	4552      	cmp	r2, sl
    3bb4:	d8be      	bhi.n	3b34 <__aeabi_ddiv+0x5ac>
    3bb6:	468b      	mov	fp, r1
    3bb8:	2500      	movs	r5, #0
    3bba:	e660      	b.n	387e <__aeabi_ddiv+0x2f6>
    3bbc:	9d03      	ldr	r5, [sp, #12]
    3bbe:	429d      	cmp	r5, r3
    3bc0:	d3c6      	bcc.n	3b50 <__aeabi_ddiv+0x5c8>
    3bc2:	0011      	movs	r1, r2
    3bc4:	e762      	b.n	3a8c <__aeabi_ddiv+0x504>
    3bc6:	2500      	movs	r5, #0
    3bc8:	e7d8      	b.n	3b7c <__aeabi_ddiv+0x5f4>
    3bca:	2280      	movs	r2, #128	; 0x80
    3bcc:	465b      	mov	r3, fp
    3bce:	0312      	lsls	r2, r2, #12
    3bd0:	431a      	orrs	r2, r3
    3bd2:	9b01      	ldr	r3, [sp, #4]
    3bd4:	0312      	lsls	r2, r2, #12
    3bd6:	0b12      	lsrs	r2, r2, #12
    3bd8:	469c      	mov	ip, r3
    3bda:	4688      	mov	r8, r1
    3bdc:	4c03      	ldr	r4, [pc, #12]	; (3bec <__aeabi_ddiv+0x664>)
    3bde:	e5a1      	b.n	3724 <__aeabi_ddiv+0x19c>
    3be0:	000003ff 	.word	0x000003ff
    3be4:	feffffff 	.word	0xfeffffff
    3be8:	000007fe 	.word	0x000007fe
    3bec:	000007ff 	.word	0x000007ff

00003bf0 <__aeabi_dmul>:
    3bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bf2:	4657      	mov	r7, sl
    3bf4:	4645      	mov	r5, r8
    3bf6:	46de      	mov	lr, fp
    3bf8:	464e      	mov	r6, r9
    3bfa:	b5e0      	push	{r5, r6, r7, lr}
    3bfc:	030c      	lsls	r4, r1, #12
    3bfe:	4698      	mov	r8, r3
    3c00:	004e      	lsls	r6, r1, #1
    3c02:	0b23      	lsrs	r3, r4, #12
    3c04:	b087      	sub	sp, #28
    3c06:	0007      	movs	r7, r0
    3c08:	4692      	mov	sl, r2
    3c0a:	469b      	mov	fp, r3
    3c0c:	0d76      	lsrs	r6, r6, #21
    3c0e:	0fcd      	lsrs	r5, r1, #31
    3c10:	2e00      	cmp	r6, #0
    3c12:	d06b      	beq.n	3cec <__aeabi_dmul+0xfc>
    3c14:	4b6d      	ldr	r3, [pc, #436]	; (3dcc <__aeabi_dmul+0x1dc>)
    3c16:	429e      	cmp	r6, r3
    3c18:	d035      	beq.n	3c86 <__aeabi_dmul+0x96>
    3c1a:	2480      	movs	r4, #128	; 0x80
    3c1c:	465b      	mov	r3, fp
    3c1e:	0f42      	lsrs	r2, r0, #29
    3c20:	0424      	lsls	r4, r4, #16
    3c22:	00db      	lsls	r3, r3, #3
    3c24:	4314      	orrs	r4, r2
    3c26:	431c      	orrs	r4, r3
    3c28:	00c3      	lsls	r3, r0, #3
    3c2a:	4699      	mov	r9, r3
    3c2c:	4b68      	ldr	r3, [pc, #416]	; (3dd0 <__aeabi_dmul+0x1e0>)
    3c2e:	46a3      	mov	fp, r4
    3c30:	469c      	mov	ip, r3
    3c32:	2300      	movs	r3, #0
    3c34:	2700      	movs	r7, #0
    3c36:	4466      	add	r6, ip
    3c38:	9302      	str	r3, [sp, #8]
    3c3a:	4643      	mov	r3, r8
    3c3c:	031c      	lsls	r4, r3, #12
    3c3e:	005a      	lsls	r2, r3, #1
    3c40:	0fdb      	lsrs	r3, r3, #31
    3c42:	4650      	mov	r0, sl
    3c44:	0b24      	lsrs	r4, r4, #12
    3c46:	0d52      	lsrs	r2, r2, #21
    3c48:	4698      	mov	r8, r3
    3c4a:	d100      	bne.n	3c4e <__aeabi_dmul+0x5e>
    3c4c:	e076      	b.n	3d3c <__aeabi_dmul+0x14c>
    3c4e:	4b5f      	ldr	r3, [pc, #380]	; (3dcc <__aeabi_dmul+0x1dc>)
    3c50:	429a      	cmp	r2, r3
    3c52:	d06d      	beq.n	3d30 <__aeabi_dmul+0x140>
    3c54:	2380      	movs	r3, #128	; 0x80
    3c56:	0f41      	lsrs	r1, r0, #29
    3c58:	041b      	lsls	r3, r3, #16
    3c5a:	430b      	orrs	r3, r1
    3c5c:	495c      	ldr	r1, [pc, #368]	; (3dd0 <__aeabi_dmul+0x1e0>)
    3c5e:	00e4      	lsls	r4, r4, #3
    3c60:	468c      	mov	ip, r1
    3c62:	431c      	orrs	r4, r3
    3c64:	00c3      	lsls	r3, r0, #3
    3c66:	2000      	movs	r0, #0
    3c68:	4462      	add	r2, ip
    3c6a:	4641      	mov	r1, r8
    3c6c:	18b6      	adds	r6, r6, r2
    3c6e:	4069      	eors	r1, r5
    3c70:	1c72      	adds	r2, r6, #1
    3c72:	9101      	str	r1, [sp, #4]
    3c74:	4694      	mov	ip, r2
    3c76:	4307      	orrs	r7, r0
    3c78:	2f0f      	cmp	r7, #15
    3c7a:	d900      	bls.n	3c7e <__aeabi_dmul+0x8e>
    3c7c:	e0b0      	b.n	3de0 <__aeabi_dmul+0x1f0>
    3c7e:	4a55      	ldr	r2, [pc, #340]	; (3dd4 <__aeabi_dmul+0x1e4>)
    3c80:	00bf      	lsls	r7, r7, #2
    3c82:	59d2      	ldr	r2, [r2, r7]
    3c84:	4697      	mov	pc, r2
    3c86:	465b      	mov	r3, fp
    3c88:	4303      	orrs	r3, r0
    3c8a:	4699      	mov	r9, r3
    3c8c:	d000      	beq.n	3c90 <__aeabi_dmul+0xa0>
    3c8e:	e087      	b.n	3da0 <__aeabi_dmul+0x1b0>
    3c90:	2300      	movs	r3, #0
    3c92:	469b      	mov	fp, r3
    3c94:	3302      	adds	r3, #2
    3c96:	2708      	movs	r7, #8
    3c98:	9302      	str	r3, [sp, #8]
    3c9a:	e7ce      	b.n	3c3a <__aeabi_dmul+0x4a>
    3c9c:	4642      	mov	r2, r8
    3c9e:	9201      	str	r2, [sp, #4]
    3ca0:	2802      	cmp	r0, #2
    3ca2:	d067      	beq.n	3d74 <__aeabi_dmul+0x184>
    3ca4:	2803      	cmp	r0, #3
    3ca6:	d100      	bne.n	3caa <__aeabi_dmul+0xba>
    3ca8:	e20e      	b.n	40c8 <__aeabi_dmul+0x4d8>
    3caa:	2801      	cmp	r0, #1
    3cac:	d000      	beq.n	3cb0 <__aeabi_dmul+0xc0>
    3cae:	e162      	b.n	3f76 <__aeabi_dmul+0x386>
    3cb0:	2300      	movs	r3, #0
    3cb2:	2400      	movs	r4, #0
    3cb4:	2200      	movs	r2, #0
    3cb6:	4699      	mov	r9, r3
    3cb8:	9901      	ldr	r1, [sp, #4]
    3cba:	4001      	ands	r1, r0
    3cbc:	b2cd      	uxtb	r5, r1
    3cbe:	2100      	movs	r1, #0
    3cc0:	0312      	lsls	r2, r2, #12
    3cc2:	0d0b      	lsrs	r3, r1, #20
    3cc4:	0b12      	lsrs	r2, r2, #12
    3cc6:	051b      	lsls	r3, r3, #20
    3cc8:	4313      	orrs	r3, r2
    3cca:	4a43      	ldr	r2, [pc, #268]	; (3dd8 <__aeabi_dmul+0x1e8>)
    3ccc:	0524      	lsls	r4, r4, #20
    3cce:	4013      	ands	r3, r2
    3cd0:	431c      	orrs	r4, r3
    3cd2:	0064      	lsls	r4, r4, #1
    3cd4:	07ed      	lsls	r5, r5, #31
    3cd6:	0864      	lsrs	r4, r4, #1
    3cd8:	432c      	orrs	r4, r5
    3cda:	4648      	mov	r0, r9
    3cdc:	0021      	movs	r1, r4
    3cde:	b007      	add	sp, #28
    3ce0:	bc3c      	pop	{r2, r3, r4, r5}
    3ce2:	4690      	mov	r8, r2
    3ce4:	4699      	mov	r9, r3
    3ce6:	46a2      	mov	sl, r4
    3ce8:	46ab      	mov	fp, r5
    3cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cec:	4303      	orrs	r3, r0
    3cee:	4699      	mov	r9, r3
    3cf0:	d04f      	beq.n	3d92 <__aeabi_dmul+0x1a2>
    3cf2:	465b      	mov	r3, fp
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	d100      	bne.n	3cfa <__aeabi_dmul+0x10a>
    3cf8:	e189      	b.n	400e <__aeabi_dmul+0x41e>
    3cfa:	4658      	mov	r0, fp
    3cfc:	f000 fe0a 	bl	4914 <__clzsi2>
    3d00:	0003      	movs	r3, r0
    3d02:	3b0b      	subs	r3, #11
    3d04:	2b1c      	cmp	r3, #28
    3d06:	dd00      	ble.n	3d0a <__aeabi_dmul+0x11a>
    3d08:	e17a      	b.n	4000 <__aeabi_dmul+0x410>
    3d0a:	221d      	movs	r2, #29
    3d0c:	1ad3      	subs	r3, r2, r3
    3d0e:	003a      	movs	r2, r7
    3d10:	0001      	movs	r1, r0
    3d12:	465c      	mov	r4, fp
    3d14:	40da      	lsrs	r2, r3
    3d16:	3908      	subs	r1, #8
    3d18:	408c      	lsls	r4, r1
    3d1a:	0013      	movs	r3, r2
    3d1c:	408f      	lsls	r7, r1
    3d1e:	4323      	orrs	r3, r4
    3d20:	469b      	mov	fp, r3
    3d22:	46b9      	mov	r9, r7
    3d24:	2300      	movs	r3, #0
    3d26:	4e2d      	ldr	r6, [pc, #180]	; (3ddc <__aeabi_dmul+0x1ec>)
    3d28:	2700      	movs	r7, #0
    3d2a:	1a36      	subs	r6, r6, r0
    3d2c:	9302      	str	r3, [sp, #8]
    3d2e:	e784      	b.n	3c3a <__aeabi_dmul+0x4a>
    3d30:	4653      	mov	r3, sl
    3d32:	4323      	orrs	r3, r4
    3d34:	d12a      	bne.n	3d8c <__aeabi_dmul+0x19c>
    3d36:	2400      	movs	r4, #0
    3d38:	2002      	movs	r0, #2
    3d3a:	e796      	b.n	3c6a <__aeabi_dmul+0x7a>
    3d3c:	4653      	mov	r3, sl
    3d3e:	4323      	orrs	r3, r4
    3d40:	d020      	beq.n	3d84 <__aeabi_dmul+0x194>
    3d42:	2c00      	cmp	r4, #0
    3d44:	d100      	bne.n	3d48 <__aeabi_dmul+0x158>
    3d46:	e157      	b.n	3ff8 <__aeabi_dmul+0x408>
    3d48:	0020      	movs	r0, r4
    3d4a:	f000 fde3 	bl	4914 <__clzsi2>
    3d4e:	0003      	movs	r3, r0
    3d50:	3b0b      	subs	r3, #11
    3d52:	2b1c      	cmp	r3, #28
    3d54:	dd00      	ble.n	3d58 <__aeabi_dmul+0x168>
    3d56:	e149      	b.n	3fec <__aeabi_dmul+0x3fc>
    3d58:	211d      	movs	r1, #29
    3d5a:	1acb      	subs	r3, r1, r3
    3d5c:	4651      	mov	r1, sl
    3d5e:	0002      	movs	r2, r0
    3d60:	40d9      	lsrs	r1, r3
    3d62:	4653      	mov	r3, sl
    3d64:	3a08      	subs	r2, #8
    3d66:	4094      	lsls	r4, r2
    3d68:	4093      	lsls	r3, r2
    3d6a:	430c      	orrs	r4, r1
    3d6c:	4a1b      	ldr	r2, [pc, #108]	; (3ddc <__aeabi_dmul+0x1ec>)
    3d6e:	1a12      	subs	r2, r2, r0
    3d70:	2000      	movs	r0, #0
    3d72:	e77a      	b.n	3c6a <__aeabi_dmul+0x7a>
    3d74:	2501      	movs	r5, #1
    3d76:	9b01      	ldr	r3, [sp, #4]
    3d78:	4c14      	ldr	r4, [pc, #80]	; (3dcc <__aeabi_dmul+0x1dc>)
    3d7a:	401d      	ands	r5, r3
    3d7c:	2300      	movs	r3, #0
    3d7e:	2200      	movs	r2, #0
    3d80:	4699      	mov	r9, r3
    3d82:	e79c      	b.n	3cbe <__aeabi_dmul+0xce>
    3d84:	2400      	movs	r4, #0
    3d86:	2200      	movs	r2, #0
    3d88:	2001      	movs	r0, #1
    3d8a:	e76e      	b.n	3c6a <__aeabi_dmul+0x7a>
    3d8c:	4653      	mov	r3, sl
    3d8e:	2003      	movs	r0, #3
    3d90:	e76b      	b.n	3c6a <__aeabi_dmul+0x7a>
    3d92:	2300      	movs	r3, #0
    3d94:	469b      	mov	fp, r3
    3d96:	3301      	adds	r3, #1
    3d98:	2704      	movs	r7, #4
    3d9a:	2600      	movs	r6, #0
    3d9c:	9302      	str	r3, [sp, #8]
    3d9e:	e74c      	b.n	3c3a <__aeabi_dmul+0x4a>
    3da0:	2303      	movs	r3, #3
    3da2:	4681      	mov	r9, r0
    3da4:	270c      	movs	r7, #12
    3da6:	9302      	str	r3, [sp, #8]
    3da8:	e747      	b.n	3c3a <__aeabi_dmul+0x4a>
    3daa:	2280      	movs	r2, #128	; 0x80
    3dac:	2300      	movs	r3, #0
    3dae:	2500      	movs	r5, #0
    3db0:	0312      	lsls	r2, r2, #12
    3db2:	4699      	mov	r9, r3
    3db4:	4c05      	ldr	r4, [pc, #20]	; (3dcc <__aeabi_dmul+0x1dc>)
    3db6:	e782      	b.n	3cbe <__aeabi_dmul+0xce>
    3db8:	465c      	mov	r4, fp
    3dba:	464b      	mov	r3, r9
    3dbc:	9802      	ldr	r0, [sp, #8]
    3dbe:	e76f      	b.n	3ca0 <__aeabi_dmul+0xb0>
    3dc0:	465c      	mov	r4, fp
    3dc2:	464b      	mov	r3, r9
    3dc4:	9501      	str	r5, [sp, #4]
    3dc6:	9802      	ldr	r0, [sp, #8]
    3dc8:	e76a      	b.n	3ca0 <__aeabi_dmul+0xb0>
    3dca:	46c0      	nop			; (mov r8, r8)
    3dcc:	000007ff 	.word	0x000007ff
    3dd0:	fffffc01 	.word	0xfffffc01
    3dd4:	000058e0 	.word	0x000058e0
    3dd8:	800fffff 	.word	0x800fffff
    3ddc:	fffffc0d 	.word	0xfffffc0d
    3de0:	464a      	mov	r2, r9
    3de2:	4649      	mov	r1, r9
    3de4:	0c17      	lsrs	r7, r2, #16
    3de6:	0c1a      	lsrs	r2, r3, #16
    3de8:	041b      	lsls	r3, r3, #16
    3dea:	0c1b      	lsrs	r3, r3, #16
    3dec:	0408      	lsls	r0, r1, #16
    3dee:	0019      	movs	r1, r3
    3df0:	0c00      	lsrs	r0, r0, #16
    3df2:	4341      	muls	r1, r0
    3df4:	0015      	movs	r5, r2
    3df6:	4688      	mov	r8, r1
    3df8:	0019      	movs	r1, r3
    3dfa:	437d      	muls	r5, r7
    3dfc:	4379      	muls	r1, r7
    3dfe:	9503      	str	r5, [sp, #12]
    3e00:	4689      	mov	r9, r1
    3e02:	0029      	movs	r1, r5
    3e04:	0015      	movs	r5, r2
    3e06:	4345      	muls	r5, r0
    3e08:	444d      	add	r5, r9
    3e0a:	9502      	str	r5, [sp, #8]
    3e0c:	4645      	mov	r5, r8
    3e0e:	0c2d      	lsrs	r5, r5, #16
    3e10:	46aa      	mov	sl, r5
    3e12:	9d02      	ldr	r5, [sp, #8]
    3e14:	4455      	add	r5, sl
    3e16:	45a9      	cmp	r9, r5
    3e18:	d906      	bls.n	3e28 <__aeabi_dmul+0x238>
    3e1a:	468a      	mov	sl, r1
    3e1c:	2180      	movs	r1, #128	; 0x80
    3e1e:	0249      	lsls	r1, r1, #9
    3e20:	4689      	mov	r9, r1
    3e22:	44ca      	add	sl, r9
    3e24:	4651      	mov	r1, sl
    3e26:	9103      	str	r1, [sp, #12]
    3e28:	0c29      	lsrs	r1, r5, #16
    3e2a:	9104      	str	r1, [sp, #16]
    3e2c:	4641      	mov	r1, r8
    3e2e:	0409      	lsls	r1, r1, #16
    3e30:	042d      	lsls	r5, r5, #16
    3e32:	0c09      	lsrs	r1, r1, #16
    3e34:	4688      	mov	r8, r1
    3e36:	0029      	movs	r1, r5
    3e38:	0c25      	lsrs	r5, r4, #16
    3e3a:	0424      	lsls	r4, r4, #16
    3e3c:	4441      	add	r1, r8
    3e3e:	0c24      	lsrs	r4, r4, #16
    3e40:	9105      	str	r1, [sp, #20]
    3e42:	0021      	movs	r1, r4
    3e44:	4341      	muls	r1, r0
    3e46:	4688      	mov	r8, r1
    3e48:	0021      	movs	r1, r4
    3e4a:	4379      	muls	r1, r7
    3e4c:	468a      	mov	sl, r1
    3e4e:	4368      	muls	r0, r5
    3e50:	4641      	mov	r1, r8
    3e52:	4450      	add	r0, sl
    3e54:	4681      	mov	r9, r0
    3e56:	0c08      	lsrs	r0, r1, #16
    3e58:	4448      	add	r0, r9
    3e5a:	436f      	muls	r7, r5
    3e5c:	4582      	cmp	sl, r0
    3e5e:	d903      	bls.n	3e68 <__aeabi_dmul+0x278>
    3e60:	2180      	movs	r1, #128	; 0x80
    3e62:	0249      	lsls	r1, r1, #9
    3e64:	4689      	mov	r9, r1
    3e66:	444f      	add	r7, r9
    3e68:	0c01      	lsrs	r1, r0, #16
    3e6a:	4689      	mov	r9, r1
    3e6c:	0039      	movs	r1, r7
    3e6e:	4449      	add	r1, r9
    3e70:	9102      	str	r1, [sp, #8]
    3e72:	4641      	mov	r1, r8
    3e74:	040f      	lsls	r7, r1, #16
    3e76:	9904      	ldr	r1, [sp, #16]
    3e78:	0c3f      	lsrs	r7, r7, #16
    3e7a:	4688      	mov	r8, r1
    3e7c:	0400      	lsls	r0, r0, #16
    3e7e:	19c0      	adds	r0, r0, r7
    3e80:	4480      	add	r8, r0
    3e82:	4641      	mov	r1, r8
    3e84:	9104      	str	r1, [sp, #16]
    3e86:	4659      	mov	r1, fp
    3e88:	0c0f      	lsrs	r7, r1, #16
    3e8a:	0409      	lsls	r1, r1, #16
    3e8c:	0c09      	lsrs	r1, r1, #16
    3e8e:	4688      	mov	r8, r1
    3e90:	4359      	muls	r1, r3
    3e92:	468a      	mov	sl, r1
    3e94:	0039      	movs	r1, r7
    3e96:	4351      	muls	r1, r2
    3e98:	4689      	mov	r9, r1
    3e9a:	4641      	mov	r1, r8
    3e9c:	434a      	muls	r2, r1
    3e9e:	4651      	mov	r1, sl
    3ea0:	0c09      	lsrs	r1, r1, #16
    3ea2:	468b      	mov	fp, r1
    3ea4:	437b      	muls	r3, r7
    3ea6:	18d2      	adds	r2, r2, r3
    3ea8:	445a      	add	r2, fp
    3eaa:	4293      	cmp	r3, r2
    3eac:	d903      	bls.n	3eb6 <__aeabi_dmul+0x2c6>
    3eae:	2380      	movs	r3, #128	; 0x80
    3eb0:	025b      	lsls	r3, r3, #9
    3eb2:	469b      	mov	fp, r3
    3eb4:	44d9      	add	r9, fp
    3eb6:	4651      	mov	r1, sl
    3eb8:	0409      	lsls	r1, r1, #16
    3eba:	0c09      	lsrs	r1, r1, #16
    3ebc:	468a      	mov	sl, r1
    3ebe:	4641      	mov	r1, r8
    3ec0:	4361      	muls	r1, r4
    3ec2:	437c      	muls	r4, r7
    3ec4:	0c13      	lsrs	r3, r2, #16
    3ec6:	0412      	lsls	r2, r2, #16
    3ec8:	444b      	add	r3, r9
    3eca:	4452      	add	r2, sl
    3ecc:	46a1      	mov	r9, r4
    3ece:	468a      	mov	sl, r1
    3ed0:	003c      	movs	r4, r7
    3ed2:	4641      	mov	r1, r8
    3ed4:	436c      	muls	r4, r5
    3ed6:	434d      	muls	r5, r1
    3ed8:	4651      	mov	r1, sl
    3eda:	444d      	add	r5, r9
    3edc:	0c0f      	lsrs	r7, r1, #16
    3ede:	197d      	adds	r5, r7, r5
    3ee0:	45a9      	cmp	r9, r5
    3ee2:	d903      	bls.n	3eec <__aeabi_dmul+0x2fc>
    3ee4:	2180      	movs	r1, #128	; 0x80
    3ee6:	0249      	lsls	r1, r1, #9
    3ee8:	4688      	mov	r8, r1
    3eea:	4444      	add	r4, r8
    3eec:	9f04      	ldr	r7, [sp, #16]
    3eee:	9903      	ldr	r1, [sp, #12]
    3ef0:	46b8      	mov	r8, r7
    3ef2:	4441      	add	r1, r8
    3ef4:	468b      	mov	fp, r1
    3ef6:	4583      	cmp	fp, r0
    3ef8:	4180      	sbcs	r0, r0
    3efa:	4241      	negs	r1, r0
    3efc:	4688      	mov	r8, r1
    3efe:	4651      	mov	r1, sl
    3f00:	0408      	lsls	r0, r1, #16
    3f02:	042f      	lsls	r7, r5, #16
    3f04:	0c00      	lsrs	r0, r0, #16
    3f06:	183f      	adds	r7, r7, r0
    3f08:	4658      	mov	r0, fp
    3f0a:	9902      	ldr	r1, [sp, #8]
    3f0c:	1810      	adds	r0, r2, r0
    3f0e:	4689      	mov	r9, r1
    3f10:	4290      	cmp	r0, r2
    3f12:	4192      	sbcs	r2, r2
    3f14:	444f      	add	r7, r9
    3f16:	46ba      	mov	sl, r7
    3f18:	4252      	negs	r2, r2
    3f1a:	4699      	mov	r9, r3
    3f1c:	4693      	mov	fp, r2
    3f1e:	44c2      	add	sl, r8
    3f20:	44d1      	add	r9, sl
    3f22:	44cb      	add	fp, r9
    3f24:	428f      	cmp	r7, r1
    3f26:	41bf      	sbcs	r7, r7
    3f28:	45c2      	cmp	sl, r8
    3f2a:	4189      	sbcs	r1, r1
    3f2c:	4599      	cmp	r9, r3
    3f2e:	419b      	sbcs	r3, r3
    3f30:	4593      	cmp	fp, r2
    3f32:	4192      	sbcs	r2, r2
    3f34:	427f      	negs	r7, r7
    3f36:	4249      	negs	r1, r1
    3f38:	0c2d      	lsrs	r5, r5, #16
    3f3a:	4252      	negs	r2, r2
    3f3c:	430f      	orrs	r7, r1
    3f3e:	425b      	negs	r3, r3
    3f40:	4313      	orrs	r3, r2
    3f42:	197f      	adds	r7, r7, r5
    3f44:	18ff      	adds	r7, r7, r3
    3f46:	465b      	mov	r3, fp
    3f48:	193c      	adds	r4, r7, r4
    3f4a:	0ddb      	lsrs	r3, r3, #23
    3f4c:	9a05      	ldr	r2, [sp, #20]
    3f4e:	0264      	lsls	r4, r4, #9
    3f50:	431c      	orrs	r4, r3
    3f52:	0243      	lsls	r3, r0, #9
    3f54:	4313      	orrs	r3, r2
    3f56:	1e5d      	subs	r5, r3, #1
    3f58:	41ab      	sbcs	r3, r5
    3f5a:	465a      	mov	r2, fp
    3f5c:	0dc0      	lsrs	r0, r0, #23
    3f5e:	4303      	orrs	r3, r0
    3f60:	0252      	lsls	r2, r2, #9
    3f62:	4313      	orrs	r3, r2
    3f64:	01e2      	lsls	r2, r4, #7
    3f66:	d556      	bpl.n	4016 <__aeabi_dmul+0x426>
    3f68:	2001      	movs	r0, #1
    3f6a:	085a      	lsrs	r2, r3, #1
    3f6c:	4003      	ands	r3, r0
    3f6e:	4313      	orrs	r3, r2
    3f70:	07e2      	lsls	r2, r4, #31
    3f72:	4313      	orrs	r3, r2
    3f74:	0864      	lsrs	r4, r4, #1
    3f76:	485a      	ldr	r0, [pc, #360]	; (40e0 <__aeabi_dmul+0x4f0>)
    3f78:	4460      	add	r0, ip
    3f7a:	2800      	cmp	r0, #0
    3f7c:	dd4d      	ble.n	401a <__aeabi_dmul+0x42a>
    3f7e:	075a      	lsls	r2, r3, #29
    3f80:	d009      	beq.n	3f96 <__aeabi_dmul+0x3a6>
    3f82:	220f      	movs	r2, #15
    3f84:	401a      	ands	r2, r3
    3f86:	2a04      	cmp	r2, #4
    3f88:	d005      	beq.n	3f96 <__aeabi_dmul+0x3a6>
    3f8a:	1d1a      	adds	r2, r3, #4
    3f8c:	429a      	cmp	r2, r3
    3f8e:	419b      	sbcs	r3, r3
    3f90:	425b      	negs	r3, r3
    3f92:	18e4      	adds	r4, r4, r3
    3f94:	0013      	movs	r3, r2
    3f96:	01e2      	lsls	r2, r4, #7
    3f98:	d504      	bpl.n	3fa4 <__aeabi_dmul+0x3b4>
    3f9a:	2080      	movs	r0, #128	; 0x80
    3f9c:	4a51      	ldr	r2, [pc, #324]	; (40e4 <__aeabi_dmul+0x4f4>)
    3f9e:	00c0      	lsls	r0, r0, #3
    3fa0:	4014      	ands	r4, r2
    3fa2:	4460      	add	r0, ip
    3fa4:	4a50      	ldr	r2, [pc, #320]	; (40e8 <__aeabi_dmul+0x4f8>)
    3fa6:	4290      	cmp	r0, r2
    3fa8:	dd00      	ble.n	3fac <__aeabi_dmul+0x3bc>
    3faa:	e6e3      	b.n	3d74 <__aeabi_dmul+0x184>
    3fac:	2501      	movs	r5, #1
    3fae:	08db      	lsrs	r3, r3, #3
    3fb0:	0762      	lsls	r2, r4, #29
    3fb2:	431a      	orrs	r2, r3
    3fb4:	0264      	lsls	r4, r4, #9
    3fb6:	9b01      	ldr	r3, [sp, #4]
    3fb8:	4691      	mov	r9, r2
    3fba:	0b22      	lsrs	r2, r4, #12
    3fbc:	0544      	lsls	r4, r0, #21
    3fbe:	0d64      	lsrs	r4, r4, #21
    3fc0:	401d      	ands	r5, r3
    3fc2:	e67c      	b.n	3cbe <__aeabi_dmul+0xce>
    3fc4:	2280      	movs	r2, #128	; 0x80
    3fc6:	4659      	mov	r1, fp
    3fc8:	0312      	lsls	r2, r2, #12
    3fca:	4211      	tst	r1, r2
    3fcc:	d008      	beq.n	3fe0 <__aeabi_dmul+0x3f0>
    3fce:	4214      	tst	r4, r2
    3fd0:	d106      	bne.n	3fe0 <__aeabi_dmul+0x3f0>
    3fd2:	4322      	orrs	r2, r4
    3fd4:	0312      	lsls	r2, r2, #12
    3fd6:	0b12      	lsrs	r2, r2, #12
    3fd8:	4645      	mov	r5, r8
    3fda:	4699      	mov	r9, r3
    3fdc:	4c43      	ldr	r4, [pc, #268]	; (40ec <__aeabi_dmul+0x4fc>)
    3fde:	e66e      	b.n	3cbe <__aeabi_dmul+0xce>
    3fe0:	465b      	mov	r3, fp
    3fe2:	431a      	orrs	r2, r3
    3fe4:	0312      	lsls	r2, r2, #12
    3fe6:	0b12      	lsrs	r2, r2, #12
    3fe8:	4c40      	ldr	r4, [pc, #256]	; (40ec <__aeabi_dmul+0x4fc>)
    3fea:	e668      	b.n	3cbe <__aeabi_dmul+0xce>
    3fec:	0003      	movs	r3, r0
    3fee:	4654      	mov	r4, sl
    3ff0:	3b28      	subs	r3, #40	; 0x28
    3ff2:	409c      	lsls	r4, r3
    3ff4:	2300      	movs	r3, #0
    3ff6:	e6b9      	b.n	3d6c <__aeabi_dmul+0x17c>
    3ff8:	f000 fc8c 	bl	4914 <__clzsi2>
    3ffc:	3020      	adds	r0, #32
    3ffe:	e6a6      	b.n	3d4e <__aeabi_dmul+0x15e>
    4000:	0003      	movs	r3, r0
    4002:	3b28      	subs	r3, #40	; 0x28
    4004:	409f      	lsls	r7, r3
    4006:	2300      	movs	r3, #0
    4008:	46bb      	mov	fp, r7
    400a:	4699      	mov	r9, r3
    400c:	e68a      	b.n	3d24 <__aeabi_dmul+0x134>
    400e:	f000 fc81 	bl	4914 <__clzsi2>
    4012:	3020      	adds	r0, #32
    4014:	e674      	b.n	3d00 <__aeabi_dmul+0x110>
    4016:	46b4      	mov	ip, r6
    4018:	e7ad      	b.n	3f76 <__aeabi_dmul+0x386>
    401a:	2501      	movs	r5, #1
    401c:	1a2a      	subs	r2, r5, r0
    401e:	2a38      	cmp	r2, #56	; 0x38
    4020:	dd06      	ble.n	4030 <__aeabi_dmul+0x440>
    4022:	9b01      	ldr	r3, [sp, #4]
    4024:	2400      	movs	r4, #0
    4026:	401d      	ands	r5, r3
    4028:	2300      	movs	r3, #0
    402a:	2200      	movs	r2, #0
    402c:	4699      	mov	r9, r3
    402e:	e646      	b.n	3cbe <__aeabi_dmul+0xce>
    4030:	2a1f      	cmp	r2, #31
    4032:	dc21      	bgt.n	4078 <__aeabi_dmul+0x488>
    4034:	2520      	movs	r5, #32
    4036:	0020      	movs	r0, r4
    4038:	1aad      	subs	r5, r5, r2
    403a:	001e      	movs	r6, r3
    403c:	40ab      	lsls	r3, r5
    403e:	40a8      	lsls	r0, r5
    4040:	40d6      	lsrs	r6, r2
    4042:	1e5d      	subs	r5, r3, #1
    4044:	41ab      	sbcs	r3, r5
    4046:	4330      	orrs	r0, r6
    4048:	4318      	orrs	r0, r3
    404a:	40d4      	lsrs	r4, r2
    404c:	0743      	lsls	r3, r0, #29
    404e:	d009      	beq.n	4064 <__aeabi_dmul+0x474>
    4050:	230f      	movs	r3, #15
    4052:	4003      	ands	r3, r0
    4054:	2b04      	cmp	r3, #4
    4056:	d005      	beq.n	4064 <__aeabi_dmul+0x474>
    4058:	0003      	movs	r3, r0
    405a:	1d18      	adds	r0, r3, #4
    405c:	4298      	cmp	r0, r3
    405e:	419b      	sbcs	r3, r3
    4060:	425b      	negs	r3, r3
    4062:	18e4      	adds	r4, r4, r3
    4064:	0223      	lsls	r3, r4, #8
    4066:	d521      	bpl.n	40ac <__aeabi_dmul+0x4bc>
    4068:	2501      	movs	r5, #1
    406a:	9b01      	ldr	r3, [sp, #4]
    406c:	2401      	movs	r4, #1
    406e:	401d      	ands	r5, r3
    4070:	2300      	movs	r3, #0
    4072:	2200      	movs	r2, #0
    4074:	4699      	mov	r9, r3
    4076:	e622      	b.n	3cbe <__aeabi_dmul+0xce>
    4078:	251f      	movs	r5, #31
    407a:	0021      	movs	r1, r4
    407c:	426d      	negs	r5, r5
    407e:	1a28      	subs	r0, r5, r0
    4080:	40c1      	lsrs	r1, r0
    4082:	0008      	movs	r0, r1
    4084:	2a20      	cmp	r2, #32
    4086:	d01d      	beq.n	40c4 <__aeabi_dmul+0x4d4>
    4088:	355f      	adds	r5, #95	; 0x5f
    408a:	1aaa      	subs	r2, r5, r2
    408c:	4094      	lsls	r4, r2
    408e:	4323      	orrs	r3, r4
    4090:	1e5c      	subs	r4, r3, #1
    4092:	41a3      	sbcs	r3, r4
    4094:	2507      	movs	r5, #7
    4096:	4303      	orrs	r3, r0
    4098:	401d      	ands	r5, r3
    409a:	2200      	movs	r2, #0
    409c:	2d00      	cmp	r5, #0
    409e:	d009      	beq.n	40b4 <__aeabi_dmul+0x4c4>
    40a0:	220f      	movs	r2, #15
    40a2:	2400      	movs	r4, #0
    40a4:	401a      	ands	r2, r3
    40a6:	0018      	movs	r0, r3
    40a8:	2a04      	cmp	r2, #4
    40aa:	d1d6      	bne.n	405a <__aeabi_dmul+0x46a>
    40ac:	0003      	movs	r3, r0
    40ae:	0765      	lsls	r5, r4, #29
    40b0:	0264      	lsls	r4, r4, #9
    40b2:	0b22      	lsrs	r2, r4, #12
    40b4:	08db      	lsrs	r3, r3, #3
    40b6:	432b      	orrs	r3, r5
    40b8:	2501      	movs	r5, #1
    40ba:	4699      	mov	r9, r3
    40bc:	9b01      	ldr	r3, [sp, #4]
    40be:	2400      	movs	r4, #0
    40c0:	401d      	ands	r5, r3
    40c2:	e5fc      	b.n	3cbe <__aeabi_dmul+0xce>
    40c4:	2400      	movs	r4, #0
    40c6:	e7e2      	b.n	408e <__aeabi_dmul+0x49e>
    40c8:	2280      	movs	r2, #128	; 0x80
    40ca:	2501      	movs	r5, #1
    40cc:	0312      	lsls	r2, r2, #12
    40ce:	4322      	orrs	r2, r4
    40d0:	9901      	ldr	r1, [sp, #4]
    40d2:	0312      	lsls	r2, r2, #12
    40d4:	0b12      	lsrs	r2, r2, #12
    40d6:	400d      	ands	r5, r1
    40d8:	4699      	mov	r9, r3
    40da:	4c04      	ldr	r4, [pc, #16]	; (40ec <__aeabi_dmul+0x4fc>)
    40dc:	e5ef      	b.n	3cbe <__aeabi_dmul+0xce>
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	000003ff 	.word	0x000003ff
    40e4:	feffffff 	.word	0xfeffffff
    40e8:	000007fe 	.word	0x000007fe
    40ec:	000007ff 	.word	0x000007ff

000040f0 <__aeabi_dsub>:
    40f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    40f2:	4646      	mov	r6, r8
    40f4:	46d6      	mov	lr, sl
    40f6:	464f      	mov	r7, r9
    40f8:	030c      	lsls	r4, r1, #12
    40fa:	b5c0      	push	{r6, r7, lr}
    40fc:	0fcd      	lsrs	r5, r1, #31
    40fe:	004e      	lsls	r6, r1, #1
    4100:	0a61      	lsrs	r1, r4, #9
    4102:	0f44      	lsrs	r4, r0, #29
    4104:	430c      	orrs	r4, r1
    4106:	00c1      	lsls	r1, r0, #3
    4108:	0058      	lsls	r0, r3, #1
    410a:	0d40      	lsrs	r0, r0, #21
    410c:	4684      	mov	ip, r0
    410e:	468a      	mov	sl, r1
    4110:	000f      	movs	r7, r1
    4112:	0319      	lsls	r1, r3, #12
    4114:	0f50      	lsrs	r0, r2, #29
    4116:	0a49      	lsrs	r1, r1, #9
    4118:	4301      	orrs	r1, r0
    411a:	48c6      	ldr	r0, [pc, #792]	; (4434 <__aeabi_dsub+0x344>)
    411c:	0d76      	lsrs	r6, r6, #21
    411e:	46a8      	mov	r8, r5
    4120:	0fdb      	lsrs	r3, r3, #31
    4122:	00d2      	lsls	r2, r2, #3
    4124:	4584      	cmp	ip, r0
    4126:	d100      	bne.n	412a <__aeabi_dsub+0x3a>
    4128:	e0d8      	b.n	42dc <__aeabi_dsub+0x1ec>
    412a:	2001      	movs	r0, #1
    412c:	4043      	eors	r3, r0
    412e:	42ab      	cmp	r3, r5
    4130:	d100      	bne.n	4134 <__aeabi_dsub+0x44>
    4132:	e0a6      	b.n	4282 <__aeabi_dsub+0x192>
    4134:	4660      	mov	r0, ip
    4136:	1a35      	subs	r5, r6, r0
    4138:	2d00      	cmp	r5, #0
    413a:	dc00      	bgt.n	413e <__aeabi_dsub+0x4e>
    413c:	e105      	b.n	434a <__aeabi_dsub+0x25a>
    413e:	2800      	cmp	r0, #0
    4140:	d110      	bne.n	4164 <__aeabi_dsub+0x74>
    4142:	000b      	movs	r3, r1
    4144:	4313      	orrs	r3, r2
    4146:	d100      	bne.n	414a <__aeabi_dsub+0x5a>
    4148:	e0d7      	b.n	42fa <__aeabi_dsub+0x20a>
    414a:	1e6b      	subs	r3, r5, #1
    414c:	2b00      	cmp	r3, #0
    414e:	d000      	beq.n	4152 <__aeabi_dsub+0x62>
    4150:	e14b      	b.n	43ea <__aeabi_dsub+0x2fa>
    4152:	4653      	mov	r3, sl
    4154:	1a9f      	subs	r7, r3, r2
    4156:	45ba      	cmp	sl, r7
    4158:	4180      	sbcs	r0, r0
    415a:	1a64      	subs	r4, r4, r1
    415c:	4240      	negs	r0, r0
    415e:	1a24      	subs	r4, r4, r0
    4160:	2601      	movs	r6, #1
    4162:	e01e      	b.n	41a2 <__aeabi_dsub+0xb2>
    4164:	4bb3      	ldr	r3, [pc, #716]	; (4434 <__aeabi_dsub+0x344>)
    4166:	429e      	cmp	r6, r3
    4168:	d048      	beq.n	41fc <__aeabi_dsub+0x10c>
    416a:	2380      	movs	r3, #128	; 0x80
    416c:	041b      	lsls	r3, r3, #16
    416e:	4319      	orrs	r1, r3
    4170:	2d38      	cmp	r5, #56	; 0x38
    4172:	dd00      	ble.n	4176 <__aeabi_dsub+0x86>
    4174:	e119      	b.n	43aa <__aeabi_dsub+0x2ba>
    4176:	2d1f      	cmp	r5, #31
    4178:	dd00      	ble.n	417c <__aeabi_dsub+0x8c>
    417a:	e14c      	b.n	4416 <__aeabi_dsub+0x326>
    417c:	2320      	movs	r3, #32
    417e:	000f      	movs	r7, r1
    4180:	1b5b      	subs	r3, r3, r5
    4182:	0010      	movs	r0, r2
    4184:	409a      	lsls	r2, r3
    4186:	409f      	lsls	r7, r3
    4188:	40e8      	lsrs	r0, r5
    418a:	1e53      	subs	r3, r2, #1
    418c:	419a      	sbcs	r2, r3
    418e:	40e9      	lsrs	r1, r5
    4190:	4307      	orrs	r7, r0
    4192:	4317      	orrs	r7, r2
    4194:	4653      	mov	r3, sl
    4196:	1bdf      	subs	r7, r3, r7
    4198:	1a61      	subs	r1, r4, r1
    419a:	45ba      	cmp	sl, r7
    419c:	41a4      	sbcs	r4, r4
    419e:	4264      	negs	r4, r4
    41a0:	1b0c      	subs	r4, r1, r4
    41a2:	0223      	lsls	r3, r4, #8
    41a4:	d400      	bmi.n	41a8 <__aeabi_dsub+0xb8>
    41a6:	e0c5      	b.n	4334 <__aeabi_dsub+0x244>
    41a8:	0264      	lsls	r4, r4, #9
    41aa:	0a65      	lsrs	r5, r4, #9
    41ac:	2d00      	cmp	r5, #0
    41ae:	d100      	bne.n	41b2 <__aeabi_dsub+0xc2>
    41b0:	e0f6      	b.n	43a0 <__aeabi_dsub+0x2b0>
    41b2:	0028      	movs	r0, r5
    41b4:	f000 fbae 	bl	4914 <__clzsi2>
    41b8:	0003      	movs	r3, r0
    41ba:	3b08      	subs	r3, #8
    41bc:	2b1f      	cmp	r3, #31
    41be:	dd00      	ble.n	41c2 <__aeabi_dsub+0xd2>
    41c0:	e0e9      	b.n	4396 <__aeabi_dsub+0x2a6>
    41c2:	2220      	movs	r2, #32
    41c4:	003c      	movs	r4, r7
    41c6:	1ad2      	subs	r2, r2, r3
    41c8:	409d      	lsls	r5, r3
    41ca:	40d4      	lsrs	r4, r2
    41cc:	409f      	lsls	r7, r3
    41ce:	4325      	orrs	r5, r4
    41d0:	429e      	cmp	r6, r3
    41d2:	dd00      	ble.n	41d6 <__aeabi_dsub+0xe6>
    41d4:	e0db      	b.n	438e <__aeabi_dsub+0x29e>
    41d6:	1b9e      	subs	r6, r3, r6
    41d8:	1c73      	adds	r3, r6, #1
    41da:	2b1f      	cmp	r3, #31
    41dc:	dd00      	ble.n	41e0 <__aeabi_dsub+0xf0>
    41de:	e10a      	b.n	43f6 <__aeabi_dsub+0x306>
    41e0:	2220      	movs	r2, #32
    41e2:	0038      	movs	r0, r7
    41e4:	1ad2      	subs	r2, r2, r3
    41e6:	0029      	movs	r1, r5
    41e8:	4097      	lsls	r7, r2
    41ea:	002c      	movs	r4, r5
    41ec:	4091      	lsls	r1, r2
    41ee:	40d8      	lsrs	r0, r3
    41f0:	1e7a      	subs	r2, r7, #1
    41f2:	4197      	sbcs	r7, r2
    41f4:	40dc      	lsrs	r4, r3
    41f6:	2600      	movs	r6, #0
    41f8:	4301      	orrs	r1, r0
    41fa:	430f      	orrs	r7, r1
    41fc:	077b      	lsls	r3, r7, #29
    41fe:	d009      	beq.n	4214 <__aeabi_dsub+0x124>
    4200:	230f      	movs	r3, #15
    4202:	403b      	ands	r3, r7
    4204:	2b04      	cmp	r3, #4
    4206:	d005      	beq.n	4214 <__aeabi_dsub+0x124>
    4208:	1d3b      	adds	r3, r7, #4
    420a:	42bb      	cmp	r3, r7
    420c:	41bf      	sbcs	r7, r7
    420e:	427f      	negs	r7, r7
    4210:	19e4      	adds	r4, r4, r7
    4212:	001f      	movs	r7, r3
    4214:	0223      	lsls	r3, r4, #8
    4216:	d525      	bpl.n	4264 <__aeabi_dsub+0x174>
    4218:	4b86      	ldr	r3, [pc, #536]	; (4434 <__aeabi_dsub+0x344>)
    421a:	3601      	adds	r6, #1
    421c:	429e      	cmp	r6, r3
    421e:	d100      	bne.n	4222 <__aeabi_dsub+0x132>
    4220:	e0af      	b.n	4382 <__aeabi_dsub+0x292>
    4222:	4b85      	ldr	r3, [pc, #532]	; (4438 <__aeabi_dsub+0x348>)
    4224:	2501      	movs	r5, #1
    4226:	401c      	ands	r4, r3
    4228:	4643      	mov	r3, r8
    422a:	0762      	lsls	r2, r4, #29
    422c:	08ff      	lsrs	r7, r7, #3
    422e:	0264      	lsls	r4, r4, #9
    4230:	0576      	lsls	r6, r6, #21
    4232:	4317      	orrs	r7, r2
    4234:	0b24      	lsrs	r4, r4, #12
    4236:	0d76      	lsrs	r6, r6, #21
    4238:	401d      	ands	r5, r3
    423a:	2100      	movs	r1, #0
    423c:	0324      	lsls	r4, r4, #12
    423e:	0b23      	lsrs	r3, r4, #12
    4240:	0d0c      	lsrs	r4, r1, #20
    4242:	4a7e      	ldr	r2, [pc, #504]	; (443c <__aeabi_dsub+0x34c>)
    4244:	0524      	lsls	r4, r4, #20
    4246:	431c      	orrs	r4, r3
    4248:	4014      	ands	r4, r2
    424a:	0533      	lsls	r3, r6, #20
    424c:	4323      	orrs	r3, r4
    424e:	005b      	lsls	r3, r3, #1
    4250:	07ed      	lsls	r5, r5, #31
    4252:	085b      	lsrs	r3, r3, #1
    4254:	432b      	orrs	r3, r5
    4256:	0038      	movs	r0, r7
    4258:	0019      	movs	r1, r3
    425a:	bc1c      	pop	{r2, r3, r4}
    425c:	4690      	mov	r8, r2
    425e:	4699      	mov	r9, r3
    4260:	46a2      	mov	sl, r4
    4262:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4264:	2501      	movs	r5, #1
    4266:	4643      	mov	r3, r8
    4268:	0762      	lsls	r2, r4, #29
    426a:	08ff      	lsrs	r7, r7, #3
    426c:	4317      	orrs	r7, r2
    426e:	08e4      	lsrs	r4, r4, #3
    4270:	401d      	ands	r5, r3
    4272:	4b70      	ldr	r3, [pc, #448]	; (4434 <__aeabi_dsub+0x344>)
    4274:	429e      	cmp	r6, r3
    4276:	d036      	beq.n	42e6 <__aeabi_dsub+0x1f6>
    4278:	0324      	lsls	r4, r4, #12
    427a:	0576      	lsls	r6, r6, #21
    427c:	0b24      	lsrs	r4, r4, #12
    427e:	0d76      	lsrs	r6, r6, #21
    4280:	e7db      	b.n	423a <__aeabi_dsub+0x14a>
    4282:	4663      	mov	r3, ip
    4284:	1af3      	subs	r3, r6, r3
    4286:	2b00      	cmp	r3, #0
    4288:	dc00      	bgt.n	428c <__aeabi_dsub+0x19c>
    428a:	e094      	b.n	43b6 <__aeabi_dsub+0x2c6>
    428c:	4660      	mov	r0, ip
    428e:	2800      	cmp	r0, #0
    4290:	d035      	beq.n	42fe <__aeabi_dsub+0x20e>
    4292:	4868      	ldr	r0, [pc, #416]	; (4434 <__aeabi_dsub+0x344>)
    4294:	4286      	cmp	r6, r0
    4296:	d0b1      	beq.n	41fc <__aeabi_dsub+0x10c>
    4298:	2780      	movs	r7, #128	; 0x80
    429a:	043f      	lsls	r7, r7, #16
    429c:	4339      	orrs	r1, r7
    429e:	2b38      	cmp	r3, #56	; 0x38
    42a0:	dc00      	bgt.n	42a4 <__aeabi_dsub+0x1b4>
    42a2:	e0fd      	b.n	44a0 <__aeabi_dsub+0x3b0>
    42a4:	430a      	orrs	r2, r1
    42a6:	0017      	movs	r7, r2
    42a8:	2100      	movs	r1, #0
    42aa:	1e7a      	subs	r2, r7, #1
    42ac:	4197      	sbcs	r7, r2
    42ae:	4457      	add	r7, sl
    42b0:	4557      	cmp	r7, sl
    42b2:	4180      	sbcs	r0, r0
    42b4:	1909      	adds	r1, r1, r4
    42b6:	4244      	negs	r4, r0
    42b8:	190c      	adds	r4, r1, r4
    42ba:	0223      	lsls	r3, r4, #8
    42bc:	d53a      	bpl.n	4334 <__aeabi_dsub+0x244>
    42be:	4b5d      	ldr	r3, [pc, #372]	; (4434 <__aeabi_dsub+0x344>)
    42c0:	3601      	adds	r6, #1
    42c2:	429e      	cmp	r6, r3
    42c4:	d100      	bne.n	42c8 <__aeabi_dsub+0x1d8>
    42c6:	e14b      	b.n	4560 <__aeabi_dsub+0x470>
    42c8:	2201      	movs	r2, #1
    42ca:	4b5b      	ldr	r3, [pc, #364]	; (4438 <__aeabi_dsub+0x348>)
    42cc:	401c      	ands	r4, r3
    42ce:	087b      	lsrs	r3, r7, #1
    42d0:	4017      	ands	r7, r2
    42d2:	431f      	orrs	r7, r3
    42d4:	07e2      	lsls	r2, r4, #31
    42d6:	4317      	orrs	r7, r2
    42d8:	0864      	lsrs	r4, r4, #1
    42da:	e78f      	b.n	41fc <__aeabi_dsub+0x10c>
    42dc:	0008      	movs	r0, r1
    42de:	4310      	orrs	r0, r2
    42e0:	d000      	beq.n	42e4 <__aeabi_dsub+0x1f4>
    42e2:	e724      	b.n	412e <__aeabi_dsub+0x3e>
    42e4:	e721      	b.n	412a <__aeabi_dsub+0x3a>
    42e6:	0023      	movs	r3, r4
    42e8:	433b      	orrs	r3, r7
    42ea:	d100      	bne.n	42ee <__aeabi_dsub+0x1fe>
    42ec:	e1b9      	b.n	4662 <__aeabi_dsub+0x572>
    42ee:	2280      	movs	r2, #128	; 0x80
    42f0:	0312      	lsls	r2, r2, #12
    42f2:	4314      	orrs	r4, r2
    42f4:	0324      	lsls	r4, r4, #12
    42f6:	0b24      	lsrs	r4, r4, #12
    42f8:	e79f      	b.n	423a <__aeabi_dsub+0x14a>
    42fa:	002e      	movs	r6, r5
    42fc:	e77e      	b.n	41fc <__aeabi_dsub+0x10c>
    42fe:	0008      	movs	r0, r1
    4300:	4310      	orrs	r0, r2
    4302:	d100      	bne.n	4306 <__aeabi_dsub+0x216>
    4304:	e0ca      	b.n	449c <__aeabi_dsub+0x3ac>
    4306:	1e58      	subs	r0, r3, #1
    4308:	4684      	mov	ip, r0
    430a:	2800      	cmp	r0, #0
    430c:	d000      	beq.n	4310 <__aeabi_dsub+0x220>
    430e:	e0e7      	b.n	44e0 <__aeabi_dsub+0x3f0>
    4310:	4452      	add	r2, sl
    4312:	4552      	cmp	r2, sl
    4314:	4180      	sbcs	r0, r0
    4316:	1864      	adds	r4, r4, r1
    4318:	4240      	negs	r0, r0
    431a:	1824      	adds	r4, r4, r0
    431c:	0017      	movs	r7, r2
    431e:	2601      	movs	r6, #1
    4320:	0223      	lsls	r3, r4, #8
    4322:	d507      	bpl.n	4334 <__aeabi_dsub+0x244>
    4324:	2602      	movs	r6, #2
    4326:	e7cf      	b.n	42c8 <__aeabi_dsub+0x1d8>
    4328:	4664      	mov	r4, ip
    432a:	432c      	orrs	r4, r5
    432c:	d100      	bne.n	4330 <__aeabi_dsub+0x240>
    432e:	e1b3      	b.n	4698 <__aeabi_dsub+0x5a8>
    4330:	002c      	movs	r4, r5
    4332:	4667      	mov	r7, ip
    4334:	077b      	lsls	r3, r7, #29
    4336:	d000      	beq.n	433a <__aeabi_dsub+0x24a>
    4338:	e762      	b.n	4200 <__aeabi_dsub+0x110>
    433a:	0763      	lsls	r3, r4, #29
    433c:	08ff      	lsrs	r7, r7, #3
    433e:	431f      	orrs	r7, r3
    4340:	2501      	movs	r5, #1
    4342:	4643      	mov	r3, r8
    4344:	08e4      	lsrs	r4, r4, #3
    4346:	401d      	ands	r5, r3
    4348:	e793      	b.n	4272 <__aeabi_dsub+0x182>
    434a:	2d00      	cmp	r5, #0
    434c:	d178      	bne.n	4440 <__aeabi_dsub+0x350>
    434e:	1c75      	adds	r5, r6, #1
    4350:	056d      	lsls	r5, r5, #21
    4352:	0d6d      	lsrs	r5, r5, #21
    4354:	2d01      	cmp	r5, #1
    4356:	dc00      	bgt.n	435a <__aeabi_dsub+0x26a>
    4358:	e0f2      	b.n	4540 <__aeabi_dsub+0x450>
    435a:	4650      	mov	r0, sl
    435c:	1a80      	subs	r0, r0, r2
    435e:	4582      	cmp	sl, r0
    4360:	41bf      	sbcs	r7, r7
    4362:	1a65      	subs	r5, r4, r1
    4364:	427f      	negs	r7, r7
    4366:	1bed      	subs	r5, r5, r7
    4368:	4684      	mov	ip, r0
    436a:	0228      	lsls	r0, r5, #8
    436c:	d400      	bmi.n	4370 <__aeabi_dsub+0x280>
    436e:	e08c      	b.n	448a <__aeabi_dsub+0x39a>
    4370:	4650      	mov	r0, sl
    4372:	1a17      	subs	r7, r2, r0
    4374:	42ba      	cmp	r2, r7
    4376:	4192      	sbcs	r2, r2
    4378:	1b0c      	subs	r4, r1, r4
    437a:	4255      	negs	r5, r2
    437c:	1b65      	subs	r5, r4, r5
    437e:	4698      	mov	r8, r3
    4380:	e714      	b.n	41ac <__aeabi_dsub+0xbc>
    4382:	2501      	movs	r5, #1
    4384:	4643      	mov	r3, r8
    4386:	2400      	movs	r4, #0
    4388:	401d      	ands	r5, r3
    438a:	2700      	movs	r7, #0
    438c:	e755      	b.n	423a <__aeabi_dsub+0x14a>
    438e:	4c2a      	ldr	r4, [pc, #168]	; (4438 <__aeabi_dsub+0x348>)
    4390:	1af6      	subs	r6, r6, r3
    4392:	402c      	ands	r4, r5
    4394:	e732      	b.n	41fc <__aeabi_dsub+0x10c>
    4396:	003d      	movs	r5, r7
    4398:	3828      	subs	r0, #40	; 0x28
    439a:	4085      	lsls	r5, r0
    439c:	2700      	movs	r7, #0
    439e:	e717      	b.n	41d0 <__aeabi_dsub+0xe0>
    43a0:	0038      	movs	r0, r7
    43a2:	f000 fab7 	bl	4914 <__clzsi2>
    43a6:	3020      	adds	r0, #32
    43a8:	e706      	b.n	41b8 <__aeabi_dsub+0xc8>
    43aa:	430a      	orrs	r2, r1
    43ac:	0017      	movs	r7, r2
    43ae:	2100      	movs	r1, #0
    43b0:	1e7a      	subs	r2, r7, #1
    43b2:	4197      	sbcs	r7, r2
    43b4:	e6ee      	b.n	4194 <__aeabi_dsub+0xa4>
    43b6:	2b00      	cmp	r3, #0
    43b8:	d000      	beq.n	43bc <__aeabi_dsub+0x2cc>
    43ba:	e0e5      	b.n	4588 <__aeabi_dsub+0x498>
    43bc:	1c73      	adds	r3, r6, #1
    43be:	469c      	mov	ip, r3
    43c0:	055b      	lsls	r3, r3, #21
    43c2:	0d5b      	lsrs	r3, r3, #21
    43c4:	2b01      	cmp	r3, #1
    43c6:	dc00      	bgt.n	43ca <__aeabi_dsub+0x2da>
    43c8:	e09f      	b.n	450a <__aeabi_dsub+0x41a>
    43ca:	4b1a      	ldr	r3, [pc, #104]	; (4434 <__aeabi_dsub+0x344>)
    43cc:	459c      	cmp	ip, r3
    43ce:	d100      	bne.n	43d2 <__aeabi_dsub+0x2e2>
    43d0:	e0c5      	b.n	455e <__aeabi_dsub+0x46e>
    43d2:	4452      	add	r2, sl
    43d4:	4552      	cmp	r2, sl
    43d6:	4180      	sbcs	r0, r0
    43d8:	1864      	adds	r4, r4, r1
    43da:	4240      	negs	r0, r0
    43dc:	1824      	adds	r4, r4, r0
    43de:	07e7      	lsls	r7, r4, #31
    43e0:	0852      	lsrs	r2, r2, #1
    43e2:	4317      	orrs	r7, r2
    43e4:	0864      	lsrs	r4, r4, #1
    43e6:	4666      	mov	r6, ip
    43e8:	e708      	b.n	41fc <__aeabi_dsub+0x10c>
    43ea:	4812      	ldr	r0, [pc, #72]	; (4434 <__aeabi_dsub+0x344>)
    43ec:	4285      	cmp	r5, r0
    43ee:	d100      	bne.n	43f2 <__aeabi_dsub+0x302>
    43f0:	e085      	b.n	44fe <__aeabi_dsub+0x40e>
    43f2:	001d      	movs	r5, r3
    43f4:	e6bc      	b.n	4170 <__aeabi_dsub+0x80>
    43f6:	0029      	movs	r1, r5
    43f8:	3e1f      	subs	r6, #31
    43fa:	40f1      	lsrs	r1, r6
    43fc:	2b20      	cmp	r3, #32
    43fe:	d100      	bne.n	4402 <__aeabi_dsub+0x312>
    4400:	e07f      	b.n	4502 <__aeabi_dsub+0x412>
    4402:	2240      	movs	r2, #64	; 0x40
    4404:	1ad3      	subs	r3, r2, r3
    4406:	409d      	lsls	r5, r3
    4408:	432f      	orrs	r7, r5
    440a:	1e7d      	subs	r5, r7, #1
    440c:	41af      	sbcs	r7, r5
    440e:	2400      	movs	r4, #0
    4410:	430f      	orrs	r7, r1
    4412:	2600      	movs	r6, #0
    4414:	e78e      	b.n	4334 <__aeabi_dsub+0x244>
    4416:	002b      	movs	r3, r5
    4418:	000f      	movs	r7, r1
    441a:	3b20      	subs	r3, #32
    441c:	40df      	lsrs	r7, r3
    441e:	2d20      	cmp	r5, #32
    4420:	d071      	beq.n	4506 <__aeabi_dsub+0x416>
    4422:	2340      	movs	r3, #64	; 0x40
    4424:	1b5d      	subs	r5, r3, r5
    4426:	40a9      	lsls	r1, r5
    4428:	430a      	orrs	r2, r1
    442a:	1e51      	subs	r1, r2, #1
    442c:	418a      	sbcs	r2, r1
    442e:	2100      	movs	r1, #0
    4430:	4317      	orrs	r7, r2
    4432:	e6af      	b.n	4194 <__aeabi_dsub+0xa4>
    4434:	000007ff 	.word	0x000007ff
    4438:	ff7fffff 	.word	0xff7fffff
    443c:	800fffff 	.word	0x800fffff
    4440:	2e00      	cmp	r6, #0
    4442:	d03e      	beq.n	44c2 <__aeabi_dsub+0x3d2>
    4444:	4eb3      	ldr	r6, [pc, #716]	; (4714 <__aeabi_dsub+0x624>)
    4446:	45b4      	cmp	ip, r6
    4448:	d045      	beq.n	44d6 <__aeabi_dsub+0x3e6>
    444a:	2680      	movs	r6, #128	; 0x80
    444c:	0436      	lsls	r6, r6, #16
    444e:	426d      	negs	r5, r5
    4450:	4334      	orrs	r4, r6
    4452:	2d38      	cmp	r5, #56	; 0x38
    4454:	dd00      	ble.n	4458 <__aeabi_dsub+0x368>
    4456:	e0a8      	b.n	45aa <__aeabi_dsub+0x4ba>
    4458:	2d1f      	cmp	r5, #31
    445a:	dd00      	ble.n	445e <__aeabi_dsub+0x36e>
    445c:	e11f      	b.n	469e <__aeabi_dsub+0x5ae>
    445e:	2620      	movs	r6, #32
    4460:	0027      	movs	r7, r4
    4462:	4650      	mov	r0, sl
    4464:	1b76      	subs	r6, r6, r5
    4466:	40b7      	lsls	r7, r6
    4468:	40e8      	lsrs	r0, r5
    446a:	4307      	orrs	r7, r0
    446c:	4650      	mov	r0, sl
    446e:	40b0      	lsls	r0, r6
    4470:	1e46      	subs	r6, r0, #1
    4472:	41b0      	sbcs	r0, r6
    4474:	40ec      	lsrs	r4, r5
    4476:	4338      	orrs	r0, r7
    4478:	1a17      	subs	r7, r2, r0
    447a:	42ba      	cmp	r2, r7
    447c:	4192      	sbcs	r2, r2
    447e:	1b0c      	subs	r4, r1, r4
    4480:	4252      	negs	r2, r2
    4482:	1aa4      	subs	r4, r4, r2
    4484:	4666      	mov	r6, ip
    4486:	4698      	mov	r8, r3
    4488:	e68b      	b.n	41a2 <__aeabi_dsub+0xb2>
    448a:	4664      	mov	r4, ip
    448c:	4667      	mov	r7, ip
    448e:	432c      	orrs	r4, r5
    4490:	d000      	beq.n	4494 <__aeabi_dsub+0x3a4>
    4492:	e68b      	b.n	41ac <__aeabi_dsub+0xbc>
    4494:	2500      	movs	r5, #0
    4496:	2600      	movs	r6, #0
    4498:	2700      	movs	r7, #0
    449a:	e6ea      	b.n	4272 <__aeabi_dsub+0x182>
    449c:	001e      	movs	r6, r3
    449e:	e6ad      	b.n	41fc <__aeabi_dsub+0x10c>
    44a0:	2b1f      	cmp	r3, #31
    44a2:	dc60      	bgt.n	4566 <__aeabi_dsub+0x476>
    44a4:	2720      	movs	r7, #32
    44a6:	1af8      	subs	r0, r7, r3
    44a8:	000f      	movs	r7, r1
    44aa:	4684      	mov	ip, r0
    44ac:	4087      	lsls	r7, r0
    44ae:	0010      	movs	r0, r2
    44b0:	40d8      	lsrs	r0, r3
    44b2:	4307      	orrs	r7, r0
    44b4:	4660      	mov	r0, ip
    44b6:	4082      	lsls	r2, r0
    44b8:	1e50      	subs	r0, r2, #1
    44ba:	4182      	sbcs	r2, r0
    44bc:	40d9      	lsrs	r1, r3
    44be:	4317      	orrs	r7, r2
    44c0:	e6f5      	b.n	42ae <__aeabi_dsub+0x1be>
    44c2:	0026      	movs	r6, r4
    44c4:	4650      	mov	r0, sl
    44c6:	4306      	orrs	r6, r0
    44c8:	d005      	beq.n	44d6 <__aeabi_dsub+0x3e6>
    44ca:	43ed      	mvns	r5, r5
    44cc:	2d00      	cmp	r5, #0
    44ce:	d0d3      	beq.n	4478 <__aeabi_dsub+0x388>
    44d0:	4e90      	ldr	r6, [pc, #576]	; (4714 <__aeabi_dsub+0x624>)
    44d2:	45b4      	cmp	ip, r6
    44d4:	d1bd      	bne.n	4452 <__aeabi_dsub+0x362>
    44d6:	000c      	movs	r4, r1
    44d8:	0017      	movs	r7, r2
    44da:	4666      	mov	r6, ip
    44dc:	4698      	mov	r8, r3
    44de:	e68d      	b.n	41fc <__aeabi_dsub+0x10c>
    44e0:	488c      	ldr	r0, [pc, #560]	; (4714 <__aeabi_dsub+0x624>)
    44e2:	4283      	cmp	r3, r0
    44e4:	d00b      	beq.n	44fe <__aeabi_dsub+0x40e>
    44e6:	4663      	mov	r3, ip
    44e8:	e6d9      	b.n	429e <__aeabi_dsub+0x1ae>
    44ea:	2d00      	cmp	r5, #0
    44ec:	d000      	beq.n	44f0 <__aeabi_dsub+0x400>
    44ee:	e096      	b.n	461e <__aeabi_dsub+0x52e>
    44f0:	0008      	movs	r0, r1
    44f2:	4310      	orrs	r0, r2
    44f4:	d100      	bne.n	44f8 <__aeabi_dsub+0x408>
    44f6:	e0e2      	b.n	46be <__aeabi_dsub+0x5ce>
    44f8:	000c      	movs	r4, r1
    44fa:	0017      	movs	r7, r2
    44fc:	4698      	mov	r8, r3
    44fe:	4e85      	ldr	r6, [pc, #532]	; (4714 <__aeabi_dsub+0x624>)
    4500:	e67c      	b.n	41fc <__aeabi_dsub+0x10c>
    4502:	2500      	movs	r5, #0
    4504:	e780      	b.n	4408 <__aeabi_dsub+0x318>
    4506:	2100      	movs	r1, #0
    4508:	e78e      	b.n	4428 <__aeabi_dsub+0x338>
    450a:	0023      	movs	r3, r4
    450c:	4650      	mov	r0, sl
    450e:	4303      	orrs	r3, r0
    4510:	2e00      	cmp	r6, #0
    4512:	d000      	beq.n	4516 <__aeabi_dsub+0x426>
    4514:	e0a8      	b.n	4668 <__aeabi_dsub+0x578>
    4516:	2b00      	cmp	r3, #0
    4518:	d100      	bne.n	451c <__aeabi_dsub+0x42c>
    451a:	e0de      	b.n	46da <__aeabi_dsub+0x5ea>
    451c:	000b      	movs	r3, r1
    451e:	4313      	orrs	r3, r2
    4520:	d100      	bne.n	4524 <__aeabi_dsub+0x434>
    4522:	e66b      	b.n	41fc <__aeabi_dsub+0x10c>
    4524:	4452      	add	r2, sl
    4526:	4552      	cmp	r2, sl
    4528:	4180      	sbcs	r0, r0
    452a:	1864      	adds	r4, r4, r1
    452c:	4240      	negs	r0, r0
    452e:	1824      	adds	r4, r4, r0
    4530:	0017      	movs	r7, r2
    4532:	0223      	lsls	r3, r4, #8
    4534:	d400      	bmi.n	4538 <__aeabi_dsub+0x448>
    4536:	e6fd      	b.n	4334 <__aeabi_dsub+0x244>
    4538:	4b77      	ldr	r3, [pc, #476]	; (4718 <__aeabi_dsub+0x628>)
    453a:	4666      	mov	r6, ip
    453c:	401c      	ands	r4, r3
    453e:	e65d      	b.n	41fc <__aeabi_dsub+0x10c>
    4540:	0025      	movs	r5, r4
    4542:	4650      	mov	r0, sl
    4544:	4305      	orrs	r5, r0
    4546:	2e00      	cmp	r6, #0
    4548:	d1cf      	bne.n	44ea <__aeabi_dsub+0x3fa>
    454a:	2d00      	cmp	r5, #0
    454c:	d14f      	bne.n	45ee <__aeabi_dsub+0x4fe>
    454e:	000c      	movs	r4, r1
    4550:	4314      	orrs	r4, r2
    4552:	d100      	bne.n	4556 <__aeabi_dsub+0x466>
    4554:	e0a0      	b.n	4698 <__aeabi_dsub+0x5a8>
    4556:	000c      	movs	r4, r1
    4558:	0017      	movs	r7, r2
    455a:	4698      	mov	r8, r3
    455c:	e64e      	b.n	41fc <__aeabi_dsub+0x10c>
    455e:	4666      	mov	r6, ip
    4560:	2400      	movs	r4, #0
    4562:	2700      	movs	r7, #0
    4564:	e685      	b.n	4272 <__aeabi_dsub+0x182>
    4566:	001f      	movs	r7, r3
    4568:	0008      	movs	r0, r1
    456a:	3f20      	subs	r7, #32
    456c:	40f8      	lsrs	r0, r7
    456e:	0007      	movs	r7, r0
    4570:	2b20      	cmp	r3, #32
    4572:	d100      	bne.n	4576 <__aeabi_dsub+0x486>
    4574:	e08e      	b.n	4694 <__aeabi_dsub+0x5a4>
    4576:	2040      	movs	r0, #64	; 0x40
    4578:	1ac3      	subs	r3, r0, r3
    457a:	4099      	lsls	r1, r3
    457c:	430a      	orrs	r2, r1
    457e:	1e51      	subs	r1, r2, #1
    4580:	418a      	sbcs	r2, r1
    4582:	2100      	movs	r1, #0
    4584:	4317      	orrs	r7, r2
    4586:	e692      	b.n	42ae <__aeabi_dsub+0x1be>
    4588:	2e00      	cmp	r6, #0
    458a:	d114      	bne.n	45b6 <__aeabi_dsub+0x4c6>
    458c:	0026      	movs	r6, r4
    458e:	4650      	mov	r0, sl
    4590:	4306      	orrs	r6, r0
    4592:	d062      	beq.n	465a <__aeabi_dsub+0x56a>
    4594:	43db      	mvns	r3, r3
    4596:	2b00      	cmp	r3, #0
    4598:	d15c      	bne.n	4654 <__aeabi_dsub+0x564>
    459a:	1887      	adds	r7, r0, r2
    459c:	4297      	cmp	r7, r2
    459e:	4192      	sbcs	r2, r2
    45a0:	1864      	adds	r4, r4, r1
    45a2:	4252      	negs	r2, r2
    45a4:	18a4      	adds	r4, r4, r2
    45a6:	4666      	mov	r6, ip
    45a8:	e687      	b.n	42ba <__aeabi_dsub+0x1ca>
    45aa:	4650      	mov	r0, sl
    45ac:	4320      	orrs	r0, r4
    45ae:	1e44      	subs	r4, r0, #1
    45b0:	41a0      	sbcs	r0, r4
    45b2:	2400      	movs	r4, #0
    45b4:	e760      	b.n	4478 <__aeabi_dsub+0x388>
    45b6:	4e57      	ldr	r6, [pc, #348]	; (4714 <__aeabi_dsub+0x624>)
    45b8:	45b4      	cmp	ip, r6
    45ba:	d04e      	beq.n	465a <__aeabi_dsub+0x56a>
    45bc:	2680      	movs	r6, #128	; 0x80
    45be:	0436      	lsls	r6, r6, #16
    45c0:	425b      	negs	r3, r3
    45c2:	4334      	orrs	r4, r6
    45c4:	2b38      	cmp	r3, #56	; 0x38
    45c6:	dd00      	ble.n	45ca <__aeabi_dsub+0x4da>
    45c8:	e07f      	b.n	46ca <__aeabi_dsub+0x5da>
    45ca:	2b1f      	cmp	r3, #31
    45cc:	dd00      	ble.n	45d0 <__aeabi_dsub+0x4e0>
    45ce:	e08b      	b.n	46e8 <__aeabi_dsub+0x5f8>
    45d0:	2620      	movs	r6, #32
    45d2:	0027      	movs	r7, r4
    45d4:	4650      	mov	r0, sl
    45d6:	1af6      	subs	r6, r6, r3
    45d8:	40b7      	lsls	r7, r6
    45da:	40d8      	lsrs	r0, r3
    45dc:	4307      	orrs	r7, r0
    45de:	4650      	mov	r0, sl
    45e0:	40b0      	lsls	r0, r6
    45e2:	1e46      	subs	r6, r0, #1
    45e4:	41b0      	sbcs	r0, r6
    45e6:	4307      	orrs	r7, r0
    45e8:	40dc      	lsrs	r4, r3
    45ea:	18bf      	adds	r7, r7, r2
    45ec:	e7d6      	b.n	459c <__aeabi_dsub+0x4ac>
    45ee:	000d      	movs	r5, r1
    45f0:	4315      	orrs	r5, r2
    45f2:	d100      	bne.n	45f6 <__aeabi_dsub+0x506>
    45f4:	e602      	b.n	41fc <__aeabi_dsub+0x10c>
    45f6:	4650      	mov	r0, sl
    45f8:	1a80      	subs	r0, r0, r2
    45fa:	4582      	cmp	sl, r0
    45fc:	41bf      	sbcs	r7, r7
    45fe:	1a65      	subs	r5, r4, r1
    4600:	427f      	negs	r7, r7
    4602:	1bed      	subs	r5, r5, r7
    4604:	4684      	mov	ip, r0
    4606:	0228      	lsls	r0, r5, #8
    4608:	d400      	bmi.n	460c <__aeabi_dsub+0x51c>
    460a:	e68d      	b.n	4328 <__aeabi_dsub+0x238>
    460c:	4650      	mov	r0, sl
    460e:	1a17      	subs	r7, r2, r0
    4610:	42ba      	cmp	r2, r7
    4612:	4192      	sbcs	r2, r2
    4614:	1b0c      	subs	r4, r1, r4
    4616:	4252      	negs	r2, r2
    4618:	1aa4      	subs	r4, r4, r2
    461a:	4698      	mov	r8, r3
    461c:	e5ee      	b.n	41fc <__aeabi_dsub+0x10c>
    461e:	000d      	movs	r5, r1
    4620:	4315      	orrs	r5, r2
    4622:	d100      	bne.n	4626 <__aeabi_dsub+0x536>
    4624:	e76b      	b.n	44fe <__aeabi_dsub+0x40e>
    4626:	4650      	mov	r0, sl
    4628:	0767      	lsls	r7, r4, #29
    462a:	08c0      	lsrs	r0, r0, #3
    462c:	4307      	orrs	r7, r0
    462e:	2080      	movs	r0, #128	; 0x80
    4630:	08e4      	lsrs	r4, r4, #3
    4632:	0300      	lsls	r0, r0, #12
    4634:	4204      	tst	r4, r0
    4636:	d007      	beq.n	4648 <__aeabi_dsub+0x558>
    4638:	08cd      	lsrs	r5, r1, #3
    463a:	4205      	tst	r5, r0
    463c:	d104      	bne.n	4648 <__aeabi_dsub+0x558>
    463e:	002c      	movs	r4, r5
    4640:	4698      	mov	r8, r3
    4642:	08d7      	lsrs	r7, r2, #3
    4644:	0749      	lsls	r1, r1, #29
    4646:	430f      	orrs	r7, r1
    4648:	0f7b      	lsrs	r3, r7, #29
    464a:	00e4      	lsls	r4, r4, #3
    464c:	431c      	orrs	r4, r3
    464e:	00ff      	lsls	r7, r7, #3
    4650:	4e30      	ldr	r6, [pc, #192]	; (4714 <__aeabi_dsub+0x624>)
    4652:	e5d3      	b.n	41fc <__aeabi_dsub+0x10c>
    4654:	4e2f      	ldr	r6, [pc, #188]	; (4714 <__aeabi_dsub+0x624>)
    4656:	45b4      	cmp	ip, r6
    4658:	d1b4      	bne.n	45c4 <__aeabi_dsub+0x4d4>
    465a:	000c      	movs	r4, r1
    465c:	0017      	movs	r7, r2
    465e:	4666      	mov	r6, ip
    4660:	e5cc      	b.n	41fc <__aeabi_dsub+0x10c>
    4662:	2700      	movs	r7, #0
    4664:	2400      	movs	r4, #0
    4666:	e5e8      	b.n	423a <__aeabi_dsub+0x14a>
    4668:	2b00      	cmp	r3, #0
    466a:	d039      	beq.n	46e0 <__aeabi_dsub+0x5f0>
    466c:	000b      	movs	r3, r1
    466e:	4313      	orrs	r3, r2
    4670:	d100      	bne.n	4674 <__aeabi_dsub+0x584>
    4672:	e744      	b.n	44fe <__aeabi_dsub+0x40e>
    4674:	08c0      	lsrs	r0, r0, #3
    4676:	0767      	lsls	r7, r4, #29
    4678:	4307      	orrs	r7, r0
    467a:	2080      	movs	r0, #128	; 0x80
    467c:	08e4      	lsrs	r4, r4, #3
    467e:	0300      	lsls	r0, r0, #12
    4680:	4204      	tst	r4, r0
    4682:	d0e1      	beq.n	4648 <__aeabi_dsub+0x558>
    4684:	08cb      	lsrs	r3, r1, #3
    4686:	4203      	tst	r3, r0
    4688:	d1de      	bne.n	4648 <__aeabi_dsub+0x558>
    468a:	08d7      	lsrs	r7, r2, #3
    468c:	0749      	lsls	r1, r1, #29
    468e:	430f      	orrs	r7, r1
    4690:	001c      	movs	r4, r3
    4692:	e7d9      	b.n	4648 <__aeabi_dsub+0x558>
    4694:	2100      	movs	r1, #0
    4696:	e771      	b.n	457c <__aeabi_dsub+0x48c>
    4698:	2500      	movs	r5, #0
    469a:	2700      	movs	r7, #0
    469c:	e5e9      	b.n	4272 <__aeabi_dsub+0x182>
    469e:	002e      	movs	r6, r5
    46a0:	0027      	movs	r7, r4
    46a2:	3e20      	subs	r6, #32
    46a4:	40f7      	lsrs	r7, r6
    46a6:	2d20      	cmp	r5, #32
    46a8:	d02f      	beq.n	470a <__aeabi_dsub+0x61a>
    46aa:	2640      	movs	r6, #64	; 0x40
    46ac:	1b75      	subs	r5, r6, r5
    46ae:	40ac      	lsls	r4, r5
    46b0:	4650      	mov	r0, sl
    46b2:	4320      	orrs	r0, r4
    46b4:	1e44      	subs	r4, r0, #1
    46b6:	41a0      	sbcs	r0, r4
    46b8:	2400      	movs	r4, #0
    46ba:	4338      	orrs	r0, r7
    46bc:	e6dc      	b.n	4478 <__aeabi_dsub+0x388>
    46be:	2480      	movs	r4, #128	; 0x80
    46c0:	2500      	movs	r5, #0
    46c2:	0324      	lsls	r4, r4, #12
    46c4:	4e13      	ldr	r6, [pc, #76]	; (4714 <__aeabi_dsub+0x624>)
    46c6:	2700      	movs	r7, #0
    46c8:	e5d3      	b.n	4272 <__aeabi_dsub+0x182>
    46ca:	4650      	mov	r0, sl
    46cc:	4320      	orrs	r0, r4
    46ce:	0007      	movs	r7, r0
    46d0:	1e78      	subs	r0, r7, #1
    46d2:	4187      	sbcs	r7, r0
    46d4:	2400      	movs	r4, #0
    46d6:	18bf      	adds	r7, r7, r2
    46d8:	e760      	b.n	459c <__aeabi_dsub+0x4ac>
    46da:	000c      	movs	r4, r1
    46dc:	0017      	movs	r7, r2
    46de:	e58d      	b.n	41fc <__aeabi_dsub+0x10c>
    46e0:	000c      	movs	r4, r1
    46e2:	0017      	movs	r7, r2
    46e4:	4e0b      	ldr	r6, [pc, #44]	; (4714 <__aeabi_dsub+0x624>)
    46e6:	e589      	b.n	41fc <__aeabi_dsub+0x10c>
    46e8:	001e      	movs	r6, r3
    46ea:	0027      	movs	r7, r4
    46ec:	3e20      	subs	r6, #32
    46ee:	40f7      	lsrs	r7, r6
    46f0:	2b20      	cmp	r3, #32
    46f2:	d00c      	beq.n	470e <__aeabi_dsub+0x61e>
    46f4:	2640      	movs	r6, #64	; 0x40
    46f6:	1af3      	subs	r3, r6, r3
    46f8:	409c      	lsls	r4, r3
    46fa:	4650      	mov	r0, sl
    46fc:	4320      	orrs	r0, r4
    46fe:	1e44      	subs	r4, r0, #1
    4700:	41a0      	sbcs	r0, r4
    4702:	4307      	orrs	r7, r0
    4704:	2400      	movs	r4, #0
    4706:	18bf      	adds	r7, r7, r2
    4708:	e748      	b.n	459c <__aeabi_dsub+0x4ac>
    470a:	2400      	movs	r4, #0
    470c:	e7d0      	b.n	46b0 <__aeabi_dsub+0x5c0>
    470e:	2400      	movs	r4, #0
    4710:	e7f3      	b.n	46fa <__aeabi_dsub+0x60a>
    4712:	46c0      	nop			; (mov r8, r8)
    4714:	000007ff 	.word	0x000007ff
    4718:	ff7fffff 	.word	0xff7fffff

0000471c <__aeabi_d2iz>:
    471c:	b530      	push	{r4, r5, lr}
    471e:	4d13      	ldr	r5, [pc, #76]	; (476c <__aeabi_d2iz+0x50>)
    4720:	030a      	lsls	r2, r1, #12
    4722:	004b      	lsls	r3, r1, #1
    4724:	0b12      	lsrs	r2, r2, #12
    4726:	0d5b      	lsrs	r3, r3, #21
    4728:	0fc9      	lsrs	r1, r1, #31
    472a:	2400      	movs	r4, #0
    472c:	42ab      	cmp	r3, r5
    472e:	dd10      	ble.n	4752 <__aeabi_d2iz+0x36>
    4730:	4c0f      	ldr	r4, [pc, #60]	; (4770 <__aeabi_d2iz+0x54>)
    4732:	42a3      	cmp	r3, r4
    4734:	dc0f      	bgt.n	4756 <__aeabi_d2iz+0x3a>
    4736:	2480      	movs	r4, #128	; 0x80
    4738:	4d0e      	ldr	r5, [pc, #56]	; (4774 <__aeabi_d2iz+0x58>)
    473a:	0364      	lsls	r4, r4, #13
    473c:	4322      	orrs	r2, r4
    473e:	1aed      	subs	r5, r5, r3
    4740:	2d1f      	cmp	r5, #31
    4742:	dd0b      	ble.n	475c <__aeabi_d2iz+0x40>
    4744:	480c      	ldr	r0, [pc, #48]	; (4778 <__aeabi_d2iz+0x5c>)
    4746:	1ac3      	subs	r3, r0, r3
    4748:	40da      	lsrs	r2, r3
    474a:	4254      	negs	r4, r2
    474c:	2900      	cmp	r1, #0
    474e:	d100      	bne.n	4752 <__aeabi_d2iz+0x36>
    4750:	0014      	movs	r4, r2
    4752:	0020      	movs	r0, r4
    4754:	bd30      	pop	{r4, r5, pc}
    4756:	4b09      	ldr	r3, [pc, #36]	; (477c <__aeabi_d2iz+0x60>)
    4758:	18cc      	adds	r4, r1, r3
    475a:	e7fa      	b.n	4752 <__aeabi_d2iz+0x36>
    475c:	4c08      	ldr	r4, [pc, #32]	; (4780 <__aeabi_d2iz+0x64>)
    475e:	40e8      	lsrs	r0, r5
    4760:	46a4      	mov	ip, r4
    4762:	4463      	add	r3, ip
    4764:	409a      	lsls	r2, r3
    4766:	4302      	orrs	r2, r0
    4768:	e7ef      	b.n	474a <__aeabi_d2iz+0x2e>
    476a:	46c0      	nop			; (mov r8, r8)
    476c:	000003fe 	.word	0x000003fe
    4770:	0000041d 	.word	0x0000041d
    4774:	00000433 	.word	0x00000433
    4778:	00000413 	.word	0x00000413
    477c:	7fffffff 	.word	0x7fffffff
    4780:	fffffbed 	.word	0xfffffbed

00004784 <__aeabi_ui2d>:
    4784:	b510      	push	{r4, lr}
    4786:	1e04      	subs	r4, r0, #0
    4788:	d028      	beq.n	47dc <__aeabi_ui2d+0x58>
    478a:	f000 f8c3 	bl	4914 <__clzsi2>
    478e:	4b15      	ldr	r3, [pc, #84]	; (47e4 <__aeabi_ui2d+0x60>)
    4790:	4a15      	ldr	r2, [pc, #84]	; (47e8 <__aeabi_ui2d+0x64>)
    4792:	1a1b      	subs	r3, r3, r0
    4794:	1ad2      	subs	r2, r2, r3
    4796:	2a1f      	cmp	r2, #31
    4798:	dd15      	ble.n	47c6 <__aeabi_ui2d+0x42>
    479a:	4a14      	ldr	r2, [pc, #80]	; (47ec <__aeabi_ui2d+0x68>)
    479c:	1ad2      	subs	r2, r2, r3
    479e:	4094      	lsls	r4, r2
    47a0:	2200      	movs	r2, #0
    47a2:	0324      	lsls	r4, r4, #12
    47a4:	055b      	lsls	r3, r3, #21
    47a6:	0b24      	lsrs	r4, r4, #12
    47a8:	0d5b      	lsrs	r3, r3, #21
    47aa:	2100      	movs	r1, #0
    47ac:	0010      	movs	r0, r2
    47ae:	0324      	lsls	r4, r4, #12
    47b0:	0d0a      	lsrs	r2, r1, #20
    47b2:	0b24      	lsrs	r4, r4, #12
    47b4:	0512      	lsls	r2, r2, #20
    47b6:	4322      	orrs	r2, r4
    47b8:	4c0d      	ldr	r4, [pc, #52]	; (47f0 <__aeabi_ui2d+0x6c>)
    47ba:	051b      	lsls	r3, r3, #20
    47bc:	4022      	ands	r2, r4
    47be:	4313      	orrs	r3, r2
    47c0:	005b      	lsls	r3, r3, #1
    47c2:	0859      	lsrs	r1, r3, #1
    47c4:	bd10      	pop	{r4, pc}
    47c6:	0021      	movs	r1, r4
    47c8:	4091      	lsls	r1, r2
    47ca:	000a      	movs	r2, r1
    47cc:	210b      	movs	r1, #11
    47ce:	1a08      	subs	r0, r1, r0
    47d0:	40c4      	lsrs	r4, r0
    47d2:	055b      	lsls	r3, r3, #21
    47d4:	0324      	lsls	r4, r4, #12
    47d6:	0b24      	lsrs	r4, r4, #12
    47d8:	0d5b      	lsrs	r3, r3, #21
    47da:	e7e6      	b.n	47aa <__aeabi_ui2d+0x26>
    47dc:	2300      	movs	r3, #0
    47de:	2400      	movs	r4, #0
    47e0:	2200      	movs	r2, #0
    47e2:	e7e2      	b.n	47aa <__aeabi_ui2d+0x26>
    47e4:	0000041e 	.word	0x0000041e
    47e8:	00000433 	.word	0x00000433
    47ec:	00000413 	.word	0x00000413
    47f0:	800fffff 	.word	0x800fffff

000047f4 <__aeabi_f2d>:
    47f4:	0041      	lsls	r1, r0, #1
    47f6:	0e09      	lsrs	r1, r1, #24
    47f8:	1c4b      	adds	r3, r1, #1
    47fa:	b570      	push	{r4, r5, r6, lr}
    47fc:	b2db      	uxtb	r3, r3
    47fe:	0246      	lsls	r6, r0, #9
    4800:	0a75      	lsrs	r5, r6, #9
    4802:	0fc4      	lsrs	r4, r0, #31
    4804:	2b01      	cmp	r3, #1
    4806:	dd14      	ble.n	4832 <__aeabi_f2d+0x3e>
    4808:	23e0      	movs	r3, #224	; 0xe0
    480a:	009b      	lsls	r3, r3, #2
    480c:	076d      	lsls	r5, r5, #29
    480e:	0b36      	lsrs	r6, r6, #12
    4810:	18cb      	adds	r3, r1, r3
    4812:	2100      	movs	r1, #0
    4814:	0d0a      	lsrs	r2, r1, #20
    4816:	0028      	movs	r0, r5
    4818:	0512      	lsls	r2, r2, #20
    481a:	4d1c      	ldr	r5, [pc, #112]	; (488c <__aeabi_f2d+0x98>)
    481c:	4332      	orrs	r2, r6
    481e:	055b      	lsls	r3, r3, #21
    4820:	402a      	ands	r2, r5
    4822:	085b      	lsrs	r3, r3, #1
    4824:	4313      	orrs	r3, r2
    4826:	005b      	lsls	r3, r3, #1
    4828:	07e4      	lsls	r4, r4, #31
    482a:	085b      	lsrs	r3, r3, #1
    482c:	4323      	orrs	r3, r4
    482e:	0019      	movs	r1, r3
    4830:	bd70      	pop	{r4, r5, r6, pc}
    4832:	2900      	cmp	r1, #0
    4834:	d114      	bne.n	4860 <__aeabi_f2d+0x6c>
    4836:	2d00      	cmp	r5, #0
    4838:	d01e      	beq.n	4878 <__aeabi_f2d+0x84>
    483a:	0028      	movs	r0, r5
    483c:	f000 f86a 	bl	4914 <__clzsi2>
    4840:	280a      	cmp	r0, #10
    4842:	dc1c      	bgt.n	487e <__aeabi_f2d+0x8a>
    4844:	230b      	movs	r3, #11
    4846:	002a      	movs	r2, r5
    4848:	1a1b      	subs	r3, r3, r0
    484a:	40da      	lsrs	r2, r3
    484c:	0003      	movs	r3, r0
    484e:	3315      	adds	r3, #21
    4850:	409d      	lsls	r5, r3
    4852:	4b0f      	ldr	r3, [pc, #60]	; (4890 <__aeabi_f2d+0x9c>)
    4854:	0312      	lsls	r2, r2, #12
    4856:	1a1b      	subs	r3, r3, r0
    4858:	055b      	lsls	r3, r3, #21
    485a:	0b16      	lsrs	r6, r2, #12
    485c:	0d5b      	lsrs	r3, r3, #21
    485e:	e7d8      	b.n	4812 <__aeabi_f2d+0x1e>
    4860:	2d00      	cmp	r5, #0
    4862:	d006      	beq.n	4872 <__aeabi_f2d+0x7e>
    4864:	0b32      	lsrs	r2, r6, #12
    4866:	2680      	movs	r6, #128	; 0x80
    4868:	0336      	lsls	r6, r6, #12
    486a:	076d      	lsls	r5, r5, #29
    486c:	4316      	orrs	r6, r2
    486e:	4b09      	ldr	r3, [pc, #36]	; (4894 <__aeabi_f2d+0xa0>)
    4870:	e7cf      	b.n	4812 <__aeabi_f2d+0x1e>
    4872:	4b08      	ldr	r3, [pc, #32]	; (4894 <__aeabi_f2d+0xa0>)
    4874:	2600      	movs	r6, #0
    4876:	e7cc      	b.n	4812 <__aeabi_f2d+0x1e>
    4878:	2300      	movs	r3, #0
    487a:	2600      	movs	r6, #0
    487c:	e7c9      	b.n	4812 <__aeabi_f2d+0x1e>
    487e:	0003      	movs	r3, r0
    4880:	002a      	movs	r2, r5
    4882:	3b0b      	subs	r3, #11
    4884:	409a      	lsls	r2, r3
    4886:	2500      	movs	r5, #0
    4888:	e7e3      	b.n	4852 <__aeabi_f2d+0x5e>
    488a:	46c0      	nop			; (mov r8, r8)
    488c:	800fffff 	.word	0x800fffff
    4890:	00000389 	.word	0x00000389
    4894:	000007ff 	.word	0x000007ff

00004898 <__aeabi_cdrcmple>:
    4898:	4684      	mov	ip, r0
    489a:	1c10      	adds	r0, r2, #0
    489c:	4662      	mov	r2, ip
    489e:	468c      	mov	ip, r1
    48a0:	1c19      	adds	r1, r3, #0
    48a2:	4663      	mov	r3, ip
    48a4:	e000      	b.n	48a8 <__aeabi_cdcmpeq>
    48a6:	46c0      	nop			; (mov r8, r8)

000048a8 <__aeabi_cdcmpeq>:
    48a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    48aa:	f000 f90f 	bl	4acc <__ledf2>
    48ae:	2800      	cmp	r0, #0
    48b0:	d401      	bmi.n	48b6 <__aeabi_cdcmpeq+0xe>
    48b2:	2100      	movs	r1, #0
    48b4:	42c8      	cmn	r0, r1
    48b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000048b8 <__aeabi_dcmpeq>:
    48b8:	b510      	push	{r4, lr}
    48ba:	f000 f869 	bl	4990 <__eqdf2>
    48be:	4240      	negs	r0, r0
    48c0:	3001      	adds	r0, #1
    48c2:	bd10      	pop	{r4, pc}

000048c4 <__aeabi_dcmplt>:
    48c4:	b510      	push	{r4, lr}
    48c6:	f000 f901 	bl	4acc <__ledf2>
    48ca:	2800      	cmp	r0, #0
    48cc:	db01      	blt.n	48d2 <__aeabi_dcmplt+0xe>
    48ce:	2000      	movs	r0, #0
    48d0:	bd10      	pop	{r4, pc}
    48d2:	2001      	movs	r0, #1
    48d4:	bd10      	pop	{r4, pc}
    48d6:	46c0      	nop			; (mov r8, r8)

000048d8 <__aeabi_dcmple>:
    48d8:	b510      	push	{r4, lr}
    48da:	f000 f8f7 	bl	4acc <__ledf2>
    48de:	2800      	cmp	r0, #0
    48e0:	dd01      	ble.n	48e6 <__aeabi_dcmple+0xe>
    48e2:	2000      	movs	r0, #0
    48e4:	bd10      	pop	{r4, pc}
    48e6:	2001      	movs	r0, #1
    48e8:	bd10      	pop	{r4, pc}
    48ea:	46c0      	nop			; (mov r8, r8)

000048ec <__aeabi_dcmpgt>:
    48ec:	b510      	push	{r4, lr}
    48ee:	f000 f889 	bl	4a04 <__gedf2>
    48f2:	2800      	cmp	r0, #0
    48f4:	dc01      	bgt.n	48fa <__aeabi_dcmpgt+0xe>
    48f6:	2000      	movs	r0, #0
    48f8:	bd10      	pop	{r4, pc}
    48fa:	2001      	movs	r0, #1
    48fc:	bd10      	pop	{r4, pc}
    48fe:	46c0      	nop			; (mov r8, r8)

00004900 <__aeabi_dcmpge>:
    4900:	b510      	push	{r4, lr}
    4902:	f000 f87f 	bl	4a04 <__gedf2>
    4906:	2800      	cmp	r0, #0
    4908:	da01      	bge.n	490e <__aeabi_dcmpge+0xe>
    490a:	2000      	movs	r0, #0
    490c:	bd10      	pop	{r4, pc}
    490e:	2001      	movs	r0, #1
    4910:	bd10      	pop	{r4, pc}
    4912:	46c0      	nop			; (mov r8, r8)

00004914 <__clzsi2>:
    4914:	211c      	movs	r1, #28
    4916:	2301      	movs	r3, #1
    4918:	041b      	lsls	r3, r3, #16
    491a:	4298      	cmp	r0, r3
    491c:	d301      	bcc.n	4922 <__clzsi2+0xe>
    491e:	0c00      	lsrs	r0, r0, #16
    4920:	3910      	subs	r1, #16
    4922:	0a1b      	lsrs	r3, r3, #8
    4924:	4298      	cmp	r0, r3
    4926:	d301      	bcc.n	492c <__clzsi2+0x18>
    4928:	0a00      	lsrs	r0, r0, #8
    492a:	3908      	subs	r1, #8
    492c:	091b      	lsrs	r3, r3, #4
    492e:	4298      	cmp	r0, r3
    4930:	d301      	bcc.n	4936 <__clzsi2+0x22>
    4932:	0900      	lsrs	r0, r0, #4
    4934:	3904      	subs	r1, #4
    4936:	a202      	add	r2, pc, #8	; (adr r2, 4940 <__clzsi2+0x2c>)
    4938:	5c10      	ldrb	r0, [r2, r0]
    493a:	1840      	adds	r0, r0, r1
    493c:	4770      	bx	lr
    493e:	46c0      	nop			; (mov r8, r8)
    4940:	02020304 	.word	0x02020304
    4944:	01010101 	.word	0x01010101
	...

00004950 <__ctzsi2>:
    4950:	4241      	negs	r1, r0
    4952:	4008      	ands	r0, r1
    4954:	211c      	movs	r1, #28
    4956:	2301      	movs	r3, #1
    4958:	041b      	lsls	r3, r3, #16
    495a:	4298      	cmp	r0, r3
    495c:	d301      	bcc.n	4962 <__ctzsi2+0x12>
    495e:	0c00      	lsrs	r0, r0, #16
    4960:	3910      	subs	r1, #16
    4962:	0a1b      	lsrs	r3, r3, #8
    4964:	4298      	cmp	r0, r3
    4966:	d301      	bcc.n	496c <__ctzsi2+0x1c>
    4968:	0a00      	lsrs	r0, r0, #8
    496a:	3908      	subs	r1, #8
    496c:	091b      	lsrs	r3, r3, #4
    496e:	4298      	cmp	r0, r3
    4970:	d301      	bcc.n	4976 <__ctzsi2+0x26>
    4972:	0900      	lsrs	r0, r0, #4
    4974:	3904      	subs	r1, #4
    4976:	a202      	add	r2, pc, #8	; (adr r2, 4980 <__ctzsi2+0x30>)
    4978:	5c10      	ldrb	r0, [r2, r0]
    497a:	1a40      	subs	r0, r0, r1
    497c:	4770      	bx	lr
    497e:	46c0      	nop			; (mov r8, r8)
    4980:	1d1d1c1b 	.word	0x1d1d1c1b
    4984:	1e1e1e1e 	.word	0x1e1e1e1e
    4988:	1f1f1f1f 	.word	0x1f1f1f1f
    498c:	1f1f1f1f 	.word	0x1f1f1f1f

00004990 <__eqdf2>:
    4990:	b5f0      	push	{r4, r5, r6, r7, lr}
    4992:	464f      	mov	r7, r9
    4994:	4646      	mov	r6, r8
    4996:	46d6      	mov	lr, sl
    4998:	005c      	lsls	r4, r3, #1
    499a:	b5c0      	push	{r6, r7, lr}
    499c:	031f      	lsls	r7, r3, #12
    499e:	0fdb      	lsrs	r3, r3, #31
    49a0:	469a      	mov	sl, r3
    49a2:	4b17      	ldr	r3, [pc, #92]	; (4a00 <__eqdf2+0x70>)
    49a4:	030e      	lsls	r6, r1, #12
    49a6:	004d      	lsls	r5, r1, #1
    49a8:	4684      	mov	ip, r0
    49aa:	4680      	mov	r8, r0
    49ac:	0b36      	lsrs	r6, r6, #12
    49ae:	0d6d      	lsrs	r5, r5, #21
    49b0:	0fc9      	lsrs	r1, r1, #31
    49b2:	4691      	mov	r9, r2
    49b4:	0b3f      	lsrs	r7, r7, #12
    49b6:	0d64      	lsrs	r4, r4, #21
    49b8:	2001      	movs	r0, #1
    49ba:	429d      	cmp	r5, r3
    49bc:	d008      	beq.n	49d0 <__eqdf2+0x40>
    49be:	429c      	cmp	r4, r3
    49c0:	d001      	beq.n	49c6 <__eqdf2+0x36>
    49c2:	42a5      	cmp	r5, r4
    49c4:	d00b      	beq.n	49de <__eqdf2+0x4e>
    49c6:	bc1c      	pop	{r2, r3, r4}
    49c8:	4690      	mov	r8, r2
    49ca:	4699      	mov	r9, r3
    49cc:	46a2      	mov	sl, r4
    49ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49d0:	4663      	mov	r3, ip
    49d2:	4333      	orrs	r3, r6
    49d4:	d1f7      	bne.n	49c6 <__eqdf2+0x36>
    49d6:	42ac      	cmp	r4, r5
    49d8:	d1f5      	bne.n	49c6 <__eqdf2+0x36>
    49da:	433a      	orrs	r2, r7
    49dc:	d1f3      	bne.n	49c6 <__eqdf2+0x36>
    49de:	2001      	movs	r0, #1
    49e0:	42be      	cmp	r6, r7
    49e2:	d1f0      	bne.n	49c6 <__eqdf2+0x36>
    49e4:	45c8      	cmp	r8, r9
    49e6:	d1ee      	bne.n	49c6 <__eqdf2+0x36>
    49e8:	4551      	cmp	r1, sl
    49ea:	d007      	beq.n	49fc <__eqdf2+0x6c>
    49ec:	2d00      	cmp	r5, #0
    49ee:	d1ea      	bne.n	49c6 <__eqdf2+0x36>
    49f0:	4663      	mov	r3, ip
    49f2:	431e      	orrs	r6, r3
    49f4:	0030      	movs	r0, r6
    49f6:	1e46      	subs	r6, r0, #1
    49f8:	41b0      	sbcs	r0, r6
    49fa:	e7e4      	b.n	49c6 <__eqdf2+0x36>
    49fc:	2000      	movs	r0, #0
    49fe:	e7e2      	b.n	49c6 <__eqdf2+0x36>
    4a00:	000007ff 	.word	0x000007ff

00004a04 <__gedf2>:
    4a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a06:	4645      	mov	r5, r8
    4a08:	46de      	mov	lr, fp
    4a0a:	4657      	mov	r7, sl
    4a0c:	464e      	mov	r6, r9
    4a0e:	b5e0      	push	{r5, r6, r7, lr}
    4a10:	031f      	lsls	r7, r3, #12
    4a12:	0b3d      	lsrs	r5, r7, #12
    4a14:	4f2c      	ldr	r7, [pc, #176]	; (4ac8 <__gedf2+0xc4>)
    4a16:	030e      	lsls	r6, r1, #12
    4a18:	004c      	lsls	r4, r1, #1
    4a1a:	46ab      	mov	fp, r5
    4a1c:	005d      	lsls	r5, r3, #1
    4a1e:	4684      	mov	ip, r0
    4a20:	0b36      	lsrs	r6, r6, #12
    4a22:	0d64      	lsrs	r4, r4, #21
    4a24:	0fc9      	lsrs	r1, r1, #31
    4a26:	4690      	mov	r8, r2
    4a28:	0d6d      	lsrs	r5, r5, #21
    4a2a:	0fdb      	lsrs	r3, r3, #31
    4a2c:	42bc      	cmp	r4, r7
    4a2e:	d02a      	beq.n	4a86 <__gedf2+0x82>
    4a30:	4f25      	ldr	r7, [pc, #148]	; (4ac8 <__gedf2+0xc4>)
    4a32:	42bd      	cmp	r5, r7
    4a34:	d02d      	beq.n	4a92 <__gedf2+0x8e>
    4a36:	2c00      	cmp	r4, #0
    4a38:	d10f      	bne.n	4a5a <__gedf2+0x56>
    4a3a:	4330      	orrs	r0, r6
    4a3c:	0007      	movs	r7, r0
    4a3e:	4681      	mov	r9, r0
    4a40:	4278      	negs	r0, r7
    4a42:	4178      	adcs	r0, r7
    4a44:	b2c0      	uxtb	r0, r0
    4a46:	2d00      	cmp	r5, #0
    4a48:	d117      	bne.n	4a7a <__gedf2+0x76>
    4a4a:	465f      	mov	r7, fp
    4a4c:	433a      	orrs	r2, r7
    4a4e:	d114      	bne.n	4a7a <__gedf2+0x76>
    4a50:	464b      	mov	r3, r9
    4a52:	2000      	movs	r0, #0
    4a54:	2b00      	cmp	r3, #0
    4a56:	d00a      	beq.n	4a6e <__gedf2+0x6a>
    4a58:	e006      	b.n	4a68 <__gedf2+0x64>
    4a5a:	2d00      	cmp	r5, #0
    4a5c:	d102      	bne.n	4a64 <__gedf2+0x60>
    4a5e:	4658      	mov	r0, fp
    4a60:	4302      	orrs	r2, r0
    4a62:	d001      	beq.n	4a68 <__gedf2+0x64>
    4a64:	4299      	cmp	r1, r3
    4a66:	d018      	beq.n	4a9a <__gedf2+0x96>
    4a68:	4248      	negs	r0, r1
    4a6a:	2101      	movs	r1, #1
    4a6c:	4308      	orrs	r0, r1
    4a6e:	bc3c      	pop	{r2, r3, r4, r5}
    4a70:	4690      	mov	r8, r2
    4a72:	4699      	mov	r9, r3
    4a74:	46a2      	mov	sl, r4
    4a76:	46ab      	mov	fp, r5
    4a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a7a:	2800      	cmp	r0, #0
    4a7c:	d0f2      	beq.n	4a64 <__gedf2+0x60>
    4a7e:	2001      	movs	r0, #1
    4a80:	3b01      	subs	r3, #1
    4a82:	4318      	orrs	r0, r3
    4a84:	e7f3      	b.n	4a6e <__gedf2+0x6a>
    4a86:	0037      	movs	r7, r6
    4a88:	4307      	orrs	r7, r0
    4a8a:	d0d1      	beq.n	4a30 <__gedf2+0x2c>
    4a8c:	2002      	movs	r0, #2
    4a8e:	4240      	negs	r0, r0
    4a90:	e7ed      	b.n	4a6e <__gedf2+0x6a>
    4a92:	465f      	mov	r7, fp
    4a94:	4317      	orrs	r7, r2
    4a96:	d0ce      	beq.n	4a36 <__gedf2+0x32>
    4a98:	e7f8      	b.n	4a8c <__gedf2+0x88>
    4a9a:	42ac      	cmp	r4, r5
    4a9c:	dce4      	bgt.n	4a68 <__gedf2+0x64>
    4a9e:	da03      	bge.n	4aa8 <__gedf2+0xa4>
    4aa0:	1e48      	subs	r0, r1, #1
    4aa2:	2101      	movs	r1, #1
    4aa4:	4308      	orrs	r0, r1
    4aa6:	e7e2      	b.n	4a6e <__gedf2+0x6a>
    4aa8:	455e      	cmp	r6, fp
    4aaa:	d8dd      	bhi.n	4a68 <__gedf2+0x64>
    4aac:	d006      	beq.n	4abc <__gedf2+0xb8>
    4aae:	2000      	movs	r0, #0
    4ab0:	455e      	cmp	r6, fp
    4ab2:	d2dc      	bcs.n	4a6e <__gedf2+0x6a>
    4ab4:	2301      	movs	r3, #1
    4ab6:	1e48      	subs	r0, r1, #1
    4ab8:	4318      	orrs	r0, r3
    4aba:	e7d8      	b.n	4a6e <__gedf2+0x6a>
    4abc:	45c4      	cmp	ip, r8
    4abe:	d8d3      	bhi.n	4a68 <__gedf2+0x64>
    4ac0:	2000      	movs	r0, #0
    4ac2:	45c4      	cmp	ip, r8
    4ac4:	d3f6      	bcc.n	4ab4 <__gedf2+0xb0>
    4ac6:	e7d2      	b.n	4a6e <__gedf2+0x6a>
    4ac8:	000007ff 	.word	0x000007ff

00004acc <__ledf2>:
    4acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ace:	464e      	mov	r6, r9
    4ad0:	4645      	mov	r5, r8
    4ad2:	46de      	mov	lr, fp
    4ad4:	4657      	mov	r7, sl
    4ad6:	005c      	lsls	r4, r3, #1
    4ad8:	b5e0      	push	{r5, r6, r7, lr}
    4ada:	031f      	lsls	r7, r3, #12
    4adc:	0fdb      	lsrs	r3, r3, #31
    4ade:	4699      	mov	r9, r3
    4ae0:	4b2a      	ldr	r3, [pc, #168]	; (4b8c <__ledf2+0xc0>)
    4ae2:	030e      	lsls	r6, r1, #12
    4ae4:	004d      	lsls	r5, r1, #1
    4ae6:	0fc9      	lsrs	r1, r1, #31
    4ae8:	4684      	mov	ip, r0
    4aea:	0b36      	lsrs	r6, r6, #12
    4aec:	0d6d      	lsrs	r5, r5, #21
    4aee:	468b      	mov	fp, r1
    4af0:	4690      	mov	r8, r2
    4af2:	0b3f      	lsrs	r7, r7, #12
    4af4:	0d64      	lsrs	r4, r4, #21
    4af6:	429d      	cmp	r5, r3
    4af8:	d020      	beq.n	4b3c <__ledf2+0x70>
    4afa:	4b24      	ldr	r3, [pc, #144]	; (4b8c <__ledf2+0xc0>)
    4afc:	429c      	cmp	r4, r3
    4afe:	d022      	beq.n	4b46 <__ledf2+0x7a>
    4b00:	2d00      	cmp	r5, #0
    4b02:	d112      	bne.n	4b2a <__ledf2+0x5e>
    4b04:	4330      	orrs	r0, r6
    4b06:	4243      	negs	r3, r0
    4b08:	4143      	adcs	r3, r0
    4b0a:	b2db      	uxtb	r3, r3
    4b0c:	2c00      	cmp	r4, #0
    4b0e:	d01f      	beq.n	4b50 <__ledf2+0x84>
    4b10:	2b00      	cmp	r3, #0
    4b12:	d00c      	beq.n	4b2e <__ledf2+0x62>
    4b14:	464b      	mov	r3, r9
    4b16:	2001      	movs	r0, #1
    4b18:	3b01      	subs	r3, #1
    4b1a:	4303      	orrs	r3, r0
    4b1c:	0018      	movs	r0, r3
    4b1e:	bc3c      	pop	{r2, r3, r4, r5}
    4b20:	4690      	mov	r8, r2
    4b22:	4699      	mov	r9, r3
    4b24:	46a2      	mov	sl, r4
    4b26:	46ab      	mov	fp, r5
    4b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b2a:	2c00      	cmp	r4, #0
    4b2c:	d016      	beq.n	4b5c <__ledf2+0x90>
    4b2e:	45cb      	cmp	fp, r9
    4b30:	d017      	beq.n	4b62 <__ledf2+0x96>
    4b32:	465b      	mov	r3, fp
    4b34:	4259      	negs	r1, r3
    4b36:	2301      	movs	r3, #1
    4b38:	430b      	orrs	r3, r1
    4b3a:	e7ef      	b.n	4b1c <__ledf2+0x50>
    4b3c:	0031      	movs	r1, r6
    4b3e:	2302      	movs	r3, #2
    4b40:	4301      	orrs	r1, r0
    4b42:	d1eb      	bne.n	4b1c <__ledf2+0x50>
    4b44:	e7d9      	b.n	4afa <__ledf2+0x2e>
    4b46:	0039      	movs	r1, r7
    4b48:	2302      	movs	r3, #2
    4b4a:	4311      	orrs	r1, r2
    4b4c:	d1e6      	bne.n	4b1c <__ledf2+0x50>
    4b4e:	e7d7      	b.n	4b00 <__ledf2+0x34>
    4b50:	433a      	orrs	r2, r7
    4b52:	d1dd      	bne.n	4b10 <__ledf2+0x44>
    4b54:	2300      	movs	r3, #0
    4b56:	2800      	cmp	r0, #0
    4b58:	d0e0      	beq.n	4b1c <__ledf2+0x50>
    4b5a:	e7ea      	b.n	4b32 <__ledf2+0x66>
    4b5c:	433a      	orrs	r2, r7
    4b5e:	d1e6      	bne.n	4b2e <__ledf2+0x62>
    4b60:	e7e7      	b.n	4b32 <__ledf2+0x66>
    4b62:	42a5      	cmp	r5, r4
    4b64:	dce5      	bgt.n	4b32 <__ledf2+0x66>
    4b66:	db05      	blt.n	4b74 <__ledf2+0xa8>
    4b68:	42be      	cmp	r6, r7
    4b6a:	d8e2      	bhi.n	4b32 <__ledf2+0x66>
    4b6c:	d007      	beq.n	4b7e <__ledf2+0xb2>
    4b6e:	2300      	movs	r3, #0
    4b70:	42be      	cmp	r6, r7
    4b72:	d2d3      	bcs.n	4b1c <__ledf2+0x50>
    4b74:	4659      	mov	r1, fp
    4b76:	2301      	movs	r3, #1
    4b78:	3901      	subs	r1, #1
    4b7a:	430b      	orrs	r3, r1
    4b7c:	e7ce      	b.n	4b1c <__ledf2+0x50>
    4b7e:	45c4      	cmp	ip, r8
    4b80:	d8d7      	bhi.n	4b32 <__ledf2+0x66>
    4b82:	2300      	movs	r3, #0
    4b84:	45c4      	cmp	ip, r8
    4b86:	d3f5      	bcc.n	4b74 <__ledf2+0xa8>
    4b88:	e7c8      	b.n	4b1c <__ledf2+0x50>
    4b8a:	46c0      	nop			; (mov r8, r8)
    4b8c:	000007ff 	.word	0x000007ff

00004b90 <__libc_init_array>:
    4b90:	b570      	push	{r4, r5, r6, lr}
    4b92:	4e0d      	ldr	r6, [pc, #52]	; (4bc8 <__libc_init_array+0x38>)
    4b94:	4d0d      	ldr	r5, [pc, #52]	; (4bcc <__libc_init_array+0x3c>)
    4b96:	2400      	movs	r4, #0
    4b98:	1bad      	subs	r5, r5, r6
    4b9a:	10ad      	asrs	r5, r5, #2
    4b9c:	d005      	beq.n	4baa <__libc_init_array+0x1a>
    4b9e:	00a3      	lsls	r3, r4, #2
    4ba0:	58f3      	ldr	r3, [r6, r3]
    4ba2:	3401      	adds	r4, #1
    4ba4:	4798      	blx	r3
    4ba6:	42a5      	cmp	r5, r4
    4ba8:	d1f9      	bne.n	4b9e <__libc_init_array+0xe>
    4baa:	f000 febb 	bl	5924 <_init>
    4bae:	4e08      	ldr	r6, [pc, #32]	; (4bd0 <__libc_init_array+0x40>)
    4bb0:	4d08      	ldr	r5, [pc, #32]	; (4bd4 <__libc_init_array+0x44>)
    4bb2:	2400      	movs	r4, #0
    4bb4:	1bad      	subs	r5, r5, r6
    4bb6:	10ad      	asrs	r5, r5, #2
    4bb8:	d005      	beq.n	4bc6 <__libc_init_array+0x36>
    4bba:	00a3      	lsls	r3, r4, #2
    4bbc:	58f3      	ldr	r3, [r6, r3]
    4bbe:	3401      	adds	r4, #1
    4bc0:	4798      	blx	r3
    4bc2:	42a5      	cmp	r5, r4
    4bc4:	d1f9      	bne.n	4bba <__libc_init_array+0x2a>
    4bc6:	bd70      	pop	{r4, r5, r6, pc}
    4bc8:	00005930 	.word	0x00005930
    4bcc:	00005930 	.word	0x00005930
    4bd0:	00005930 	.word	0x00005930
    4bd4:	00005938 	.word	0x00005938

00004bd8 <malloc>:
    4bd8:	b510      	push	{r4, lr}
    4bda:	4b03      	ldr	r3, [pc, #12]	; (4be8 <malloc+0x10>)
    4bdc:	0001      	movs	r1, r0
    4bde:	6818      	ldr	r0, [r3, #0]
    4be0:	f000 f80e 	bl	4c00 <_malloc_r>
    4be4:	bd10      	pop	{r4, pc}
    4be6:	46c0      	nop			; (mov r8, r8)
    4be8:	2000003c 	.word	0x2000003c

00004bec <free>:
    4bec:	b510      	push	{r4, lr}
    4bee:	4b03      	ldr	r3, [pc, #12]	; (4bfc <free+0x10>)
    4bf0:	0001      	movs	r1, r0
    4bf2:	6818      	ldr	r0, [r3, #0]
    4bf4:	f000 fb9a 	bl	532c <_free_r>
    4bf8:	bd10      	pop	{r4, pc}
    4bfa:	46c0      	nop			; (mov r8, r8)
    4bfc:	2000003c 	.word	0x2000003c

00004c00 <_malloc_r>:
    4c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c02:	4657      	mov	r7, sl
    4c04:	4645      	mov	r5, r8
    4c06:	46de      	mov	lr, fp
    4c08:	464e      	mov	r6, r9
    4c0a:	b5e0      	push	{r5, r6, r7, lr}
    4c0c:	000d      	movs	r5, r1
    4c0e:	350b      	adds	r5, #11
    4c10:	b083      	sub	sp, #12
    4c12:	0007      	movs	r7, r0
    4c14:	2d16      	cmp	r5, #22
    4c16:	d800      	bhi.n	4c1a <_malloc_r+0x1a>
    4c18:	e09f      	b.n	4d5a <_malloc_r+0x15a>
    4c1a:	2307      	movs	r3, #7
    4c1c:	439d      	bics	r5, r3
    4c1e:	d500      	bpl.n	4c22 <_malloc_r+0x22>
    4c20:	e0c4      	b.n	4dac <_malloc_r+0x1ac>
    4c22:	42a9      	cmp	r1, r5
    4c24:	d900      	bls.n	4c28 <_malloc_r+0x28>
    4c26:	e0c1      	b.n	4dac <_malloc_r+0x1ac>
    4c28:	f000 fae0 	bl	51ec <__malloc_lock>
    4c2c:	23f8      	movs	r3, #248	; 0xf8
    4c2e:	33ff      	adds	r3, #255	; 0xff
    4c30:	429d      	cmp	r5, r3
    4c32:	d800      	bhi.n	4c36 <_malloc_r+0x36>
    4c34:	e28f      	b.n	5156 <_malloc_r+0x556>
    4c36:	0a68      	lsrs	r0, r5, #9
    4c38:	d100      	bne.n	4c3c <_malloc_r+0x3c>
    4c3a:	e0bb      	b.n	4db4 <_malloc_r+0x1b4>
    4c3c:	2804      	cmp	r0, #4
    4c3e:	d900      	bls.n	4c42 <_malloc_r+0x42>
    4c40:	e162      	b.n	4f08 <_malloc_r+0x308>
    4c42:	2338      	movs	r3, #56	; 0x38
    4c44:	4698      	mov	r8, r3
    4c46:	09a8      	lsrs	r0, r5, #6
    4c48:	4480      	add	r8, r0
    4c4a:	3039      	adds	r0, #57	; 0x39
    4c4c:	00c1      	lsls	r1, r0, #3
    4c4e:	4ed2      	ldr	r6, [pc, #840]	; (4f98 <_malloc_r+0x398>)
    4c50:	1871      	adds	r1, r6, r1
    4c52:	3908      	subs	r1, #8
    4c54:	68cc      	ldr	r4, [r1, #12]
    4c56:	42a1      	cmp	r1, r4
    4c58:	d019      	beq.n	4c8e <_malloc_r+0x8e>
    4c5a:	2303      	movs	r3, #3
    4c5c:	6862      	ldr	r2, [r4, #4]
    4c5e:	439a      	bics	r2, r3
    4c60:	0013      	movs	r3, r2
    4c62:	1b52      	subs	r2, r2, r5
    4c64:	2a0f      	cmp	r2, #15
    4c66:	dd00      	ble.n	4c6a <_malloc_r+0x6a>
    4c68:	e0aa      	b.n	4dc0 <_malloc_r+0x1c0>
    4c6a:	2a00      	cmp	r2, #0
    4c6c:	db00      	blt.n	4c70 <_malloc_r+0x70>
    4c6e:	e088      	b.n	4d82 <_malloc_r+0x182>
    4c70:	2303      	movs	r3, #3
    4c72:	469c      	mov	ip, r3
    4c74:	e008      	b.n	4c88 <_malloc_r+0x88>
    4c76:	4662      	mov	r2, ip
    4c78:	6863      	ldr	r3, [r4, #4]
    4c7a:	4393      	bics	r3, r2
    4c7c:	1b5a      	subs	r2, r3, r5
    4c7e:	2a0f      	cmp	r2, #15
    4c80:	dd00      	ble.n	4c84 <_malloc_r+0x84>
    4c82:	e09d      	b.n	4dc0 <_malloc_r+0x1c0>
    4c84:	2a00      	cmp	r2, #0
    4c86:	da7c      	bge.n	4d82 <_malloc_r+0x182>
    4c88:	68e4      	ldr	r4, [r4, #12]
    4c8a:	42a1      	cmp	r1, r4
    4c8c:	d1f3      	bne.n	4c76 <_malloc_r+0x76>
    4c8e:	0032      	movs	r2, r6
    4c90:	6934      	ldr	r4, [r6, #16]
    4c92:	3208      	adds	r2, #8
    4c94:	4294      	cmp	r4, r2
    4c96:	d100      	bne.n	4c9a <_malloc_r+0x9a>
    4c98:	e190      	b.n	4fbc <_malloc_r+0x3bc>
    4c9a:	2303      	movs	r3, #3
    4c9c:	6861      	ldr	r1, [r4, #4]
    4c9e:	4399      	bics	r1, r3
    4ca0:	4689      	mov	r9, r1
    4ca2:	1b49      	subs	r1, r1, r5
    4ca4:	290f      	cmp	r1, #15
    4ca6:	dd00      	ble.n	4caa <_malloc_r+0xaa>
    4ca8:	e162      	b.n	4f70 <_malloc_r+0x370>
    4caa:	6172      	str	r2, [r6, #20]
    4cac:	6132      	str	r2, [r6, #16]
    4cae:	2900      	cmp	r1, #0
    4cb0:	db00      	blt.n	4cb4 <_malloc_r+0xb4>
    4cb2:	e087      	b.n	4dc4 <_malloc_r+0x1c4>
    4cb4:	4ab9      	ldr	r2, [pc, #740]	; (4f9c <_malloc_r+0x39c>)
    4cb6:	464b      	mov	r3, r9
    4cb8:	4591      	cmp	r9, r2
    4cba:	d900      	bls.n	4cbe <_malloc_r+0xbe>
    4cbc:	e130      	b.n	4f20 <_malloc_r+0x320>
    4cbe:	08db      	lsrs	r3, r3, #3
    4cc0:	3aff      	subs	r2, #255	; 0xff
    4cc2:	1099      	asrs	r1, r3, #2
    4cc4:	3aff      	subs	r2, #255	; 0xff
    4cc6:	408a      	lsls	r2, r1
    4cc8:	00db      	lsls	r3, r3, #3
    4cca:	6871      	ldr	r1, [r6, #4]
    4ccc:	199b      	adds	r3, r3, r6
    4cce:	430a      	orrs	r2, r1
    4cd0:	6899      	ldr	r1, [r3, #8]
    4cd2:	6072      	str	r2, [r6, #4]
    4cd4:	60e3      	str	r3, [r4, #12]
    4cd6:	60a1      	str	r1, [r4, #8]
    4cd8:	609c      	str	r4, [r3, #8]
    4cda:	0013      	movs	r3, r2
    4cdc:	60cc      	str	r4, [r1, #12]
    4cde:	2101      	movs	r1, #1
    4ce0:	1082      	asrs	r2, r0, #2
    4ce2:	4091      	lsls	r1, r2
    4ce4:	4299      	cmp	r1, r3
    4ce6:	d86f      	bhi.n	4dc8 <_malloc_r+0x1c8>
    4ce8:	420b      	tst	r3, r1
    4cea:	d105      	bne.n	4cf8 <_malloc_r+0xf8>
    4cec:	2203      	movs	r2, #3
    4cee:	4390      	bics	r0, r2
    4cf0:	0049      	lsls	r1, r1, #1
    4cf2:	3004      	adds	r0, #4
    4cf4:	420b      	tst	r3, r1
    4cf6:	d0fb      	beq.n	4cf0 <_malloc_r+0xf0>
    4cf8:	2303      	movs	r3, #3
    4cfa:	4698      	mov	r8, r3
    4cfc:	00c3      	lsls	r3, r0, #3
    4cfe:	4699      	mov	r9, r3
    4d00:	44b1      	add	r9, r6
    4d02:	46cc      	mov	ip, r9
    4d04:	4682      	mov	sl, r0
    4d06:	4663      	mov	r3, ip
    4d08:	68dc      	ldr	r4, [r3, #12]
    4d0a:	45a4      	cmp	ip, r4
    4d0c:	d107      	bne.n	4d1e <_malloc_r+0x11e>
    4d0e:	e157      	b.n	4fc0 <_malloc_r+0x3c0>
    4d10:	2a00      	cmp	r2, #0
    4d12:	db00      	blt.n	4d16 <_malloc_r+0x116>
    4d14:	e166      	b.n	4fe4 <_malloc_r+0x3e4>
    4d16:	68e4      	ldr	r4, [r4, #12]
    4d18:	45a4      	cmp	ip, r4
    4d1a:	d100      	bne.n	4d1e <_malloc_r+0x11e>
    4d1c:	e150      	b.n	4fc0 <_malloc_r+0x3c0>
    4d1e:	4642      	mov	r2, r8
    4d20:	6863      	ldr	r3, [r4, #4]
    4d22:	4393      	bics	r3, r2
    4d24:	1b5a      	subs	r2, r3, r5
    4d26:	2a0f      	cmp	r2, #15
    4d28:	ddf2      	ble.n	4d10 <_malloc_r+0x110>
    4d2a:	2001      	movs	r0, #1
    4d2c:	4680      	mov	r8, r0
    4d2e:	1961      	adds	r1, r4, r5
    4d30:	4305      	orrs	r5, r0
    4d32:	6065      	str	r5, [r4, #4]
    4d34:	68a0      	ldr	r0, [r4, #8]
    4d36:	68e5      	ldr	r5, [r4, #12]
    4d38:	3608      	adds	r6, #8
    4d3a:	60c5      	str	r5, [r0, #12]
    4d3c:	60a8      	str	r0, [r5, #8]
    4d3e:	4640      	mov	r0, r8
    4d40:	60f1      	str	r1, [r6, #12]
    4d42:	60b1      	str	r1, [r6, #8]
    4d44:	4310      	orrs	r0, r2
    4d46:	6048      	str	r0, [r1, #4]
    4d48:	60ce      	str	r6, [r1, #12]
    4d4a:	608e      	str	r6, [r1, #8]
    4d4c:	0038      	movs	r0, r7
    4d4e:	50e2      	str	r2, [r4, r3]
    4d50:	f000 fa54 	bl	51fc <__malloc_unlock>
    4d54:	0020      	movs	r0, r4
    4d56:	3008      	adds	r0, #8
    4d58:	e021      	b.n	4d9e <_malloc_r+0x19e>
    4d5a:	2910      	cmp	r1, #16
    4d5c:	d826      	bhi.n	4dac <_malloc_r+0x1ac>
    4d5e:	0038      	movs	r0, r7
    4d60:	f000 fa44 	bl	51ec <__malloc_lock>
    4d64:	2510      	movs	r5, #16
    4d66:	2318      	movs	r3, #24
    4d68:	2002      	movs	r0, #2
    4d6a:	4e8b      	ldr	r6, [pc, #556]	; (4f98 <_malloc_r+0x398>)
    4d6c:	18f3      	adds	r3, r6, r3
    4d6e:	001a      	movs	r2, r3
    4d70:	685c      	ldr	r4, [r3, #4]
    4d72:	3a08      	subs	r2, #8
    4d74:	4294      	cmp	r4, r2
    4d76:	d100      	bne.n	4d7a <_malloc_r+0x17a>
    4d78:	e12e      	b.n	4fd8 <_malloc_r+0x3d8>
    4d7a:	2303      	movs	r3, #3
    4d7c:	6862      	ldr	r2, [r4, #4]
    4d7e:	439a      	bics	r2, r3
    4d80:	0013      	movs	r3, r2
    4d82:	68e2      	ldr	r2, [r4, #12]
    4d84:	68a1      	ldr	r1, [r4, #8]
    4d86:	60ca      	str	r2, [r1, #12]
    4d88:	6091      	str	r1, [r2, #8]
    4d8a:	2201      	movs	r2, #1
    4d8c:	18e3      	adds	r3, r4, r3
    4d8e:	6859      	ldr	r1, [r3, #4]
    4d90:	0038      	movs	r0, r7
    4d92:	430a      	orrs	r2, r1
    4d94:	605a      	str	r2, [r3, #4]
    4d96:	f000 fa31 	bl	51fc <__malloc_unlock>
    4d9a:	0020      	movs	r0, r4
    4d9c:	3008      	adds	r0, #8
    4d9e:	b003      	add	sp, #12
    4da0:	bc3c      	pop	{r2, r3, r4, r5}
    4da2:	4690      	mov	r8, r2
    4da4:	4699      	mov	r9, r3
    4da6:	46a2      	mov	sl, r4
    4da8:	46ab      	mov	fp, r5
    4daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dac:	230c      	movs	r3, #12
    4dae:	2000      	movs	r0, #0
    4db0:	603b      	str	r3, [r7, #0]
    4db2:	e7f4      	b.n	4d9e <_malloc_r+0x19e>
    4db4:	2180      	movs	r1, #128	; 0x80
    4db6:	233f      	movs	r3, #63	; 0x3f
    4db8:	2040      	movs	r0, #64	; 0x40
    4dba:	0089      	lsls	r1, r1, #2
    4dbc:	4698      	mov	r8, r3
    4dbe:	e746      	b.n	4c4e <_malloc_r+0x4e>
    4dc0:	4640      	mov	r0, r8
    4dc2:	e764      	b.n	4c8e <_malloc_r+0x8e>
    4dc4:	464b      	mov	r3, r9
    4dc6:	e7e0      	b.n	4d8a <_malloc_r+0x18a>
    4dc8:	2303      	movs	r3, #3
    4dca:	68b4      	ldr	r4, [r6, #8]
    4dcc:	6862      	ldr	r2, [r4, #4]
    4dce:	439a      	bics	r2, r3
    4dd0:	4690      	mov	r8, r2
    4dd2:	42aa      	cmp	r2, r5
    4dd4:	d303      	bcc.n	4dde <_malloc_r+0x1de>
    4dd6:	1b53      	subs	r3, r2, r5
    4dd8:	2b0f      	cmp	r3, #15
    4dda:	dd00      	ble.n	4dde <_malloc_r+0x1de>
    4ddc:	e086      	b.n	4eec <_malloc_r+0x2ec>
    4dde:	0023      	movs	r3, r4
    4de0:	4443      	add	r3, r8
    4de2:	4a6f      	ldr	r2, [pc, #444]	; (4fa0 <_malloc_r+0x3a0>)
    4de4:	9301      	str	r3, [sp, #4]
    4de6:	4b6f      	ldr	r3, [pc, #444]	; (4fa4 <_malloc_r+0x3a4>)
    4de8:	4693      	mov	fp, r2
    4dea:	681b      	ldr	r3, [r3, #0]
    4dec:	6812      	ldr	r2, [r2, #0]
    4dee:	18eb      	adds	r3, r5, r3
    4df0:	3201      	adds	r2, #1
    4df2:	d100      	bne.n	4df6 <_malloc_r+0x1f6>
    4df4:	e168      	b.n	50c8 <_malloc_r+0x4c8>
    4df6:	4a6c      	ldr	r2, [pc, #432]	; (4fa8 <_malloc_r+0x3a8>)
    4df8:	4694      	mov	ip, r2
    4dfa:	4463      	add	r3, ip
    4dfc:	0b1b      	lsrs	r3, r3, #12
    4dfe:	031b      	lsls	r3, r3, #12
    4e00:	9300      	str	r3, [sp, #0]
    4e02:	9900      	ldr	r1, [sp, #0]
    4e04:	0038      	movs	r0, r7
    4e06:	f000 fa01 	bl	520c <_sbrk_r>
    4e0a:	0003      	movs	r3, r0
    4e0c:	4681      	mov	r9, r0
    4e0e:	3301      	adds	r3, #1
    4e10:	d061      	beq.n	4ed6 <_malloc_r+0x2d6>
    4e12:	9b01      	ldr	r3, [sp, #4]
    4e14:	4283      	cmp	r3, r0
    4e16:	d900      	bls.n	4e1a <_malloc_r+0x21a>
    4e18:	e0ff      	b.n	501a <_malloc_r+0x41a>
    4e1a:	4b64      	ldr	r3, [pc, #400]	; (4fac <_malloc_r+0x3ac>)
    4e1c:	9a00      	ldr	r2, [sp, #0]
    4e1e:	469a      	mov	sl, r3
    4e20:	681b      	ldr	r3, [r3, #0]
    4e22:	469c      	mov	ip, r3
    4e24:	4653      	mov	r3, sl
    4e26:	4462      	add	r2, ip
    4e28:	601a      	str	r2, [r3, #0]
    4e2a:	9b01      	ldr	r3, [sp, #4]
    4e2c:	0011      	movs	r1, r2
    4e2e:	4283      	cmp	r3, r0
    4e30:	d100      	bne.n	4e34 <_malloc_r+0x234>
    4e32:	e155      	b.n	50e0 <_malloc_r+0x4e0>
    4e34:	465b      	mov	r3, fp
    4e36:	681b      	ldr	r3, [r3, #0]
    4e38:	3301      	adds	r3, #1
    4e3a:	d100      	bne.n	4e3e <_malloc_r+0x23e>
    4e3c:	e16c      	b.n	5118 <_malloc_r+0x518>
    4e3e:	464b      	mov	r3, r9
    4e40:	9a01      	ldr	r2, [sp, #4]
    4e42:	1a9b      	subs	r3, r3, r2
    4e44:	1859      	adds	r1, r3, r1
    4e46:	4653      	mov	r3, sl
    4e48:	6019      	str	r1, [r3, #0]
    4e4a:	2307      	movs	r3, #7
    4e4c:	464a      	mov	r2, r9
    4e4e:	4013      	ands	r3, r2
    4e50:	d100      	bne.n	4e54 <_malloc_r+0x254>
    4e52:	e124      	b.n	509e <_malloc_r+0x49e>
    4e54:	2108      	movs	r1, #8
    4e56:	4689      	mov	r9, r1
    4e58:	4955      	ldr	r1, [pc, #340]	; (4fb0 <_malloc_r+0x3b0>)
    4e5a:	1ad2      	subs	r2, r2, r3
    4e5c:	4491      	add	r9, r2
    4e5e:	1acb      	subs	r3, r1, r3
    4e60:	9a00      	ldr	r2, [sp, #0]
    4e62:	0038      	movs	r0, r7
    4e64:	444a      	add	r2, r9
    4e66:	0511      	lsls	r1, r2, #20
    4e68:	0d09      	lsrs	r1, r1, #20
    4e6a:	1a5b      	subs	r3, r3, r1
    4e6c:	0019      	movs	r1, r3
    4e6e:	469b      	mov	fp, r3
    4e70:	f000 f9cc 	bl	520c <_sbrk_r>
    4e74:	1c43      	adds	r3, r0, #1
    4e76:	d100      	bne.n	4e7a <_malloc_r+0x27a>
    4e78:	e142      	b.n	5100 <_malloc_r+0x500>
    4e7a:	464b      	mov	r3, r9
    4e7c:	1ac0      	subs	r0, r0, r3
    4e7e:	2301      	movs	r3, #1
    4e80:	4458      	add	r0, fp
    4e82:	4318      	orrs	r0, r3
    4e84:	4653      	mov	r3, sl
    4e86:	681b      	ldr	r3, [r3, #0]
    4e88:	445b      	add	r3, fp
    4e8a:	0019      	movs	r1, r3
    4e8c:	4653      	mov	r3, sl
    4e8e:	6019      	str	r1, [r3, #0]
    4e90:	464b      	mov	r3, r9
    4e92:	60b3      	str	r3, [r6, #8]
    4e94:	6058      	str	r0, [r3, #4]
    4e96:	42b4      	cmp	r4, r6
    4e98:	d013      	beq.n	4ec2 <_malloc_r+0x2c2>
    4e9a:	4643      	mov	r3, r8
    4e9c:	2b0f      	cmp	r3, #15
    4e9e:	d800      	bhi.n	4ea2 <_malloc_r+0x2a2>
    4ea0:	e0e8      	b.n	5074 <_malloc_r+0x474>
    4ea2:	4643      	mov	r3, r8
    4ea4:	2207      	movs	r2, #7
    4ea6:	6860      	ldr	r0, [r4, #4]
    4ea8:	3b0c      	subs	r3, #12
    4eaa:	4393      	bics	r3, r2
    4eac:	3a06      	subs	r2, #6
    4eae:	4002      	ands	r2, r0
    4eb0:	2005      	movs	r0, #5
    4eb2:	431a      	orrs	r2, r3
    4eb4:	6062      	str	r2, [r4, #4]
    4eb6:	18e2      	adds	r2, r4, r3
    4eb8:	6050      	str	r0, [r2, #4]
    4eba:	6090      	str	r0, [r2, #8]
    4ebc:	2b0f      	cmp	r3, #15
    4ebe:	d900      	bls.n	4ec2 <_malloc_r+0x2c2>
    4ec0:	e122      	b.n	5108 <_malloc_r+0x508>
    4ec2:	4b3c      	ldr	r3, [pc, #240]	; (4fb4 <_malloc_r+0x3b4>)
    4ec4:	681a      	ldr	r2, [r3, #0]
    4ec6:	4291      	cmp	r1, r2
    4ec8:	d900      	bls.n	4ecc <_malloc_r+0x2cc>
    4eca:	6019      	str	r1, [r3, #0]
    4ecc:	4b3a      	ldr	r3, [pc, #232]	; (4fb8 <_malloc_r+0x3b8>)
    4ece:	681a      	ldr	r2, [r3, #0]
    4ed0:	4291      	cmp	r1, r2
    4ed2:	d900      	bls.n	4ed6 <_malloc_r+0x2d6>
    4ed4:	6019      	str	r1, [r3, #0]
    4ed6:	2303      	movs	r3, #3
    4ed8:	68b4      	ldr	r4, [r6, #8]
    4eda:	6862      	ldr	r2, [r4, #4]
    4edc:	439a      	bics	r2, r3
    4ede:	1b53      	subs	r3, r2, r5
    4ee0:	4295      	cmp	r5, r2
    4ee2:	d900      	bls.n	4ee6 <_malloc_r+0x2e6>
    4ee4:	e0c9      	b.n	507a <_malloc_r+0x47a>
    4ee6:	2b0f      	cmp	r3, #15
    4ee8:	dc00      	bgt.n	4eec <_malloc_r+0x2ec>
    4eea:	e0c6      	b.n	507a <_malloc_r+0x47a>
    4eec:	2201      	movs	r2, #1
    4eee:	0029      	movs	r1, r5
    4ef0:	4313      	orrs	r3, r2
    4ef2:	4311      	orrs	r1, r2
    4ef4:	1965      	adds	r5, r4, r5
    4ef6:	6061      	str	r1, [r4, #4]
    4ef8:	0038      	movs	r0, r7
    4efa:	60b5      	str	r5, [r6, #8]
    4efc:	606b      	str	r3, [r5, #4]
    4efe:	f000 f97d 	bl	51fc <__malloc_unlock>
    4f02:	0020      	movs	r0, r4
    4f04:	3008      	adds	r0, #8
    4f06:	e74a      	b.n	4d9e <_malloc_r+0x19e>
    4f08:	2814      	cmp	r0, #20
    4f0a:	d97a      	bls.n	5002 <_malloc_r+0x402>
    4f0c:	2854      	cmp	r0, #84	; 0x54
    4f0e:	d900      	bls.n	4f12 <_malloc_r+0x312>
    4f10:	e0ba      	b.n	5088 <_malloc_r+0x488>
    4f12:	236e      	movs	r3, #110	; 0x6e
    4f14:	4698      	mov	r8, r3
    4f16:	0b28      	lsrs	r0, r5, #12
    4f18:	4480      	add	r8, r0
    4f1a:	306f      	adds	r0, #111	; 0x6f
    4f1c:	00c1      	lsls	r1, r0, #3
    4f1e:	e696      	b.n	4c4e <_malloc_r+0x4e>
    4f20:	0a5a      	lsrs	r2, r3, #9
    4f22:	2a04      	cmp	r2, #4
    4f24:	d973      	bls.n	500e <_malloc_r+0x40e>
    4f26:	2a14      	cmp	r2, #20
    4f28:	d900      	bls.n	4f2c <_malloc_r+0x32c>
    4f2a:	e0d0      	b.n	50ce <_malloc_r+0x4ce>
    4f2c:	0011      	movs	r1, r2
    4f2e:	325c      	adds	r2, #92	; 0x5c
    4f30:	315b      	adds	r1, #91	; 0x5b
    4f32:	00d2      	lsls	r2, r2, #3
    4f34:	2308      	movs	r3, #8
    4f36:	425b      	negs	r3, r3
    4f38:	469c      	mov	ip, r3
    4f3a:	18b2      	adds	r2, r6, r2
    4f3c:	4494      	add	ip, r2
    4f3e:	4663      	mov	r3, ip
    4f40:	689a      	ldr	r2, [r3, #8]
    4f42:	2303      	movs	r3, #3
    4f44:	4698      	mov	r8, r3
    4f46:	4594      	cmp	ip, r2
    4f48:	d100      	bne.n	4f4c <_malloc_r+0x34c>
    4f4a:	e0ab      	b.n	50a4 <_malloc_r+0x4a4>
    4f4c:	4643      	mov	r3, r8
    4f4e:	6851      	ldr	r1, [r2, #4]
    4f50:	4399      	bics	r1, r3
    4f52:	4589      	cmp	r9, r1
    4f54:	d300      	bcc.n	4f58 <_malloc_r+0x358>
    4f56:	e095      	b.n	5084 <_malloc_r+0x484>
    4f58:	6892      	ldr	r2, [r2, #8]
    4f5a:	4594      	cmp	ip, r2
    4f5c:	d1f6      	bne.n	4f4c <_malloc_r+0x34c>
    4f5e:	4663      	mov	r3, ip
    4f60:	68da      	ldr	r2, [r3, #12]
    4f62:	6873      	ldr	r3, [r6, #4]
    4f64:	4661      	mov	r1, ip
    4f66:	60e2      	str	r2, [r4, #12]
    4f68:	60a1      	str	r1, [r4, #8]
    4f6a:	6094      	str	r4, [r2, #8]
    4f6c:	60cc      	str	r4, [r1, #12]
    4f6e:	e6b6      	b.n	4cde <_malloc_r+0xde>
    4f70:	2301      	movs	r3, #1
    4f72:	1960      	adds	r0, r4, r5
    4f74:	431d      	orrs	r5, r3
    4f76:	6065      	str	r5, [r4, #4]
    4f78:	6170      	str	r0, [r6, #20]
    4f7a:	6130      	str	r0, [r6, #16]
    4f7c:	60c2      	str	r2, [r0, #12]
    4f7e:	6082      	str	r2, [r0, #8]
    4f80:	001a      	movs	r2, r3
    4f82:	464b      	mov	r3, r9
    4f84:	430a      	orrs	r2, r1
    4f86:	6042      	str	r2, [r0, #4]
    4f88:	0038      	movs	r0, r7
    4f8a:	50e1      	str	r1, [r4, r3]
    4f8c:	f000 f936 	bl	51fc <__malloc_unlock>
    4f90:	0020      	movs	r0, r4
    4f92:	3008      	adds	r0, #8
    4f94:	e703      	b.n	4d9e <_malloc_r+0x19e>
    4f96:	46c0      	nop			; (mov r8, r8)
    4f98:	20000468 	.word	0x20000468
    4f9c:	000001ff 	.word	0x000001ff
    4fa0:	20000870 	.word	0x20000870
    4fa4:	200009d8 	.word	0x200009d8
    4fa8:	0000100f 	.word	0x0000100f
    4fac:	200009a8 	.word	0x200009a8
    4fb0:	00001008 	.word	0x00001008
    4fb4:	200009d0 	.word	0x200009d0
    4fb8:	200009d4 	.word	0x200009d4
    4fbc:	6873      	ldr	r3, [r6, #4]
    4fbe:	e68e      	b.n	4cde <_malloc_r+0xde>
    4fc0:	2308      	movs	r3, #8
    4fc2:	469b      	mov	fp, r3
    4fc4:	3b07      	subs	r3, #7
    4fc6:	44dc      	add	ip, fp
    4fc8:	469b      	mov	fp, r3
    4fca:	44da      	add	sl, fp
    4fcc:	4643      	mov	r3, r8
    4fce:	4652      	mov	r2, sl
    4fd0:	4213      	tst	r3, r2
    4fd2:	d000      	beq.n	4fd6 <_malloc_r+0x3d6>
    4fd4:	e697      	b.n	4d06 <_malloc_r+0x106>
    4fd6:	e037      	b.n	5048 <_malloc_r+0x448>
    4fd8:	68dc      	ldr	r4, [r3, #12]
    4fda:	3002      	adds	r0, #2
    4fdc:	42a3      	cmp	r3, r4
    4fde:	d100      	bne.n	4fe2 <_malloc_r+0x3e2>
    4fe0:	e655      	b.n	4c8e <_malloc_r+0x8e>
    4fe2:	e6ca      	b.n	4d7a <_malloc_r+0x17a>
    4fe4:	2201      	movs	r2, #1
    4fe6:	18e3      	adds	r3, r4, r3
    4fe8:	6859      	ldr	r1, [r3, #4]
    4fea:	0038      	movs	r0, r7
    4fec:	430a      	orrs	r2, r1
    4fee:	605a      	str	r2, [r3, #4]
    4ff0:	68e3      	ldr	r3, [r4, #12]
    4ff2:	68a2      	ldr	r2, [r4, #8]
    4ff4:	60d3      	str	r3, [r2, #12]
    4ff6:	609a      	str	r2, [r3, #8]
    4ff8:	f000 f900 	bl	51fc <__malloc_unlock>
    4ffc:	0020      	movs	r0, r4
    4ffe:	3008      	adds	r0, #8
    5000:	e6cd      	b.n	4d9e <_malloc_r+0x19e>
    5002:	235b      	movs	r3, #91	; 0x5b
    5004:	4698      	mov	r8, r3
    5006:	4480      	add	r8, r0
    5008:	305c      	adds	r0, #92	; 0x5c
    500a:	00c1      	lsls	r1, r0, #3
    500c:	e61f      	b.n	4c4e <_malloc_r+0x4e>
    500e:	099a      	lsrs	r2, r3, #6
    5010:	0011      	movs	r1, r2
    5012:	3239      	adds	r2, #57	; 0x39
    5014:	3138      	adds	r1, #56	; 0x38
    5016:	00d2      	lsls	r2, r2, #3
    5018:	e78c      	b.n	4f34 <_malloc_r+0x334>
    501a:	42b4      	cmp	r4, r6
    501c:	d000      	beq.n	5020 <_malloc_r+0x420>
    501e:	e75a      	b.n	4ed6 <_malloc_r+0x2d6>
    5020:	4b4f      	ldr	r3, [pc, #316]	; (5160 <_malloc_r+0x560>)
    5022:	9a00      	ldr	r2, [sp, #0]
    5024:	469a      	mov	sl, r3
    5026:	681b      	ldr	r3, [r3, #0]
    5028:	469c      	mov	ip, r3
    502a:	4653      	mov	r3, sl
    502c:	4462      	add	r2, ip
    502e:	0011      	movs	r1, r2
    5030:	601a      	str	r2, [r3, #0]
    5032:	e6ff      	b.n	4e34 <_malloc_r+0x234>
    5034:	2308      	movs	r3, #8
    5036:	425b      	negs	r3, r3
    5038:	469c      	mov	ip, r3
    503a:	44e1      	add	r9, ip
    503c:	464b      	mov	r3, r9
    503e:	689b      	ldr	r3, [r3, #8]
    5040:	3801      	subs	r0, #1
    5042:	4599      	cmp	r9, r3
    5044:	d000      	beq.n	5048 <_malloc_r+0x448>
    5046:	e084      	b.n	5152 <_malloc_r+0x552>
    5048:	4643      	mov	r3, r8
    504a:	4203      	tst	r3, r0
    504c:	d1f2      	bne.n	5034 <_malloc_r+0x434>
    504e:	6873      	ldr	r3, [r6, #4]
    5050:	438b      	bics	r3, r1
    5052:	6073      	str	r3, [r6, #4]
    5054:	0049      	lsls	r1, r1, #1
    5056:	4299      	cmp	r1, r3
    5058:	d900      	bls.n	505c <_malloc_r+0x45c>
    505a:	e6b5      	b.n	4dc8 <_malloc_r+0x1c8>
    505c:	2900      	cmp	r1, #0
    505e:	d100      	bne.n	5062 <_malloc_r+0x462>
    5060:	e6b2      	b.n	4dc8 <_malloc_r+0x1c8>
    5062:	4650      	mov	r0, sl
    5064:	420b      	tst	r3, r1
    5066:	d000      	beq.n	506a <_malloc_r+0x46a>
    5068:	e648      	b.n	4cfc <_malloc_r+0xfc>
    506a:	0049      	lsls	r1, r1, #1
    506c:	3004      	adds	r0, #4
    506e:	420b      	tst	r3, r1
    5070:	d0fb      	beq.n	506a <_malloc_r+0x46a>
    5072:	e643      	b.n	4cfc <_malloc_r+0xfc>
    5074:	2301      	movs	r3, #1
    5076:	464a      	mov	r2, r9
    5078:	6053      	str	r3, [r2, #4]
    507a:	0038      	movs	r0, r7
    507c:	f000 f8be 	bl	51fc <__malloc_unlock>
    5080:	2000      	movs	r0, #0
    5082:	e68c      	b.n	4d9e <_malloc_r+0x19e>
    5084:	4694      	mov	ip, r2
    5086:	e76a      	b.n	4f5e <_malloc_r+0x35e>
    5088:	23aa      	movs	r3, #170	; 0xaa
    508a:	005b      	lsls	r3, r3, #1
    508c:	4298      	cmp	r0, r3
    508e:	d811      	bhi.n	50b4 <_malloc_r+0x4b4>
    5090:	3bdd      	subs	r3, #221	; 0xdd
    5092:	4698      	mov	r8, r3
    5094:	0be8      	lsrs	r0, r5, #15
    5096:	4480      	add	r8, r0
    5098:	3078      	adds	r0, #120	; 0x78
    509a:	00c1      	lsls	r1, r0, #3
    509c:	e5d7      	b.n	4c4e <_malloc_r+0x4e>
    509e:	2380      	movs	r3, #128	; 0x80
    50a0:	015b      	lsls	r3, r3, #5
    50a2:	e6dd      	b.n	4e60 <_malloc_r+0x260>
    50a4:	1089      	asrs	r1, r1, #2
    50a6:	3b02      	subs	r3, #2
    50a8:	408b      	lsls	r3, r1
    50aa:	6872      	ldr	r2, [r6, #4]
    50ac:	4313      	orrs	r3, r2
    50ae:	6073      	str	r3, [r6, #4]
    50b0:	4662      	mov	r2, ip
    50b2:	e757      	b.n	4f64 <_malloc_r+0x364>
    50b4:	4b2b      	ldr	r3, [pc, #172]	; (5164 <_malloc_r+0x564>)
    50b6:	4298      	cmp	r0, r3
    50b8:	d81c      	bhi.n	50f4 <_malloc_r+0x4f4>
    50ba:	237c      	movs	r3, #124	; 0x7c
    50bc:	4698      	mov	r8, r3
    50be:	0ca8      	lsrs	r0, r5, #18
    50c0:	4480      	add	r8, r0
    50c2:	307d      	adds	r0, #125	; 0x7d
    50c4:	00c1      	lsls	r1, r0, #3
    50c6:	e5c2      	b.n	4c4e <_malloc_r+0x4e>
    50c8:	3310      	adds	r3, #16
    50ca:	9300      	str	r3, [sp, #0]
    50cc:	e699      	b.n	4e02 <_malloc_r+0x202>
    50ce:	2a54      	cmp	r2, #84	; 0x54
    50d0:	d826      	bhi.n	5120 <_malloc_r+0x520>
    50d2:	464b      	mov	r3, r9
    50d4:	0b1a      	lsrs	r2, r3, #12
    50d6:	0011      	movs	r1, r2
    50d8:	326f      	adds	r2, #111	; 0x6f
    50da:	316e      	adds	r1, #110	; 0x6e
    50dc:	00d2      	lsls	r2, r2, #3
    50de:	e729      	b.n	4f34 <_malloc_r+0x334>
    50e0:	051b      	lsls	r3, r3, #20
    50e2:	d000      	beq.n	50e6 <_malloc_r+0x4e6>
    50e4:	e6a6      	b.n	4e34 <_malloc_r+0x234>
    50e6:	2001      	movs	r0, #1
    50e8:	9b00      	ldr	r3, [sp, #0]
    50ea:	68b2      	ldr	r2, [r6, #8]
    50ec:	4443      	add	r3, r8
    50ee:	4303      	orrs	r3, r0
    50f0:	6053      	str	r3, [r2, #4]
    50f2:	e6e6      	b.n	4ec2 <_malloc_r+0x2c2>
    50f4:	21fe      	movs	r1, #254	; 0xfe
    50f6:	237e      	movs	r3, #126	; 0x7e
    50f8:	207f      	movs	r0, #127	; 0x7f
    50fa:	0089      	lsls	r1, r1, #2
    50fc:	4698      	mov	r8, r3
    50fe:	e5a6      	b.n	4c4e <_malloc_r+0x4e>
    5100:	2300      	movs	r3, #0
    5102:	2001      	movs	r0, #1
    5104:	469b      	mov	fp, r3
    5106:	e6bd      	b.n	4e84 <_malloc_r+0x284>
    5108:	0021      	movs	r1, r4
    510a:	0038      	movs	r0, r7
    510c:	3108      	adds	r1, #8
    510e:	f000 f90d 	bl	532c <_free_r>
    5112:	4653      	mov	r3, sl
    5114:	6819      	ldr	r1, [r3, #0]
    5116:	e6d4      	b.n	4ec2 <_malloc_r+0x2c2>
    5118:	465b      	mov	r3, fp
    511a:	464a      	mov	r2, r9
    511c:	601a      	str	r2, [r3, #0]
    511e:	e694      	b.n	4e4a <_malloc_r+0x24a>
    5120:	21aa      	movs	r1, #170	; 0xaa
    5122:	0049      	lsls	r1, r1, #1
    5124:	428a      	cmp	r2, r1
    5126:	d806      	bhi.n	5136 <_malloc_r+0x536>
    5128:	464b      	mov	r3, r9
    512a:	0bda      	lsrs	r2, r3, #15
    512c:	0011      	movs	r1, r2
    512e:	3278      	adds	r2, #120	; 0x78
    5130:	3177      	adds	r1, #119	; 0x77
    5132:	00d2      	lsls	r2, r2, #3
    5134:	e6fe      	b.n	4f34 <_malloc_r+0x334>
    5136:	490b      	ldr	r1, [pc, #44]	; (5164 <_malloc_r+0x564>)
    5138:	428a      	cmp	r2, r1
    513a:	d806      	bhi.n	514a <_malloc_r+0x54a>
    513c:	464b      	mov	r3, r9
    513e:	0c9a      	lsrs	r2, r3, #18
    5140:	0011      	movs	r1, r2
    5142:	327d      	adds	r2, #125	; 0x7d
    5144:	317c      	adds	r1, #124	; 0x7c
    5146:	00d2      	lsls	r2, r2, #3
    5148:	e6f4      	b.n	4f34 <_malloc_r+0x334>
    514a:	22fe      	movs	r2, #254	; 0xfe
    514c:	217e      	movs	r1, #126	; 0x7e
    514e:	0092      	lsls	r2, r2, #2
    5150:	e6f0      	b.n	4f34 <_malloc_r+0x334>
    5152:	6873      	ldr	r3, [r6, #4]
    5154:	e77e      	b.n	5054 <_malloc_r+0x454>
    5156:	002b      	movs	r3, r5
    5158:	08e8      	lsrs	r0, r5, #3
    515a:	3308      	adds	r3, #8
    515c:	e605      	b.n	4d6a <_malloc_r+0x16a>
    515e:	46c0      	nop			; (mov r8, r8)
    5160:	200009a8 	.word	0x200009a8
    5164:	00000554 	.word	0x00000554

00005168 <memcpy>:
    5168:	b5f0      	push	{r4, r5, r6, r7, lr}
    516a:	0005      	movs	r5, r0
    516c:	2a0f      	cmp	r2, #15
    516e:	d92f      	bls.n	51d0 <memcpy+0x68>
    5170:	000b      	movs	r3, r1
    5172:	4303      	orrs	r3, r0
    5174:	079b      	lsls	r3, r3, #30
    5176:	d134      	bne.n	51e2 <memcpy+0x7a>
    5178:	0016      	movs	r6, r2
    517a:	000c      	movs	r4, r1
    517c:	0003      	movs	r3, r0
    517e:	3e10      	subs	r6, #16
    5180:	0935      	lsrs	r5, r6, #4
    5182:	3501      	adds	r5, #1
    5184:	012d      	lsls	r5, r5, #4
    5186:	1945      	adds	r5, r0, r5
    5188:	6827      	ldr	r7, [r4, #0]
    518a:	601f      	str	r7, [r3, #0]
    518c:	6867      	ldr	r7, [r4, #4]
    518e:	605f      	str	r7, [r3, #4]
    5190:	68a7      	ldr	r7, [r4, #8]
    5192:	609f      	str	r7, [r3, #8]
    5194:	68e7      	ldr	r7, [r4, #12]
    5196:	3410      	adds	r4, #16
    5198:	60df      	str	r7, [r3, #12]
    519a:	3310      	adds	r3, #16
    519c:	429d      	cmp	r5, r3
    519e:	d1f3      	bne.n	5188 <memcpy+0x20>
    51a0:	230f      	movs	r3, #15
    51a2:	439e      	bics	r6, r3
    51a4:	3610      	adds	r6, #16
    51a6:	1985      	adds	r5, r0, r6
    51a8:	1989      	adds	r1, r1, r6
    51aa:	4013      	ands	r3, r2
    51ac:	2b03      	cmp	r3, #3
    51ae:	d91a      	bls.n	51e6 <memcpy+0x7e>
    51b0:	1f1e      	subs	r6, r3, #4
    51b2:	2300      	movs	r3, #0
    51b4:	08b4      	lsrs	r4, r6, #2
    51b6:	3401      	adds	r4, #1
    51b8:	00a4      	lsls	r4, r4, #2
    51ba:	58cf      	ldr	r7, [r1, r3]
    51bc:	50ef      	str	r7, [r5, r3]
    51be:	3304      	adds	r3, #4
    51c0:	42a3      	cmp	r3, r4
    51c2:	d1fa      	bne.n	51ba <memcpy+0x52>
    51c4:	2403      	movs	r4, #3
    51c6:	43a6      	bics	r6, r4
    51c8:	1d33      	adds	r3, r6, #4
    51ca:	4022      	ands	r2, r4
    51cc:	18c9      	adds	r1, r1, r3
    51ce:	18ed      	adds	r5, r5, r3
    51d0:	2a00      	cmp	r2, #0
    51d2:	d005      	beq.n	51e0 <memcpy+0x78>
    51d4:	2300      	movs	r3, #0
    51d6:	5ccc      	ldrb	r4, [r1, r3]
    51d8:	54ec      	strb	r4, [r5, r3]
    51da:	3301      	adds	r3, #1
    51dc:	4293      	cmp	r3, r2
    51de:	d1fa      	bne.n	51d6 <memcpy+0x6e>
    51e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51e2:	0005      	movs	r5, r0
    51e4:	e7f6      	b.n	51d4 <memcpy+0x6c>
    51e6:	001a      	movs	r2, r3
    51e8:	e7f2      	b.n	51d0 <memcpy+0x68>
    51ea:	46c0      	nop			; (mov r8, r8)

000051ec <__malloc_lock>:
    51ec:	b510      	push	{r4, lr}
    51ee:	4802      	ldr	r0, [pc, #8]	; (51f8 <__malloc_lock+0xc>)
    51f0:	f000 f97a 	bl	54e8 <__retarget_lock_acquire_recursive>
    51f4:	bd10      	pop	{r4, pc}
    51f6:	46c0      	nop			; (mov r8, r8)
    51f8:	20000cc4 	.word	0x20000cc4

000051fc <__malloc_unlock>:
    51fc:	b510      	push	{r4, lr}
    51fe:	4802      	ldr	r0, [pc, #8]	; (5208 <__malloc_unlock+0xc>)
    5200:	f000 f974 	bl	54ec <__retarget_lock_release_recursive>
    5204:	bd10      	pop	{r4, pc}
    5206:	46c0      	nop			; (mov r8, r8)
    5208:	20000cc4 	.word	0x20000cc4

0000520c <_sbrk_r>:
    520c:	2300      	movs	r3, #0
    520e:	b570      	push	{r4, r5, r6, lr}
    5210:	4c06      	ldr	r4, [pc, #24]	; (522c <_sbrk_r+0x20>)
    5212:	0005      	movs	r5, r0
    5214:	0008      	movs	r0, r1
    5216:	6023      	str	r3, [r4, #0]
    5218:	f7fb fe18 	bl	e4c <_sbrk>
    521c:	1c43      	adds	r3, r0, #1
    521e:	d000      	beq.n	5222 <_sbrk_r+0x16>
    5220:	bd70      	pop	{r4, r5, r6, pc}
    5222:	6823      	ldr	r3, [r4, #0]
    5224:	2b00      	cmp	r3, #0
    5226:	d0fb      	beq.n	5220 <_sbrk_r+0x14>
    5228:	602b      	str	r3, [r5, #0]
    522a:	e7f9      	b.n	5220 <_sbrk_r+0x14>
    522c:	20000cd8 	.word	0x20000cd8

00005230 <register_fini>:
    5230:	4b03      	ldr	r3, [pc, #12]	; (5240 <register_fini+0x10>)
    5232:	b510      	push	{r4, lr}
    5234:	2b00      	cmp	r3, #0
    5236:	d002      	beq.n	523e <register_fini+0xe>
    5238:	4802      	ldr	r0, [pc, #8]	; (5244 <register_fini+0x14>)
    523a:	f000 f805 	bl	5248 <atexit>
    523e:	bd10      	pop	{r4, pc}
    5240:	00000000 	.word	0x00000000
    5244:	00005259 	.word	0x00005259

00005248 <atexit>:
    5248:	b510      	push	{r4, lr}
    524a:	0001      	movs	r1, r0
    524c:	2300      	movs	r3, #0
    524e:	2200      	movs	r2, #0
    5250:	2000      	movs	r0, #0
    5252:	f000 f94d 	bl	54f0 <__register_exitproc>
    5256:	bd10      	pop	{r4, pc}

00005258 <__libc_fini_array>:
    5258:	b570      	push	{r4, r5, r6, lr}
    525a:	4b09      	ldr	r3, [pc, #36]	; (5280 <__libc_fini_array+0x28>)
    525c:	4c09      	ldr	r4, [pc, #36]	; (5284 <__libc_fini_array+0x2c>)
    525e:	1ae4      	subs	r4, r4, r3
    5260:	10a4      	asrs	r4, r4, #2
    5262:	d009      	beq.n	5278 <__libc_fini_array+0x20>
    5264:	4a08      	ldr	r2, [pc, #32]	; (5288 <__libc_fini_array+0x30>)
    5266:	18a5      	adds	r5, r4, r2
    5268:	00ad      	lsls	r5, r5, #2
    526a:	18ed      	adds	r5, r5, r3
    526c:	682b      	ldr	r3, [r5, #0]
    526e:	3c01      	subs	r4, #1
    5270:	4798      	blx	r3
    5272:	3d04      	subs	r5, #4
    5274:	2c00      	cmp	r4, #0
    5276:	d1f9      	bne.n	526c <__libc_fini_array+0x14>
    5278:	f000 fb5e 	bl	5938 <_fini>
    527c:	bd70      	pop	{r4, r5, r6, pc}
    527e:	46c0      	nop			; (mov r8, r8)
    5280:	00005944 	.word	0x00005944
    5284:	00005948 	.word	0x00005948
    5288:	3fffffff 	.word	0x3fffffff

0000528c <_malloc_trim_r>:
    528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    528e:	000c      	movs	r4, r1
    5290:	0006      	movs	r6, r0
    5292:	f7ff ffab 	bl	51ec <__malloc_lock>
    5296:	4f20      	ldr	r7, [pc, #128]	; (5318 <_malloc_trim_r+0x8c>)
    5298:	68bb      	ldr	r3, [r7, #8]
    529a:	685d      	ldr	r5, [r3, #4]
    529c:	2303      	movs	r3, #3
    529e:	439d      	bics	r5, r3
    52a0:	4b1e      	ldr	r3, [pc, #120]	; (531c <_malloc_trim_r+0x90>)
    52a2:	1b2c      	subs	r4, r5, r4
    52a4:	469c      	mov	ip, r3
    52a6:	4464      	add	r4, ip
    52a8:	0b24      	lsrs	r4, r4, #12
    52aa:	4b1d      	ldr	r3, [pc, #116]	; (5320 <_malloc_trim_r+0x94>)
    52ac:	3c01      	subs	r4, #1
    52ae:	0324      	lsls	r4, r4, #12
    52b0:	429c      	cmp	r4, r3
    52b2:	dd07      	ble.n	52c4 <_malloc_trim_r+0x38>
    52b4:	2100      	movs	r1, #0
    52b6:	0030      	movs	r0, r6
    52b8:	f7ff ffa8 	bl	520c <_sbrk_r>
    52bc:	68bb      	ldr	r3, [r7, #8]
    52be:	195b      	adds	r3, r3, r5
    52c0:	4298      	cmp	r0, r3
    52c2:	d004      	beq.n	52ce <_malloc_trim_r+0x42>
    52c4:	0030      	movs	r0, r6
    52c6:	f7ff ff99 	bl	51fc <__malloc_unlock>
    52ca:	2000      	movs	r0, #0
    52cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52ce:	4261      	negs	r1, r4
    52d0:	0030      	movs	r0, r6
    52d2:	f7ff ff9b 	bl	520c <_sbrk_r>
    52d6:	1c43      	adds	r3, r0, #1
    52d8:	d00d      	beq.n	52f6 <_malloc_trim_r+0x6a>
    52da:	2201      	movs	r2, #1
    52dc:	68bb      	ldr	r3, [r7, #8]
    52de:	1b2d      	subs	r5, r5, r4
    52e0:	4315      	orrs	r5, r2
    52e2:	605d      	str	r5, [r3, #4]
    52e4:	4b0f      	ldr	r3, [pc, #60]	; (5324 <_malloc_trim_r+0x98>)
    52e6:	0030      	movs	r0, r6
    52e8:	681a      	ldr	r2, [r3, #0]
    52ea:	1b14      	subs	r4, r2, r4
    52ec:	601c      	str	r4, [r3, #0]
    52ee:	f7ff ff85 	bl	51fc <__malloc_unlock>
    52f2:	2001      	movs	r0, #1
    52f4:	e7ea      	b.n	52cc <_malloc_trim_r+0x40>
    52f6:	2100      	movs	r1, #0
    52f8:	0030      	movs	r0, r6
    52fa:	f7ff ff87 	bl	520c <_sbrk_r>
    52fe:	68ba      	ldr	r2, [r7, #8]
    5300:	1a83      	subs	r3, r0, r2
    5302:	2b0f      	cmp	r3, #15
    5304:	ddde      	ble.n	52c4 <_malloc_trim_r+0x38>
    5306:	4908      	ldr	r1, [pc, #32]	; (5328 <_malloc_trim_r+0x9c>)
    5308:	6809      	ldr	r1, [r1, #0]
    530a:	1a40      	subs	r0, r0, r1
    530c:	4905      	ldr	r1, [pc, #20]	; (5324 <_malloc_trim_r+0x98>)
    530e:	6008      	str	r0, [r1, #0]
    5310:	2101      	movs	r1, #1
    5312:	430b      	orrs	r3, r1
    5314:	6053      	str	r3, [r2, #4]
    5316:	e7d5      	b.n	52c4 <_malloc_trim_r+0x38>
    5318:	20000468 	.word	0x20000468
    531c:	00000fef 	.word	0x00000fef
    5320:	00000fff 	.word	0x00000fff
    5324:	200009a8 	.word	0x200009a8
    5328:	20000870 	.word	0x20000870

0000532c <_free_r>:
    532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    532e:	0004      	movs	r4, r0
    5330:	1e0d      	subs	r5, r1, #0
    5332:	d03c      	beq.n	53ae <_free_r+0x82>
    5334:	f7ff ff5a 	bl	51ec <__malloc_lock>
    5338:	0029      	movs	r1, r5
    533a:	3908      	subs	r1, #8
    533c:	6848      	ldr	r0, [r1, #4]
    533e:	2301      	movs	r3, #1
    5340:	0005      	movs	r5, r0
    5342:	2603      	movs	r6, #3
    5344:	439d      	bics	r5, r3
    5346:	194a      	adds	r2, r1, r5
    5348:	469c      	mov	ip, r3
    534a:	4f61      	ldr	r7, [pc, #388]	; (54d0 <_free_r+0x1a4>)
    534c:	6853      	ldr	r3, [r2, #4]
    534e:	43b3      	bics	r3, r6
    5350:	68be      	ldr	r6, [r7, #8]
    5352:	42b2      	cmp	r2, r6
    5354:	d056      	beq.n	5404 <_free_r+0xd8>
    5356:	4666      	mov	r6, ip
    5358:	6053      	str	r3, [r2, #4]
    535a:	4206      	tst	r6, r0
    535c:	d10a      	bne.n	5374 <_free_r+0x48>
    535e:	003e      	movs	r6, r7
    5360:	6808      	ldr	r0, [r1, #0]
    5362:	3608      	adds	r6, #8
    5364:	1a09      	subs	r1, r1, r0
    5366:	182d      	adds	r5, r5, r0
    5368:	6888      	ldr	r0, [r1, #8]
    536a:	42b0      	cmp	r0, r6
    536c:	d065      	beq.n	543a <_free_r+0x10e>
    536e:	68ce      	ldr	r6, [r1, #12]
    5370:	60c6      	str	r6, [r0, #12]
    5372:	60b0      	str	r0, [r6, #8]
    5374:	2001      	movs	r0, #1
    5376:	18d6      	adds	r6, r2, r3
    5378:	6876      	ldr	r6, [r6, #4]
    537a:	4206      	tst	r6, r0
    537c:	d033      	beq.n	53e6 <_free_r+0xba>
    537e:	4b55      	ldr	r3, [pc, #340]	; (54d4 <_free_r+0x1a8>)
    5380:	4328      	orrs	r0, r5
    5382:	6048      	str	r0, [r1, #4]
    5384:	514d      	str	r5, [r1, r5]
    5386:	429d      	cmp	r5, r3
    5388:	d812      	bhi.n	53b0 <_free_r+0x84>
    538a:	08ed      	lsrs	r5, r5, #3
    538c:	3bff      	subs	r3, #255	; 0xff
    538e:	10aa      	asrs	r2, r5, #2
    5390:	3bff      	subs	r3, #255	; 0xff
    5392:	4093      	lsls	r3, r2
    5394:	687a      	ldr	r2, [r7, #4]
    5396:	00ed      	lsls	r5, r5, #3
    5398:	4313      	orrs	r3, r2
    539a:	607b      	str	r3, [r7, #4]
    539c:	19ef      	adds	r7, r5, r7
    539e:	68bb      	ldr	r3, [r7, #8]
    53a0:	60cf      	str	r7, [r1, #12]
    53a2:	608b      	str	r3, [r1, #8]
    53a4:	60b9      	str	r1, [r7, #8]
    53a6:	60d9      	str	r1, [r3, #12]
    53a8:	0020      	movs	r0, r4
    53aa:	f7ff ff27 	bl	51fc <__malloc_unlock>
    53ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53b0:	0a68      	lsrs	r0, r5, #9
    53b2:	2804      	cmp	r0, #4
    53b4:	d850      	bhi.n	5458 <_free_r+0x12c>
    53b6:	09a8      	lsrs	r0, r5, #6
    53b8:	0002      	movs	r2, r0
    53ba:	3039      	adds	r0, #57	; 0x39
    53bc:	3238      	adds	r2, #56	; 0x38
    53be:	00c0      	lsls	r0, r0, #3
    53c0:	1838      	adds	r0, r7, r0
    53c2:	3808      	subs	r0, #8
    53c4:	6883      	ldr	r3, [r0, #8]
    53c6:	2603      	movs	r6, #3
    53c8:	4298      	cmp	r0, r3
    53ca:	d04c      	beq.n	5466 <_free_r+0x13a>
    53cc:	685a      	ldr	r2, [r3, #4]
    53ce:	43b2      	bics	r2, r6
    53d0:	4295      	cmp	r5, r2
    53d2:	d230      	bcs.n	5436 <_free_r+0x10a>
    53d4:	689b      	ldr	r3, [r3, #8]
    53d6:	4298      	cmp	r0, r3
    53d8:	d1f8      	bne.n	53cc <_free_r+0xa0>
    53da:	68c3      	ldr	r3, [r0, #12]
    53dc:	60cb      	str	r3, [r1, #12]
    53de:	6088      	str	r0, [r1, #8]
    53e0:	6099      	str	r1, [r3, #8]
    53e2:	60c1      	str	r1, [r0, #12]
    53e4:	e7e0      	b.n	53a8 <_free_r+0x7c>
    53e6:	18ed      	adds	r5, r5, r3
    53e8:	4e3b      	ldr	r6, [pc, #236]	; (54d8 <_free_r+0x1ac>)
    53ea:	6893      	ldr	r3, [r2, #8]
    53ec:	42b3      	cmp	r3, r6
    53ee:	d042      	beq.n	5476 <_free_r+0x14a>
    53f0:	68d2      	ldr	r2, [r2, #12]
    53f2:	4328      	orrs	r0, r5
    53f4:	60da      	str	r2, [r3, #12]
    53f6:	6093      	str	r3, [r2, #8]
    53f8:	4b36      	ldr	r3, [pc, #216]	; (54d4 <_free_r+0x1a8>)
    53fa:	6048      	str	r0, [r1, #4]
    53fc:	514d      	str	r5, [r1, r5]
    53fe:	429d      	cmp	r5, r3
    5400:	d8d6      	bhi.n	53b0 <_free_r+0x84>
    5402:	e7c2      	b.n	538a <_free_r+0x5e>
    5404:	4662      	mov	r2, ip
    5406:	18eb      	adds	r3, r5, r3
    5408:	4202      	tst	r2, r0
    540a:	d106      	bne.n	541a <_free_r+0xee>
    540c:	680a      	ldr	r2, [r1, #0]
    540e:	1a89      	subs	r1, r1, r2
    5410:	6888      	ldr	r0, [r1, #8]
    5412:	189b      	adds	r3, r3, r2
    5414:	68ca      	ldr	r2, [r1, #12]
    5416:	60c2      	str	r2, [r0, #12]
    5418:	6090      	str	r0, [r2, #8]
    541a:	2201      	movs	r2, #1
    541c:	431a      	orrs	r2, r3
    541e:	604a      	str	r2, [r1, #4]
    5420:	4a2e      	ldr	r2, [pc, #184]	; (54dc <_free_r+0x1b0>)
    5422:	60b9      	str	r1, [r7, #8]
    5424:	6812      	ldr	r2, [r2, #0]
    5426:	4293      	cmp	r3, r2
    5428:	d3be      	bcc.n	53a8 <_free_r+0x7c>
    542a:	4b2d      	ldr	r3, [pc, #180]	; (54e0 <_free_r+0x1b4>)
    542c:	0020      	movs	r0, r4
    542e:	6819      	ldr	r1, [r3, #0]
    5430:	f7ff ff2c 	bl	528c <_malloc_trim_r>
    5434:	e7b8      	b.n	53a8 <_free_r+0x7c>
    5436:	0018      	movs	r0, r3
    5438:	e7cf      	b.n	53da <_free_r+0xae>
    543a:	4666      	mov	r6, ip
    543c:	18d0      	adds	r0, r2, r3
    543e:	6840      	ldr	r0, [r0, #4]
    5440:	4230      	tst	r0, r6
    5442:	d13f      	bne.n	54c4 <_free_r+0x198>
    5444:	6890      	ldr	r0, [r2, #8]
    5446:	195d      	adds	r5, r3, r5
    5448:	68d3      	ldr	r3, [r2, #12]
    544a:	60c3      	str	r3, [r0, #12]
    544c:	6098      	str	r0, [r3, #8]
    544e:	4663      	mov	r3, ip
    5450:	432b      	orrs	r3, r5
    5452:	604b      	str	r3, [r1, #4]
    5454:	514d      	str	r5, [r1, r5]
    5456:	e7a7      	b.n	53a8 <_free_r+0x7c>
    5458:	2814      	cmp	r0, #20
    545a:	d814      	bhi.n	5486 <_free_r+0x15a>
    545c:	0002      	movs	r2, r0
    545e:	305c      	adds	r0, #92	; 0x5c
    5460:	325b      	adds	r2, #91	; 0x5b
    5462:	00c0      	lsls	r0, r0, #3
    5464:	e7ac      	b.n	53c0 <_free_r+0x94>
    5466:	2301      	movs	r3, #1
    5468:	1092      	asrs	r2, r2, #2
    546a:	4093      	lsls	r3, r2
    546c:	687a      	ldr	r2, [r7, #4]
    546e:	4313      	orrs	r3, r2
    5470:	607b      	str	r3, [r7, #4]
    5472:	0003      	movs	r3, r0
    5474:	e7b2      	b.n	53dc <_free_r+0xb0>
    5476:	4328      	orrs	r0, r5
    5478:	60d9      	str	r1, [r3, #12]
    547a:	6099      	str	r1, [r3, #8]
    547c:	60cb      	str	r3, [r1, #12]
    547e:	608b      	str	r3, [r1, #8]
    5480:	6048      	str	r0, [r1, #4]
    5482:	514d      	str	r5, [r1, r5]
    5484:	e790      	b.n	53a8 <_free_r+0x7c>
    5486:	2854      	cmp	r0, #84	; 0x54
    5488:	d805      	bhi.n	5496 <_free_r+0x16a>
    548a:	0b28      	lsrs	r0, r5, #12
    548c:	0002      	movs	r2, r0
    548e:	306f      	adds	r0, #111	; 0x6f
    5490:	326e      	adds	r2, #110	; 0x6e
    5492:	00c0      	lsls	r0, r0, #3
    5494:	e794      	b.n	53c0 <_free_r+0x94>
    5496:	22aa      	movs	r2, #170	; 0xaa
    5498:	0052      	lsls	r2, r2, #1
    549a:	4290      	cmp	r0, r2
    549c:	d805      	bhi.n	54aa <_free_r+0x17e>
    549e:	0be8      	lsrs	r0, r5, #15
    54a0:	0002      	movs	r2, r0
    54a2:	3078      	adds	r0, #120	; 0x78
    54a4:	3277      	adds	r2, #119	; 0x77
    54a6:	00c0      	lsls	r0, r0, #3
    54a8:	e78a      	b.n	53c0 <_free_r+0x94>
    54aa:	4a0e      	ldr	r2, [pc, #56]	; (54e4 <_free_r+0x1b8>)
    54ac:	4290      	cmp	r0, r2
    54ae:	d805      	bhi.n	54bc <_free_r+0x190>
    54b0:	0ca8      	lsrs	r0, r5, #18
    54b2:	0002      	movs	r2, r0
    54b4:	307d      	adds	r0, #125	; 0x7d
    54b6:	327c      	adds	r2, #124	; 0x7c
    54b8:	00c0      	lsls	r0, r0, #3
    54ba:	e781      	b.n	53c0 <_free_r+0x94>
    54bc:	20fe      	movs	r0, #254	; 0xfe
    54be:	227e      	movs	r2, #126	; 0x7e
    54c0:	0080      	lsls	r0, r0, #2
    54c2:	e77d      	b.n	53c0 <_free_r+0x94>
    54c4:	4663      	mov	r3, ip
    54c6:	432b      	orrs	r3, r5
    54c8:	604b      	str	r3, [r1, #4]
    54ca:	6015      	str	r5, [r2, #0]
    54cc:	e76c      	b.n	53a8 <_free_r+0x7c>
    54ce:	46c0      	nop			; (mov r8, r8)
    54d0:	20000468 	.word	0x20000468
    54d4:	000001ff 	.word	0x000001ff
    54d8:	20000470 	.word	0x20000470
    54dc:	20000874 	.word	0x20000874
    54e0:	200009d8 	.word	0x200009d8
    54e4:	00000554 	.word	0x00000554

000054e8 <__retarget_lock_acquire_recursive>:
    54e8:	4770      	bx	lr
    54ea:	46c0      	nop			; (mov r8, r8)

000054ec <__retarget_lock_release_recursive>:
    54ec:	4770      	bx	lr
    54ee:	46c0      	nop			; (mov r8, r8)

000054f0 <__register_exitproc>:
    54f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    54f2:	464e      	mov	r6, r9
    54f4:	4645      	mov	r5, r8
    54f6:	46de      	mov	lr, fp
    54f8:	4657      	mov	r7, sl
    54fa:	b5e0      	push	{r5, r6, r7, lr}
    54fc:	4d36      	ldr	r5, [pc, #216]	; (55d8 <__register_exitproc+0xe8>)
    54fe:	b083      	sub	sp, #12
    5500:	0006      	movs	r6, r0
    5502:	6828      	ldr	r0, [r5, #0]
    5504:	4698      	mov	r8, r3
    5506:	000f      	movs	r7, r1
    5508:	4691      	mov	r9, r2
    550a:	f7ff ffed 	bl	54e8 <__retarget_lock_acquire_recursive>
    550e:	4b33      	ldr	r3, [pc, #204]	; (55dc <__register_exitproc+0xec>)
    5510:	681c      	ldr	r4, [r3, #0]
    5512:	23a4      	movs	r3, #164	; 0xa4
    5514:	005b      	lsls	r3, r3, #1
    5516:	58e0      	ldr	r0, [r4, r3]
    5518:	2800      	cmp	r0, #0
    551a:	d052      	beq.n	55c2 <__register_exitproc+0xd2>
    551c:	6843      	ldr	r3, [r0, #4]
    551e:	2b1f      	cmp	r3, #31
    5520:	dc13      	bgt.n	554a <__register_exitproc+0x5a>
    5522:	1c5a      	adds	r2, r3, #1
    5524:	9201      	str	r2, [sp, #4]
    5526:	2e00      	cmp	r6, #0
    5528:	d128      	bne.n	557c <__register_exitproc+0x8c>
    552a:	9a01      	ldr	r2, [sp, #4]
    552c:	3302      	adds	r3, #2
    552e:	009b      	lsls	r3, r3, #2
    5530:	6042      	str	r2, [r0, #4]
    5532:	501f      	str	r7, [r3, r0]
    5534:	6828      	ldr	r0, [r5, #0]
    5536:	f7ff ffd9 	bl	54ec <__retarget_lock_release_recursive>
    553a:	2000      	movs	r0, #0
    553c:	b003      	add	sp, #12
    553e:	bc3c      	pop	{r2, r3, r4, r5}
    5540:	4690      	mov	r8, r2
    5542:	4699      	mov	r9, r3
    5544:	46a2      	mov	sl, r4
    5546:	46ab      	mov	fp, r5
    5548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    554a:	4b25      	ldr	r3, [pc, #148]	; (55e0 <__register_exitproc+0xf0>)
    554c:	2b00      	cmp	r3, #0
    554e:	d03d      	beq.n	55cc <__register_exitproc+0xdc>
    5550:	20c8      	movs	r0, #200	; 0xc8
    5552:	0040      	lsls	r0, r0, #1
    5554:	f7ff fb40 	bl	4bd8 <malloc>
    5558:	2800      	cmp	r0, #0
    555a:	d037      	beq.n	55cc <__register_exitproc+0xdc>
    555c:	22a4      	movs	r2, #164	; 0xa4
    555e:	2300      	movs	r3, #0
    5560:	0052      	lsls	r2, r2, #1
    5562:	58a1      	ldr	r1, [r4, r2]
    5564:	6043      	str	r3, [r0, #4]
    5566:	6001      	str	r1, [r0, #0]
    5568:	50a0      	str	r0, [r4, r2]
    556a:	3240      	adds	r2, #64	; 0x40
    556c:	5083      	str	r3, [r0, r2]
    556e:	3204      	adds	r2, #4
    5570:	5083      	str	r3, [r0, r2]
    5572:	3301      	adds	r3, #1
    5574:	9301      	str	r3, [sp, #4]
    5576:	2300      	movs	r3, #0
    5578:	2e00      	cmp	r6, #0
    557a:	d0d6      	beq.n	552a <__register_exitproc+0x3a>
    557c:	009a      	lsls	r2, r3, #2
    557e:	4692      	mov	sl, r2
    5580:	4482      	add	sl, r0
    5582:	464a      	mov	r2, r9
    5584:	2188      	movs	r1, #136	; 0x88
    5586:	4654      	mov	r4, sl
    5588:	5062      	str	r2, [r4, r1]
    558a:	22c4      	movs	r2, #196	; 0xc4
    558c:	0052      	lsls	r2, r2, #1
    558e:	4691      	mov	r9, r2
    5590:	4481      	add	r9, r0
    5592:	464a      	mov	r2, r9
    5594:	3987      	subs	r1, #135	; 0x87
    5596:	4099      	lsls	r1, r3
    5598:	6812      	ldr	r2, [r2, #0]
    559a:	468b      	mov	fp, r1
    559c:	430a      	orrs	r2, r1
    559e:	4694      	mov	ip, r2
    55a0:	464a      	mov	r2, r9
    55a2:	4661      	mov	r1, ip
    55a4:	6011      	str	r1, [r2, #0]
    55a6:	2284      	movs	r2, #132	; 0x84
    55a8:	4641      	mov	r1, r8
    55aa:	0052      	lsls	r2, r2, #1
    55ac:	50a1      	str	r1, [r4, r2]
    55ae:	2e02      	cmp	r6, #2
    55b0:	d1bb      	bne.n	552a <__register_exitproc+0x3a>
    55b2:	0002      	movs	r2, r0
    55b4:	465c      	mov	r4, fp
    55b6:	328d      	adds	r2, #141	; 0x8d
    55b8:	32ff      	adds	r2, #255	; 0xff
    55ba:	6811      	ldr	r1, [r2, #0]
    55bc:	430c      	orrs	r4, r1
    55be:	6014      	str	r4, [r2, #0]
    55c0:	e7b3      	b.n	552a <__register_exitproc+0x3a>
    55c2:	0020      	movs	r0, r4
    55c4:	304d      	adds	r0, #77	; 0x4d
    55c6:	30ff      	adds	r0, #255	; 0xff
    55c8:	50e0      	str	r0, [r4, r3]
    55ca:	e7a7      	b.n	551c <__register_exitproc+0x2c>
    55cc:	6828      	ldr	r0, [r5, #0]
    55ce:	f7ff ff8d 	bl	54ec <__retarget_lock_release_recursive>
    55d2:	2001      	movs	r0, #1
    55d4:	4240      	negs	r0, r0
    55d6:	e7b1      	b.n	553c <__register_exitproc+0x4c>
    55d8:	20000878 	.word	0x20000878
    55dc:	00005920 	.word	0x00005920
    55e0:	00004bd9 	.word	0x00004bd9
    55e4:	682f2e2e 	.word	0x682f2e2e
    55e8:	732f6c61 	.word	0x732f6c61
    55ec:	682f6372 	.word	0x682f6372
    55f0:	695f6c61 	.word	0x695f6c61
    55f4:	6d5f6332 	.word	0x6d5f6332
    55f8:	6e79735f 	.word	0x6e79735f
    55fc:	00632e63 	.word	0x00632e63
    5600:	682f2e2e 	.word	0x682f2e2e
    5604:	732f6c61 	.word	0x732f6c61
    5608:	682f6372 	.word	0x682f6372
    560c:	745f6c61 	.word	0x745f6c61
    5610:	72656d69 	.word	0x72656d69
    5614:	0000632e 	.word	0x0000632e
    5618:	682f2e2e 	.word	0x682f2e2e
    561c:	732f6c61 	.word	0x732f6c61
    5620:	682f6372 	.word	0x682f6372
    5624:	755f6c61 	.word	0x755f6c61
    5628:	74726173 	.word	0x74726173
    562c:	6e79735f 	.word	0x6e79735f
    5630:	00632e63 	.word	0x00632e63
    5634:	682f2e2e 	.word	0x682f2e2e
    5638:	752f6c61 	.word	0x752f6c61
    563c:	736c6974 	.word	0x736c6974
    5640:	6372732f 	.word	0x6372732f
    5644:	6974752f 	.word	0x6974752f
    5648:	6c5f736c 	.word	0x6c5f736c
    564c:	2e747369 	.word	0x2e747369
    5650:	00000063 	.word	0x00000063

00005654 <_map>:
    5654:	00000000 00000058 00000003 00000033     ....X.......3...
    5664:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    5674:	632e6369 00000000 42000400 42000800     ic.c.......B...B
    5684:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    5694:	43000000 43000400                       ...C...C

0000569c <_i2cms>:
    569c:	00000001 00200014 00000100 00000f0e     ...... .........
    56ac:	00d70000 003d0900 682f2e2e 732f6c70     ......=.../hpl/s
    56bc:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    56cc:	0000632e 42003000 42003400 42003800     .c...0.B.4.B.8.B
    56dc:	42003c00 42004000 43000800 43000c00     .<.B.@.B...C...C
    56ec:	43001000                                ...C

000056f0 <_tcs>:
    56f0:	00001400 00000708 00000000 00000003     ................
    5700:	00000000 00001602 00000708 00000000     ................
    5710:	00000003 00000000 00001804 00000708     ................
    5720:	00000000 00000003 00000000 00001506     ................
    5730:	00000708 00000000 00000003 00000000     ................
    5740:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    5750:	0000632e 2d5f2d5f 0000005f 3d2b3d2b     .c.._-_-_...+=+=
    5760:	0000002b 00001d6e 00001d6a 00001d70     +...n...j...p...
    5770:	00001d76 00001d7c 00001d82 00001d88     v...|...........
    5780:	00005f2d 2d2d2d5f 2d2d2d2d 5f2d2d2d     -_.._----------_
    5790:	00000000 0000003d 2d5f2d5f 005f2d5f     ....=..._-_-_-_.
    57a0:	5f2d2d5f 5f2d2d5f 5f2d2d5f 00000000     _--__--__--_....
    57b0:	2d2d2d5f 2d2d2d5f 2d2d2d5f 0000005f     _---_---_---_...
    57c0:	5f2d2d5f 005f2d2d 00002a3a 00002a32     _--_--_.:*..2*..
    57d0:	00002a2a 00002a32 00002a2a 00002a40     **..2*..**..@*..
    57e0:	00002a40 00002a40 00002a40 00002a40     @*..@*..@*..@*..
    57f0:	00002a40 00002a40 00002a40 00002a40     @*..@*..@*..@*..
    5800:	00002a40 00002a40 00002a40 00002a40     @*..@*..@*..@*..
    5810:	00002a40 00002a06 00002a40 00002a40     @*...*..@*..@*..
    5820:	00002a40 00002a40 00002a40 00002a40     @*..@*..@*..@*..
    5830:	00002a40 00002a40 00002a40 00002a40     @*..@*..@*..@*..
    5840:	00002a40 00002a40 00002a40 00002a40     @*..@*..@*..@*..
    5850:	00002a40 00002a40 00002a40 00002a40     @*..@*..@*..@*..
    5860:	00002a40 00002a40 00002a40 00002a40     @*..@*..@*..@*..
    5870:	00002a40 00002a40 00002a40 00002a40     @*..@*..@*..@*..
    5880:	00002a40 00002a40 00002a40 00002a40     @*..@*..@*..@*..
    5890:	00002a40 00002a40 00002a3a 00002a06     @*..@*..:*...*..
    58a0:	00003780 00003762 0000371c 0000363a     .7..b7...7..:6..
    58b0:	0000371c 00003754 0000371c 0000363a     .7..T7...7..:6..
    58c0:	00003762 00003762 00003754 0000363a     b7..b7..T7..:6..
    58d0:	00003632 00003632 00003632 00003998     26..26..26...9..
    58e0:	00003de0 00003ca0 00003ca0 00003c9c     .=...<...<...<..
    58f0:	00003db8 00003db8 00003daa 00003c9c     .=...=...=...<..
    5900:	00003db8 00003daa 00003db8 00003c9c     .=...=...=...<..
    5910:	00003dc0 00003dc0 00003dc0 00003fc4     .=...=...=...?..

00005920 <_global_impure_ptr>:
    5920:	20000040                                @.. 

00005924 <_init>:
    5924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5926:	46c0      	nop			; (mov r8, r8)
    5928:	bcf8      	pop	{r3, r4, r5, r6, r7}
    592a:	bc08      	pop	{r3}
    592c:	469e      	mov	lr, r3
    592e:	4770      	bx	lr

00005930 <__init_array_start>:
    5930:	00005231 	.word	0x00005231

00005934 <__frame_dummy_init_array_entry>:
    5934:	000000e5                                ....

00005938 <_fini>:
    5938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    593a:	46c0      	nop			; (mov r8, r8)
    593c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    593e:	bc08      	pop	{r3}
    5940:	469e      	mov	lr, r3
    5942:	4770      	bx	lr

00005944 <__fini_array_start>:
    5944:	000000bd 	.word	0x000000bd
